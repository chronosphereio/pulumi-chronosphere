// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Chronosphere
{
    public static class NotificationPolicyDataSource
    {
        public static Task<NotificationPolicyDataSourceResult> InvokeAsync(NotificationPolicyDataSourceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<NotificationPolicyDataSourceResult>("chronosphere:index/notificationPolicyDataSource:NotificationPolicyDataSource", args ?? new NotificationPolicyDataSourceArgs(), options.WithDefaults());

        public static Output<NotificationPolicyDataSourceResult> Invoke(NotificationPolicyDataSourceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<NotificationPolicyDataSourceResult>("chronosphere:index/notificationPolicyDataSource:NotificationPolicyDataSource", args ?? new NotificationPolicyDataSourceInvokeArgs(), options.WithDefaults());
    }


    public sealed class NotificationPolicyDataSourceArgs : global::Pulumi.InvokeArgs
    {
        [Input("name")]
        public string? Name { get; set; }

        [Input("notificationPolicyData")]
        public string? NotificationPolicyData { get; set; }

        [Input("overrides")]
        private List<Inputs.NotificationPolicyDataSourceOverride>? _overrides;
        public List<Inputs.NotificationPolicyDataSourceOverride> Overrides
        {
            get => _overrides ?? (_overrides = new List<Inputs.NotificationPolicyDataSourceOverride>());
            set => _overrides = value;
        }

        [Input("routes")]
        private List<Inputs.NotificationPolicyDataSourceRoute>? _routes;
        public List<Inputs.NotificationPolicyDataSourceRoute> Routes
        {
            get => _routes ?? (_routes = new List<Inputs.NotificationPolicyDataSourceRoute>());
            set => _routes = value;
        }

        [Input("rules")]
        private List<Inputs.NotificationPolicyDataSourceRule>? _rules;
        [Obsolete(@"`rule` is deprecated, use `route` instead.")]
        public List<Inputs.NotificationPolicyDataSourceRule> Rules
        {
            get => _rules ?? (_rules = new List<Inputs.NotificationPolicyDataSourceRule>());
            set => _rules = value;
        }

        [Input("slug")]
        public string? Slug { get; set; }

        [Input("teamId")]
        public string? TeamId { get; set; }

        public NotificationPolicyDataSourceArgs()
        {
        }
        public static new NotificationPolicyDataSourceArgs Empty => new NotificationPolicyDataSourceArgs();
    }

    public sealed class NotificationPolicyDataSourceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationPolicyData")]
        public Input<string>? NotificationPolicyData { get; set; }

        [Input("overrides")]
        private InputList<Inputs.NotificationPolicyDataSourceOverrideArgs>? _overrides;
        public InputList<Inputs.NotificationPolicyDataSourceOverrideArgs> Overrides
        {
            get => _overrides ?? (_overrides = new InputList<Inputs.NotificationPolicyDataSourceOverrideArgs>());
            set => _overrides = value;
        }

        [Input("routes")]
        private InputList<Inputs.NotificationPolicyDataSourceRouteArgs>? _routes;
        public InputList<Inputs.NotificationPolicyDataSourceRouteArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.NotificationPolicyDataSourceRouteArgs>());
            set => _routes = value;
        }

        [Input("rules")]
        private InputList<Inputs.NotificationPolicyDataSourceRuleArgs>? _rules;
        [Obsolete(@"`rule` is deprecated, use `route` instead.")]
        public InputList<Inputs.NotificationPolicyDataSourceRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.NotificationPolicyDataSourceRuleArgs>());
            set => _rules = value;
        }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public NotificationPolicyDataSourceInvokeArgs()
        {
        }
        public static new NotificationPolicyDataSourceInvokeArgs Empty => new NotificationPolicyDataSourceInvokeArgs();
    }


    [OutputType]
    public sealed class NotificationPolicyDataSourceResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool IsIndependent;
        public readonly string? Name;
        public readonly string NotificationPolicyData;
        public readonly ImmutableArray<Outputs.NotificationPolicyDataSourceOverride> Overrides;
        public readonly ImmutableArray<Outputs.NotificationPolicyDataSourceRoute> Routes;
        public readonly ImmutableArray<Outputs.NotificationPolicyDataSourceRule> Rules;
        public readonly string Slug;
        public readonly string? TeamId;

        [OutputConstructor]
        private NotificationPolicyDataSourceResult(
            string id,

            bool isIndependent,

            string? name,

            string notificationPolicyData,

            ImmutableArray<Outputs.NotificationPolicyDataSourceOverride> overrides,

            ImmutableArray<Outputs.NotificationPolicyDataSourceRoute> routes,

            ImmutableArray<Outputs.NotificationPolicyDataSourceRule> rules,

            string slug,

            string? teamId)
        {
            Id = id;
            IsIndependent = isIndependent;
            Name = name;
            NotificationPolicyData = notificationPolicyData;
            Overrides = overrides;
            Routes = routes;
            Rules = rules;
            Slug = slug;
            TeamId = teamId;
        }
    }
}
