// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Chronosphere.Pulumi
{
    [PulumiResourceType("chronosphere:index/traceMetricsRule:TraceMetricsRule")]
    public partial class TraceMetricsRule : global::Pulumi.CustomResource
    {
        [Output("groupBies")]
        public Output<ImmutableArray<Outputs.TraceMetricsRuleGroupBy>> GroupBies { get; private set; } = null!;

        [Output("histogramBucketsSeconds")]
        public Output<ImmutableArray<double>> HistogramBucketsSeconds { get; private set; } = null!;

        [Output("metricLabels")]
        public Output<ImmutableDictionary<string, string>?> MetricLabels { get; private set; } = null!;

        [Output("metricName")]
        public Output<string> MetricName { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        [Output("traceFilter")]
        public Output<Outputs.TraceMetricsRuleTraceFilter> TraceFilter { get; private set; } = null!;


        /// <summary>
        /// Create a TraceMetricsRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TraceMetricsRule(string name, TraceMetricsRuleArgs args, CustomResourceOptions? options = null)
            : base("chronosphere:index/traceMetricsRule:TraceMetricsRule", name, args ?? new TraceMetricsRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TraceMetricsRule(string name, Input<string> id, TraceMetricsRuleState? state = null, CustomResourceOptions? options = null)
            : base("chronosphere:index/traceMetricsRule:TraceMetricsRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/chronosphereio",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TraceMetricsRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TraceMetricsRule Get(string name, Input<string> id, TraceMetricsRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new TraceMetricsRule(name, id, state, options);
        }
    }

    public sealed class TraceMetricsRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("groupBies")]
        private InputList<Inputs.TraceMetricsRuleGroupByArgs>? _groupBies;
        public InputList<Inputs.TraceMetricsRuleGroupByArgs> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<Inputs.TraceMetricsRuleGroupByArgs>());
            set => _groupBies = value;
        }

        [Input("histogramBucketsSeconds")]
        private InputList<double>? _histogramBucketsSeconds;
        public InputList<double> HistogramBucketsSeconds
        {
            get => _histogramBucketsSeconds ?? (_histogramBucketsSeconds = new InputList<double>());
            set => _histogramBucketsSeconds = value;
        }

        [Input("metricLabels")]
        private InputMap<string>? _metricLabels;
        public InputMap<string> MetricLabels
        {
            get => _metricLabels ?? (_metricLabels = new InputMap<string>());
            set => _metricLabels = value;
        }

        [Input("metricName", required: true)]
        public Input<string> MetricName { get; set; } = null!;

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        [Input("traceFilter", required: true)]
        public Input<Inputs.TraceMetricsRuleTraceFilterArgs> TraceFilter { get; set; } = null!;

        public TraceMetricsRuleArgs()
        {
        }
        public static new TraceMetricsRuleArgs Empty => new TraceMetricsRuleArgs();
    }

    public sealed class TraceMetricsRuleState : global::Pulumi.ResourceArgs
    {
        [Input("groupBies")]
        private InputList<Inputs.TraceMetricsRuleGroupByGetArgs>? _groupBies;
        public InputList<Inputs.TraceMetricsRuleGroupByGetArgs> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<Inputs.TraceMetricsRuleGroupByGetArgs>());
            set => _groupBies = value;
        }

        [Input("histogramBucketsSeconds")]
        private InputList<double>? _histogramBucketsSeconds;
        public InputList<double> HistogramBucketsSeconds
        {
            get => _histogramBucketsSeconds ?? (_histogramBucketsSeconds = new InputList<double>());
            set => _histogramBucketsSeconds = value;
        }

        [Input("metricLabels")]
        private InputMap<string>? _metricLabels;
        public InputMap<string> MetricLabels
        {
            get => _metricLabels ?? (_metricLabels = new InputMap<string>());
            set => _metricLabels = value;
        }

        [Input("metricName")]
        public Input<string>? MetricName { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        [Input("traceFilter")]
        public Input<Inputs.TraceMetricsRuleTraceFilterGetArgs>? TraceFilter { get; set; }

        public TraceMetricsRuleState()
        {
        }
        public static new TraceMetricsRuleState Empty => new TraceMetricsRuleState();
    }
}
