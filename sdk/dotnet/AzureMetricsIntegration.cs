// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Chronosphere.Pulumi
{
    [PulumiResourceType("chronosphere:index/azureMetricsIntegration:AzureMetricsIntegration")]
    public partial class AzureMetricsIntegration : global::Pulumi.CustomResource
    {
        [Output("countMetricsEnabled")]
        public Output<bool?> CountMetricsEnabled { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("principal")]
        public Output<Outputs.AzureMetricsIntegrationPrincipal?> Principal { get; private set; } = null!;

        [Output("propagateTags")]
        public Output<bool?> PropagateTags { get; private set; } = null!;

        [Output("scrapeConfig")]
        public Output<Outputs.AzureMetricsIntegrationScrapeConfig?> ScrapeConfig { get; private set; } = null!;

        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        [Output("usageMetricsEnabled")]
        public Output<bool?> UsageMetricsEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a AzureMetricsIntegration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AzureMetricsIntegration(string name, AzureMetricsIntegrationArgs args, CustomResourceOptions? options = null)
            : base("chronosphere:index/azureMetricsIntegration:AzureMetricsIntegration", name, args ?? new AzureMetricsIntegrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AzureMetricsIntegration(string name, Input<string> id, AzureMetricsIntegrationState? state = null, CustomResourceOptions? options = null)
            : base("chronosphere:index/azureMetricsIntegration:AzureMetricsIntegration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/chronosphereio",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AzureMetricsIntegration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AzureMetricsIntegration Get(string name, Input<string> id, AzureMetricsIntegrationState? state = null, CustomResourceOptions? options = null)
        {
            return new AzureMetricsIntegration(name, id, state, options);
        }
    }

    public sealed class AzureMetricsIntegrationArgs : global::Pulumi.ResourceArgs
    {
        [Input("countMetricsEnabled")]
        public Input<bool>? CountMetricsEnabled { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("principal")]
        public Input<Inputs.AzureMetricsIntegrationPrincipalArgs>? Principal { get; set; }

        [Input("propagateTags")]
        public Input<bool>? PropagateTags { get; set; }

        [Input("scrapeConfig")]
        public Input<Inputs.AzureMetricsIntegrationScrapeConfigArgs>? ScrapeConfig { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        [Input("usageMetricsEnabled")]
        public Input<bool>? UsageMetricsEnabled { get; set; }

        public AzureMetricsIntegrationArgs()
        {
        }
        public static new AzureMetricsIntegrationArgs Empty => new AzureMetricsIntegrationArgs();
    }

    public sealed class AzureMetricsIntegrationState : global::Pulumi.ResourceArgs
    {
        [Input("countMetricsEnabled")]
        public Input<bool>? CountMetricsEnabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("principal")]
        public Input<Inputs.AzureMetricsIntegrationPrincipalGetArgs>? Principal { get; set; }

        [Input("propagateTags")]
        public Input<bool>? PropagateTags { get; set; }

        [Input("scrapeConfig")]
        public Input<Inputs.AzureMetricsIntegrationScrapeConfigGetArgs>? ScrapeConfig { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        [Input("usageMetricsEnabled")]
        public Input<bool>? UsageMetricsEnabled { get; set; }

        public AzureMetricsIntegrationState()
        {
        }
        public static new AzureMetricsIntegrationState Empty => new AzureMetricsIntegrationState();
    }
}
