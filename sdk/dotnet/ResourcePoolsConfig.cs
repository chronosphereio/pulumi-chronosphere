// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Chronosphere.Pulumi
{
    [PulumiResourceType("chronosphere:index/resourcePoolsConfig:ResourcePoolsConfig")]
    public partial class ResourcePoolsConfig : global::Pulumi.CustomResource
    {
        [Output("defaultPool")]
        public Output<Outputs.ResourcePoolsConfigDefaultPool?> DefaultPool { get; private set; } = null!;

        [Output("pool")]
        public Output<ImmutableArray<Outputs.ResourcePoolsConfigPool>> Pool { get; private set; } = null!;

        [Output("pools")]
        public Output<ImmutableArray<Outputs.ResourcePoolsConfigPool>> Pools { get; private set; } = null!;


        /// <summary>
        /// Create a ResourcePoolsConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResourcePoolsConfig(string name, ResourcePoolsConfigArgs? args = null, CustomResourceOptions? options = null)
            : base("chronosphere:index/resourcePoolsConfig:ResourcePoolsConfig", name, args ?? new ResourcePoolsConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResourcePoolsConfig(string name, Input<string> id, ResourcePoolsConfigState? state = null, CustomResourceOptions? options = null)
            : base("chronosphere:index/resourcePoolsConfig:ResourcePoolsConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResourcePoolsConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResourcePoolsConfig Get(string name, Input<string> id, ResourcePoolsConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new ResourcePoolsConfig(name, id, state, options);
        }
    }

    public sealed class ResourcePoolsConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("defaultPool")]
        public Input<Inputs.ResourcePoolsConfigDefaultPoolArgs>? DefaultPool { get; set; }

        [Input("pool")]
        private InputList<Inputs.ResourcePoolsConfigPoolArgs>? _pool;
        public InputList<Inputs.ResourcePoolsConfigPoolArgs> Pool
        {
            get => _pool ?? (_pool = new InputList<Inputs.ResourcePoolsConfigPoolArgs>());
            set => _pool = value;
        }

        [Input("pools")]
        private InputList<Inputs.ResourcePoolsConfigPoolArgs>? _pools;
        [Obsolete(@"Use pool instead of pools")]
        public InputList<Inputs.ResourcePoolsConfigPoolArgs> Pools
        {
            get => _pools ?? (_pools = new InputList<Inputs.ResourcePoolsConfigPoolArgs>());
            set => _pools = value;
        }

        public ResourcePoolsConfigArgs()
        {
        }
        public static new ResourcePoolsConfigArgs Empty => new ResourcePoolsConfigArgs();
    }

    public sealed class ResourcePoolsConfigState : global::Pulumi.ResourceArgs
    {
        [Input("defaultPool")]
        public Input<Inputs.ResourcePoolsConfigDefaultPoolGetArgs>? DefaultPool { get; set; }

        [Input("pool")]
        private InputList<Inputs.ResourcePoolsConfigPoolGetArgs>? _pool;
        public InputList<Inputs.ResourcePoolsConfigPoolGetArgs> Pool
        {
            get => _pool ?? (_pool = new InputList<Inputs.ResourcePoolsConfigPoolGetArgs>());
            set => _pool = value;
        }

        [Input("pools")]
        private InputList<Inputs.ResourcePoolsConfigPoolGetArgs>? _pools;
        [Obsolete(@"Use pool instead of pools")]
        public InputList<Inputs.ResourcePoolsConfigPoolGetArgs> Pools
        {
            get => _pools ?? (_pools = new InputList<Inputs.ResourcePoolsConfigPoolGetArgs>());
            set => _pools = value;
        }

        public ResourcePoolsConfigState()
        {
        }
        public static new ResourcePoolsConfigState Empty => new ResourcePoolsConfigState();
    }
}
