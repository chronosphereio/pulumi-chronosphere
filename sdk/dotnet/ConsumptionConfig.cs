// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Chronosphere.Pulumi
{
    [PulumiResourceType("chronosphere:index/consumptionConfig:ConsumptionConfig")]
    public partial class ConsumptionConfig : global::Pulumi.CustomResource
    {
        [Output("partitions")]
        public Output<ImmutableArray<Outputs.ConsumptionConfigPartition>> Partitions { get; private set; } = null!;


        /// <summary>
        /// Create a ConsumptionConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConsumptionConfig(string name, ConsumptionConfigArgs? args = null, CustomResourceOptions? options = null)
            : base("chronosphere:index/consumptionConfig:ConsumptionConfig", name, args ?? new ConsumptionConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConsumptionConfig(string name, Input<string> id, ConsumptionConfigState? state = null, CustomResourceOptions? options = null)
            : base("chronosphere:index/consumptionConfig:ConsumptionConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/chronosphereio",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConsumptionConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConsumptionConfig Get(string name, Input<string> id, ConsumptionConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new ConsumptionConfig(name, id, state, options);
        }
    }

    public sealed class ConsumptionConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("partitions")]
        private InputList<Inputs.ConsumptionConfigPartitionArgs>? _partitions;
        public InputList<Inputs.ConsumptionConfigPartitionArgs> Partitions
        {
            get => _partitions ?? (_partitions = new InputList<Inputs.ConsumptionConfigPartitionArgs>());
            set => _partitions = value;
        }

        public ConsumptionConfigArgs()
        {
        }
        public static new ConsumptionConfigArgs Empty => new ConsumptionConfigArgs();
    }

    public sealed class ConsumptionConfigState : global::Pulumi.ResourceArgs
    {
        [Input("partitions")]
        private InputList<Inputs.ConsumptionConfigPartitionGetArgs>? _partitions;
        public InputList<Inputs.ConsumptionConfigPartitionGetArgs> Partitions
        {
            get => _partitions ?? (_partitions = new InputList<Inputs.ConsumptionConfigPartitionGetArgs>());
            set => _partitions = value;
        }

        public ConsumptionConfigState()
        {
        }
        public static new ConsumptionConfigState Empty => new ConsumptionConfigState();
    }
}
