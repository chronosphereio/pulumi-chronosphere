// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Chronosphere.Pulumi
{
    [PulumiResourceType("chronosphere:index/logControlConfig:LogControlConfig")]
    public partial class LogControlConfig : global::Pulumi.CustomResource
    {
        [Output("rules")]
        public Output<ImmutableArray<Outputs.LogControlConfigRule>> Rules { get; private set; } = null!;


        /// <summary>
        /// Create a LogControlConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogControlConfig(string name, LogControlConfigArgs? args = null, CustomResourceOptions? options = null)
            : base("chronosphere:index/logControlConfig:LogControlConfig", name, args ?? new LogControlConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogControlConfig(string name, Input<string> id, LogControlConfigState? state = null, CustomResourceOptions? options = null)
            : base("chronosphere:index/logControlConfig:LogControlConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/chronosphereio",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogControlConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogControlConfig Get(string name, Input<string> id, LogControlConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new LogControlConfig(name, id, state, options);
        }
    }

    public sealed class LogControlConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("rules")]
        private InputList<Inputs.LogControlConfigRuleArgs>? _rules;
        public InputList<Inputs.LogControlConfigRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.LogControlConfigRuleArgs>());
            set => _rules = value;
        }

        public LogControlConfigArgs()
        {
        }
        public static new LogControlConfigArgs Empty => new LogControlConfigArgs();
    }

    public sealed class LogControlConfigState : global::Pulumi.ResourceArgs
    {
        [Input("rules")]
        private InputList<Inputs.LogControlConfigRuleGetArgs>? _rules;
        public InputList<Inputs.LogControlConfigRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.LogControlConfigRuleGetArgs>());
            set => _rules = value;
        }

        public LogControlConfigState()
        {
        }
        public static new LogControlConfigState Empty => new LogControlConfigState();
    }
}
