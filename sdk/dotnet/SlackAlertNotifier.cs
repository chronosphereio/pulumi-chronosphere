// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Chronosphere
{
    [ChronosphereResourceType("chronosphere:index/slackAlertNotifier:SlackAlertNotifier")]
    public partial class SlackAlertNotifier : global::Pulumi.CustomResource
    {
        [Output("actions")]
        public Output<ImmutableArray<Outputs.SlackAlertNotifierAction>> Actions { get; private set; } = null!;

        [Output("apiUrl")]
        public Output<string> ApiUrl { get; private set; } = null!;

        [Output("basicAuthPassword")]
        public Output<string?> BasicAuthPassword { get; private set; } = null!;

        [Output("basicAuthUsername")]
        public Output<string?> BasicAuthUsername { get; private set; } = null!;

        [Output("bearerToken")]
        public Output<string?> BearerToken { get; private set; } = null!;

        [Output("callbackId")]
        public Output<string?> CallbackId { get; private set; } = null!;

        [Output("channel")]
        public Output<string> Channel { get; private set; } = null!;

        [Output("color")]
        public Output<string?> Color { get; private set; } = null!;

        [Output("fallback")]
        public Output<string?> Fallback { get; private set; } = null!;

        [Output("fields")]
        public Output<ImmutableArray<Outputs.SlackAlertNotifierField>> Fields { get; private set; } = null!;

        [Output("footer")]
        public Output<string?> Footer { get; private set; } = null!;

        [Output("iconEmoji")]
        public Output<string?> IconEmoji { get; private set; } = null!;

        [Output("iconUrl")]
        public Output<string?> IconUrl { get; private set; } = null!;

        [Output("imageUrl")]
        public Output<string?> ImageUrl { get; private set; } = null!;

        [Output("linkNames")]
        public Output<bool?> LinkNames { get; private set; } = null!;

        [Output("mrkdwnIns")]
        public Output<ImmutableArray<string>> MrkdwnIns { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("pretext")]
        public Output<string?> Pretext { get; private set; } = null!;

        [Output("proxyUrl")]
        public Output<string?> ProxyUrl { get; private set; } = null!;

        [Output("sendResolved")]
        public Output<bool?> SendResolved { get; private set; } = null!;

        [Output("shortFields")]
        public Output<bool?> ShortFields { get; private set; } = null!;

        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        [Output("text")]
        public Output<string?> Text { get; private set; } = null!;

        [Output("thumbUrl")]
        public Output<string?> ThumbUrl { get; private set; } = null!;

        [Output("title")]
        public Output<string?> Title { get; private set; } = null!;

        [Output("titleLink")]
        public Output<string?> TitleLink { get; private set; } = null!;

        [Output("tlsInsecureSkipVerify")]
        public Output<bool?> TlsInsecureSkipVerify { get; private set; } = null!;

        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a SlackAlertNotifier resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SlackAlertNotifier(string name, SlackAlertNotifierArgs args, CustomResourceOptions? options = null)
            : base("chronosphere:index/slackAlertNotifier:SlackAlertNotifier", name, args ?? new SlackAlertNotifierArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SlackAlertNotifier(string name, Input<string> id, SlackAlertNotifierState? state = null, CustomResourceOptions? options = null)
            : base("chronosphere:index/slackAlertNotifier:SlackAlertNotifier", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "apiUrl",
                    "basicAuthPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SlackAlertNotifier resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SlackAlertNotifier Get(string name, Input<string> id, SlackAlertNotifierState? state = null, CustomResourceOptions? options = null)
        {
            return new SlackAlertNotifier(name, id, state, options);
        }
    }

    public sealed class SlackAlertNotifierArgs : global::Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.SlackAlertNotifierActionArgs>? _actions;
        public InputList<Inputs.SlackAlertNotifierActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.SlackAlertNotifierActionArgs>());
            set => _actions = value;
        }

        [Input("apiUrl", required: true)]
        private Input<string>? _apiUrl;
        public Input<string>? ApiUrl
        {
            get => _apiUrl;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiUrl = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("basicAuthPassword")]
        private Input<string>? _basicAuthPassword;
        public Input<string>? BasicAuthPassword
        {
            get => _basicAuthPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _basicAuthPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("basicAuthUsername")]
        public Input<string>? BasicAuthUsername { get; set; }

        [Input("bearerToken")]
        public Input<string>? BearerToken { get; set; }

        [Input("callbackId")]
        public Input<string>? CallbackId { get; set; }

        [Input("channel", required: true)]
        public Input<string> Channel { get; set; } = null!;

        [Input("color")]
        public Input<string>? Color { get; set; }

        [Input("fallback")]
        public Input<string>? Fallback { get; set; }

        [Input("fields")]
        private InputList<Inputs.SlackAlertNotifierFieldArgs>? _fields;
        public InputList<Inputs.SlackAlertNotifierFieldArgs> Fields
        {
            get => _fields ?? (_fields = new InputList<Inputs.SlackAlertNotifierFieldArgs>());
            set => _fields = value;
        }

        [Input("footer")]
        public Input<string>? Footer { get; set; }

        [Input("iconEmoji")]
        public Input<string>? IconEmoji { get; set; }

        [Input("iconUrl")]
        public Input<string>? IconUrl { get; set; }

        [Input("imageUrl")]
        public Input<string>? ImageUrl { get; set; }

        [Input("linkNames")]
        public Input<bool>? LinkNames { get; set; }

        [Input("mrkdwnIns")]
        private InputList<string>? _mrkdwnIns;
        public InputList<string> MrkdwnIns
        {
            get => _mrkdwnIns ?? (_mrkdwnIns = new InputList<string>());
            set => _mrkdwnIns = value;
        }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("pretext")]
        public Input<string>? Pretext { get; set; }

        [Input("proxyUrl")]
        public Input<string>? ProxyUrl { get; set; }

        [Input("sendResolved")]
        public Input<bool>? SendResolved { get; set; }

        [Input("shortFields")]
        public Input<bool>? ShortFields { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        [Input("text")]
        public Input<string>? Text { get; set; }

        [Input("thumbUrl")]
        public Input<string>? ThumbUrl { get; set; }

        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("titleLink")]
        public Input<string>? TitleLink { get; set; }

        [Input("tlsInsecureSkipVerify")]
        public Input<bool>? TlsInsecureSkipVerify { get; set; }

        [Input("username")]
        public Input<string>? Username { get; set; }

        public SlackAlertNotifierArgs()
        {
        }
        public static new SlackAlertNotifierArgs Empty => new SlackAlertNotifierArgs();
    }

    public sealed class SlackAlertNotifierState : global::Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.SlackAlertNotifierActionGetArgs>? _actions;
        public InputList<Inputs.SlackAlertNotifierActionGetArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.SlackAlertNotifierActionGetArgs>());
            set => _actions = value;
        }

        [Input("apiUrl")]
        private Input<string>? _apiUrl;
        public Input<string>? ApiUrl
        {
            get => _apiUrl;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiUrl = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("basicAuthPassword")]
        private Input<string>? _basicAuthPassword;
        public Input<string>? BasicAuthPassword
        {
            get => _basicAuthPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _basicAuthPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("basicAuthUsername")]
        public Input<string>? BasicAuthUsername { get; set; }

        [Input("bearerToken")]
        public Input<string>? BearerToken { get; set; }

        [Input("callbackId")]
        public Input<string>? CallbackId { get; set; }

        [Input("channel")]
        public Input<string>? Channel { get; set; }

        [Input("color")]
        public Input<string>? Color { get; set; }

        [Input("fallback")]
        public Input<string>? Fallback { get; set; }

        [Input("fields")]
        private InputList<Inputs.SlackAlertNotifierFieldGetArgs>? _fields;
        public InputList<Inputs.SlackAlertNotifierFieldGetArgs> Fields
        {
            get => _fields ?? (_fields = new InputList<Inputs.SlackAlertNotifierFieldGetArgs>());
            set => _fields = value;
        }

        [Input("footer")]
        public Input<string>? Footer { get; set; }

        [Input("iconEmoji")]
        public Input<string>? IconEmoji { get; set; }

        [Input("iconUrl")]
        public Input<string>? IconUrl { get; set; }

        [Input("imageUrl")]
        public Input<string>? ImageUrl { get; set; }

        [Input("linkNames")]
        public Input<bool>? LinkNames { get; set; }

        [Input("mrkdwnIns")]
        private InputList<string>? _mrkdwnIns;
        public InputList<string> MrkdwnIns
        {
            get => _mrkdwnIns ?? (_mrkdwnIns = new InputList<string>());
            set => _mrkdwnIns = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pretext")]
        public Input<string>? Pretext { get; set; }

        [Input("proxyUrl")]
        public Input<string>? ProxyUrl { get; set; }

        [Input("sendResolved")]
        public Input<bool>? SendResolved { get; set; }

        [Input("shortFields")]
        public Input<bool>? ShortFields { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        [Input("text")]
        public Input<string>? Text { get; set; }

        [Input("thumbUrl")]
        public Input<string>? ThumbUrl { get; set; }

        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("titleLink")]
        public Input<string>? TitleLink { get; set; }

        [Input("tlsInsecureSkipVerify")]
        public Input<bool>? TlsInsecureSkipVerify { get; set; }

        [Input("username")]
        public Input<string>? Username { get; set; }

        public SlackAlertNotifierState()
        {
        }
        public static new SlackAlertNotifierState Empty => new SlackAlertNotifierState();
    }
}
