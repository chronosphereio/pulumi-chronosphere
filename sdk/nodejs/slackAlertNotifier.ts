// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlackAlertNotifier extends pulumi.CustomResource {
    /**
     * Get an existing SlackAlertNotifier resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlackAlertNotifierState, opts?: pulumi.CustomResourceOptions): SlackAlertNotifier {
        return new SlackAlertNotifier(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'chronosphere:index/slackAlertNotifier:SlackAlertNotifier';

    /**
     * Returns true if the given object is an instance of SlackAlertNotifier.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlackAlertNotifier {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlackAlertNotifier.__pulumiType;
    }

    public readonly actions!: pulumi.Output<outputs.SlackAlertNotifierAction[] | undefined>;
    public readonly apiUrl!: pulumi.Output<string>;
    public readonly basicAuthPassword!: pulumi.Output<string | undefined>;
    public readonly basicAuthUsername!: pulumi.Output<string | undefined>;
    public readonly bearerToken!: pulumi.Output<string | undefined>;
    public readonly callbackId!: pulumi.Output<string | undefined>;
    public readonly channel!: pulumi.Output<string>;
    public readonly color!: pulumi.Output<string | undefined>;
    public readonly fallback!: pulumi.Output<string | undefined>;
    public readonly fields!: pulumi.Output<outputs.SlackAlertNotifierField[] | undefined>;
    public readonly footer!: pulumi.Output<string | undefined>;
    public readonly iconEmoji!: pulumi.Output<string | undefined>;
    public readonly iconUrl!: pulumi.Output<string | undefined>;
    public readonly imageUrl!: pulumi.Output<string | undefined>;
    public readonly linkNames!: pulumi.Output<boolean | undefined>;
    public readonly mrkdwnIns!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly pretext!: pulumi.Output<string | undefined>;
    public readonly proxyUrl!: pulumi.Output<string | undefined>;
    public readonly sendResolved!: pulumi.Output<boolean | undefined>;
    public readonly shortFields!: pulumi.Output<boolean | undefined>;
    public readonly slug!: pulumi.Output<string>;
    public readonly text!: pulumi.Output<string | undefined>;
    public readonly thumbUrl!: pulumi.Output<string | undefined>;
    public readonly title!: pulumi.Output<string | undefined>;
    public readonly titleLink!: pulumi.Output<string | undefined>;
    public readonly tlsInsecureSkipVerify!: pulumi.Output<boolean | undefined>;
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a SlackAlertNotifier resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SlackAlertNotifierArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlackAlertNotifierArgs | SlackAlertNotifierState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlackAlertNotifierState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["apiUrl"] = state ? state.apiUrl : undefined;
            resourceInputs["basicAuthPassword"] = state ? state.basicAuthPassword : undefined;
            resourceInputs["basicAuthUsername"] = state ? state.basicAuthUsername : undefined;
            resourceInputs["bearerToken"] = state ? state.bearerToken : undefined;
            resourceInputs["callbackId"] = state ? state.callbackId : undefined;
            resourceInputs["channel"] = state ? state.channel : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["fallback"] = state ? state.fallback : undefined;
            resourceInputs["fields"] = state ? state.fields : undefined;
            resourceInputs["footer"] = state ? state.footer : undefined;
            resourceInputs["iconEmoji"] = state ? state.iconEmoji : undefined;
            resourceInputs["iconUrl"] = state ? state.iconUrl : undefined;
            resourceInputs["imageUrl"] = state ? state.imageUrl : undefined;
            resourceInputs["linkNames"] = state ? state.linkNames : undefined;
            resourceInputs["mrkdwnIns"] = state ? state.mrkdwnIns : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pretext"] = state ? state.pretext : undefined;
            resourceInputs["proxyUrl"] = state ? state.proxyUrl : undefined;
            resourceInputs["sendResolved"] = state ? state.sendResolved : undefined;
            resourceInputs["shortFields"] = state ? state.shortFields : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["text"] = state ? state.text : undefined;
            resourceInputs["thumbUrl"] = state ? state.thumbUrl : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["titleLink"] = state ? state.titleLink : undefined;
            resourceInputs["tlsInsecureSkipVerify"] = state ? state.tlsInsecureSkipVerify : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as SlackAlertNotifierArgs | undefined;
            if ((!args || args.apiUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiUrl'");
            }
            if ((!args || args.channel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'channel'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["apiUrl"] = args?.apiUrl ? pulumi.secret(args.apiUrl) : undefined;
            resourceInputs["basicAuthPassword"] = args?.basicAuthPassword ? pulumi.secret(args.basicAuthPassword) : undefined;
            resourceInputs["basicAuthUsername"] = args ? args.basicAuthUsername : undefined;
            resourceInputs["bearerToken"] = args ? args.bearerToken : undefined;
            resourceInputs["callbackId"] = args ? args.callbackId : undefined;
            resourceInputs["channel"] = args ? args.channel : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["fallback"] = args ? args.fallback : undefined;
            resourceInputs["fields"] = args ? args.fields : undefined;
            resourceInputs["footer"] = args ? args.footer : undefined;
            resourceInputs["iconEmoji"] = args ? args.iconEmoji : undefined;
            resourceInputs["iconUrl"] = args ? args.iconUrl : undefined;
            resourceInputs["imageUrl"] = args ? args.imageUrl : undefined;
            resourceInputs["linkNames"] = args ? args.linkNames : undefined;
            resourceInputs["mrkdwnIns"] = args ? args.mrkdwnIns : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pretext"] = args ? args.pretext : undefined;
            resourceInputs["proxyUrl"] = args ? args.proxyUrl : undefined;
            resourceInputs["sendResolved"] = args ? args.sendResolved : undefined;
            resourceInputs["shortFields"] = args ? args.shortFields : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["text"] = args ? args.text : undefined;
            resourceInputs["thumbUrl"] = args ? args.thumbUrl : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["titleLink"] = args ? args.titleLink : undefined;
            resourceInputs["tlsInsecureSkipVerify"] = args ? args.tlsInsecureSkipVerify : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiUrl", "basicAuthPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SlackAlertNotifier.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SlackAlertNotifier resources.
 */
export interface SlackAlertNotifierState {
    actions?: pulumi.Input<pulumi.Input<inputs.SlackAlertNotifierAction>[]>;
    apiUrl?: pulumi.Input<string>;
    basicAuthPassword?: pulumi.Input<string>;
    basicAuthUsername?: pulumi.Input<string>;
    bearerToken?: pulumi.Input<string>;
    callbackId?: pulumi.Input<string>;
    channel?: pulumi.Input<string>;
    color?: pulumi.Input<string>;
    fallback?: pulumi.Input<string>;
    fields?: pulumi.Input<pulumi.Input<inputs.SlackAlertNotifierField>[]>;
    footer?: pulumi.Input<string>;
    iconEmoji?: pulumi.Input<string>;
    iconUrl?: pulumi.Input<string>;
    imageUrl?: pulumi.Input<string>;
    linkNames?: pulumi.Input<boolean>;
    mrkdwnIns?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    pretext?: pulumi.Input<string>;
    proxyUrl?: pulumi.Input<string>;
    sendResolved?: pulumi.Input<boolean>;
    shortFields?: pulumi.Input<boolean>;
    slug?: pulumi.Input<string>;
    text?: pulumi.Input<string>;
    thumbUrl?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    titleLink?: pulumi.Input<string>;
    tlsInsecureSkipVerify?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlackAlertNotifier resource.
 */
export interface SlackAlertNotifierArgs {
    actions?: pulumi.Input<pulumi.Input<inputs.SlackAlertNotifierAction>[]>;
    apiUrl: pulumi.Input<string>;
    basicAuthPassword?: pulumi.Input<string>;
    basicAuthUsername?: pulumi.Input<string>;
    bearerToken?: pulumi.Input<string>;
    callbackId?: pulumi.Input<string>;
    channel: pulumi.Input<string>;
    color?: pulumi.Input<string>;
    fallback?: pulumi.Input<string>;
    fields?: pulumi.Input<pulumi.Input<inputs.SlackAlertNotifierField>[]>;
    footer?: pulumi.Input<string>;
    iconEmoji?: pulumi.Input<string>;
    iconUrl?: pulumi.Input<string>;
    imageUrl?: pulumi.Input<string>;
    linkNames?: pulumi.Input<boolean>;
    mrkdwnIns?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    pretext?: pulumi.Input<string>;
    proxyUrl?: pulumi.Input<string>;
    sendResolved?: pulumi.Input<boolean>;
    shortFields?: pulumi.Input<boolean>;
    slug?: pulumi.Input<string>;
    text?: pulumi.Input<string>;
    thumbUrl?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    titleLink?: pulumi.Input<string>;
    tlsInsecureSkipVerify?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}
