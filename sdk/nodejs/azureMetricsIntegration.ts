// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AzureMetricsIntegration extends pulumi.CustomResource {
    /**
     * Get an existing AzureMetricsIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureMetricsIntegrationState, opts?: pulumi.CustomResourceOptions): AzureMetricsIntegration {
        return new AzureMetricsIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'chronosphere:index/azureMetricsIntegration:AzureMetricsIntegration';

    /**
     * Returns true if the given object is an instance of AzureMetricsIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureMetricsIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureMetricsIntegration.__pulumiType;
    }

    public readonly countMetricsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly principal!: pulumi.Output<outputs.AzureMetricsIntegrationPrincipal | undefined>;
    public readonly propagateTags!: pulumi.Output<boolean | undefined>;
    public readonly scrapeConfig!: pulumi.Output<outputs.AzureMetricsIntegrationScrapeConfig | undefined>;
    public readonly slug!: pulumi.Output<string>;
    public readonly usageMetricsEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AzureMetricsIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureMetricsIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureMetricsIntegrationArgs | AzureMetricsIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureMetricsIntegrationState | undefined;
            resourceInputs["countMetricsEnabled"] = state ? state.countMetricsEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["principal"] = state ? state.principal : undefined;
            resourceInputs["propagateTags"] = state ? state.propagateTags : undefined;
            resourceInputs["scrapeConfig"] = state ? state.scrapeConfig : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["usageMetricsEnabled"] = state ? state.usageMetricsEnabled : undefined;
        } else {
            const args = argsOrState as AzureMetricsIntegrationArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["countMetricsEnabled"] = args ? args.countMetricsEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["propagateTags"] = args ? args.propagateTags : undefined;
            resourceInputs["scrapeConfig"] = args ? args.scrapeConfig : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["usageMetricsEnabled"] = args ? args.usageMetricsEnabled : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureMetricsIntegration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AzureMetricsIntegration resources.
 */
export interface AzureMetricsIntegrationState {
    countMetricsEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    principal?: pulumi.Input<inputs.AzureMetricsIntegrationPrincipal>;
    propagateTags?: pulumi.Input<boolean>;
    scrapeConfig?: pulumi.Input<inputs.AzureMetricsIntegrationScrapeConfig>;
    slug?: pulumi.Input<string>;
    usageMetricsEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AzureMetricsIntegration resource.
 */
export interface AzureMetricsIntegrationArgs {
    countMetricsEnabled?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    principal?: pulumi.Input<inputs.AzureMetricsIntegrationPrincipal>;
    propagateTags?: pulumi.Input<boolean>;
    scrapeConfig?: pulumi.Input<inputs.AzureMetricsIntegrationScrapeConfig>;
    slug?: pulumi.Input<string>;
    usageMetricsEnabled?: pulumi.Input<boolean>;
}
