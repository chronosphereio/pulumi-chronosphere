// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MappingRule extends pulumi.CustomResource {
    /**
     * Get an existing MappingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MappingRuleState, opts?: pulumi.CustomResourceOptions): MappingRule {
        return new MappingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'chronosphere:index/mappingRule:MappingRule';

    /**
     * Returns true if the given object is an instance of MappingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MappingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MappingRule.__pulumiType;
    }

    public readonly aggregations!: pulumi.Output<string | undefined>;
    public readonly bucketId!: pulumi.Output<string | undefined>;
    public readonly drop!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated drop timestamp is no longer supported
     */
    public readonly dropTimestamp!: pulumi.Output<boolean | undefined>;
    public readonly filter!: pulumi.Output<string>;
    public readonly interval!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly slug!: pulumi.Output<string>;
    /**
     * @deprecated use `interval` instead
     */
    public readonly storagePolicy!: pulumi.Output<outputs.MappingRuleStoragePolicy | undefined>;

    /**
     * Create a MappingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MappingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MappingRuleArgs | MappingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MappingRuleState | undefined;
            resourceInputs["aggregations"] = state ? state.aggregations : undefined;
            resourceInputs["bucketId"] = state ? state.bucketId : undefined;
            resourceInputs["drop"] = state ? state.drop : undefined;
            resourceInputs["dropTimestamp"] = state ? state.dropTimestamp : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["storagePolicy"] = state ? state.storagePolicy : undefined;
        } else {
            const args = argsOrState as MappingRuleArgs | undefined;
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["aggregations"] = args ? args.aggregations : undefined;
            resourceInputs["bucketId"] = args ? args.bucketId : undefined;
            resourceInputs["drop"] = args ? args.drop : undefined;
            resourceInputs["dropTimestamp"] = args ? args.dropTimestamp : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["storagePolicy"] = args ? args.storagePolicy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MappingRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MappingRule resources.
 */
export interface MappingRuleState {
    aggregations?: pulumi.Input<string>;
    bucketId?: pulumi.Input<string>;
    drop?: pulumi.Input<boolean>;
    /**
     * @deprecated drop timestamp is no longer supported
     */
    dropTimestamp?: pulumi.Input<boolean>;
    filter?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    /**
     * @deprecated use `interval` instead
     */
    storagePolicy?: pulumi.Input<inputs.MappingRuleStoragePolicy>;
}

/**
 * The set of arguments for constructing a MappingRule resource.
 */
export interface MappingRuleArgs {
    aggregations?: pulumi.Input<string>;
    bucketId?: pulumi.Input<string>;
    drop?: pulumi.Input<boolean>;
    /**
     * @deprecated drop timestamp is no longer supported
     */
    dropTimestamp?: pulumi.Input<boolean>;
    filter: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    /**
     * @deprecated use `interval` instead
     */
    storagePolicy?: pulumi.Input<inputs.MappingRuleStoragePolicy>;
}
