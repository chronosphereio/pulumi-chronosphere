// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NotificationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing NotificationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationPolicyState, opts?: pulumi.CustomResourceOptions): NotificationPolicy {
        return new NotificationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'chronosphere:index/notificationPolicy:NotificationPolicy';

    /**
     * Returns true if the given object is an instance of NotificationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationPolicy.__pulumiType;
    }

    public /*out*/ readonly isIndependent!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string | undefined>;
    public readonly notificationPolicyData!: pulumi.Output<string>;
    public readonly overrides!: pulumi.Output<outputs.NotificationPolicyOverride[] | undefined>;
    public readonly routes!: pulumi.Output<outputs.NotificationPolicyRoute[] | undefined>;
    public readonly slug!: pulumi.Output<string>;
    public readonly teamId!: pulumi.Output<string | undefined>;

    /**
     * Create a NotificationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NotificationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationPolicyArgs | NotificationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationPolicyState | undefined;
            resourceInputs["isIndependent"] = state ? state.isIndependent : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationPolicyData"] = state ? state.notificationPolicyData : undefined;
            resourceInputs["overrides"] = state ? state.overrides : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as NotificationPolicyArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationPolicyData"] = args ? args.notificationPolicyData : undefined;
            resourceInputs["overrides"] = args ? args.overrides : undefined;
            resourceInputs["routes"] = args ? args.routes : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["isIndependent"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NotificationPolicy resources.
 */
export interface NotificationPolicyState {
    isIndependent?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    notificationPolicyData?: pulumi.Input<string>;
    overrides?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyOverride>[]>;
    routes?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyRoute>[]>;
    slug?: pulumi.Input<string>;
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NotificationPolicy resource.
 */
export interface NotificationPolicyArgs {
    name?: pulumi.Input<string>;
    notificationPolicyData?: pulumi.Input<string>;
    overrides?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyOverride>[]>;
    routes?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyRoute>[]>;
    slug?: pulumi.Input<string>;
    teamId?: pulumi.Input<string>;
}
