// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RecordingRule extends pulumi.CustomResource {
    /**
     * Get an existing RecordingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecordingRuleState, opts?: pulumi.CustomResourceOptions): RecordingRule {
        return new RecordingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'chronosphere:index/recordingRule:RecordingRule';

    /**
     * Returns true if the given object is an instance of RecordingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RecordingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecordingRule.__pulumiType;
    }

    public readonly bucketId!: pulumi.Output<string | undefined>;
    public readonly executionGroup!: pulumi.Output<string | undefined>;
    public readonly expr!: pulumi.Output<string>;
    public readonly interval!: pulumi.Output<string | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly metricName!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly slug!: pulumi.Output<string>;

    /**
     * Create a RecordingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecordingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecordingRuleArgs | RecordingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecordingRuleState | undefined;
            resourceInputs["bucketId"] = state ? state.bucketId : undefined;
            resourceInputs["executionGroup"] = state ? state.executionGroup : undefined;
            resourceInputs["expr"] = state ? state.expr : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["metricName"] = state ? state.metricName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
        } else {
            const args = argsOrState as RecordingRuleArgs | undefined;
            if ((!args || args.expr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expr'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["bucketId"] = args ? args.bucketId : undefined;
            resourceInputs["executionGroup"] = args ? args.executionGroup : undefined;
            resourceInputs["expr"] = args ? args.expr : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["metricName"] = args ? args.metricName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RecordingRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RecordingRule resources.
 */
export interface RecordingRuleState {
    bucketId?: pulumi.Input<string>;
    executionGroup?: pulumi.Input<string>;
    expr?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metricName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RecordingRule resource.
 */
export interface RecordingRuleArgs {
    bucketId?: pulumi.Input<string>;
    executionGroup?: pulumi.Input<string>;
    expr: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metricName?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
}
