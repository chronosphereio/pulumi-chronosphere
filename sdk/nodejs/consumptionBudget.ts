// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConsumptionBudget extends pulumi.CustomResource {
    /**
     * Get an existing ConsumptionBudget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConsumptionBudgetState, opts?: pulumi.CustomResourceOptions): ConsumptionBudget {
        return new ConsumptionBudget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'chronosphere:index/consumptionBudget:ConsumptionBudget';

    /**
     * Returns true if the given object is an instance of ConsumptionBudget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConsumptionBudget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConsumptionBudget.__pulumiType;
    }

    public readonly alertActionConfig!: pulumi.Output<outputs.ConsumptionBudgetAlertActionConfig | undefined>;
    public readonly consumptionConfigId!: pulumi.Output<string>;
    public readonly defaultPriority!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationPolicyId!: pulumi.Output<string | undefined>;
    public readonly partitionSlugPath!: pulumi.Output<string | undefined>;
    public readonly priorities!: pulumi.Output<outputs.ConsumptionBudgetPriority[] | undefined>;
    public readonly resource!: pulumi.Output<string | undefined>;
    public readonly slug!: pulumi.Output<string>;
    public readonly thresholds!: pulumi.Output<outputs.ConsumptionBudgetThreshold[] | undefined>;

    /**
     * Create a ConsumptionBudget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConsumptionBudgetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConsumptionBudgetArgs | ConsumptionBudgetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConsumptionBudgetState | undefined;
            resourceInputs["alertActionConfig"] = state ? state.alertActionConfig : undefined;
            resourceInputs["consumptionConfigId"] = state ? state.consumptionConfigId : undefined;
            resourceInputs["defaultPriority"] = state ? state.defaultPriority : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationPolicyId"] = state ? state.notificationPolicyId : undefined;
            resourceInputs["partitionSlugPath"] = state ? state.partitionSlugPath : undefined;
            resourceInputs["priorities"] = state ? state.priorities : undefined;
            resourceInputs["resource"] = state ? state.resource : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["thresholds"] = state ? state.thresholds : undefined;
        } else {
            const args = argsOrState as ConsumptionBudgetArgs | undefined;
            if ((!args || args.consumptionConfigId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumptionConfigId'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["alertActionConfig"] = args ? args.alertActionConfig : undefined;
            resourceInputs["consumptionConfigId"] = args ? args.consumptionConfigId : undefined;
            resourceInputs["defaultPriority"] = args ? args.defaultPriority : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationPolicyId"] = args ? args.notificationPolicyId : undefined;
            resourceInputs["partitionSlugPath"] = args ? args.partitionSlugPath : undefined;
            resourceInputs["priorities"] = args ? args.priorities : undefined;
            resourceInputs["resource"] = args ? args.resource : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["thresholds"] = args ? args.thresholds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConsumptionBudget.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConsumptionBudget resources.
 */
export interface ConsumptionBudgetState {
    alertActionConfig?: pulumi.Input<inputs.ConsumptionBudgetAlertActionConfig>;
    consumptionConfigId?: pulumi.Input<string>;
    defaultPriority?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    notificationPolicyId?: pulumi.Input<string>;
    partitionSlugPath?: pulumi.Input<string>;
    priorities?: pulumi.Input<pulumi.Input<inputs.ConsumptionBudgetPriority>[]>;
    resource?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    thresholds?: pulumi.Input<pulumi.Input<inputs.ConsumptionBudgetThreshold>[]>;
}

/**
 * The set of arguments for constructing a ConsumptionBudget resource.
 */
export interface ConsumptionBudgetArgs {
    alertActionConfig?: pulumi.Input<inputs.ConsumptionBudgetAlertActionConfig>;
    consumptionConfigId: pulumi.Input<string>;
    defaultPriority?: pulumi.Input<number>;
    name: pulumi.Input<string>;
    notificationPolicyId?: pulumi.Input<string>;
    partitionSlugPath?: pulumi.Input<string>;
    priorities?: pulumi.Input<pulumi.Input<inputs.ConsumptionBudgetPriority>[]>;
    resource?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    thresholds?: pulumi.Input<pulumi.Input<inputs.ConsumptionBudgetThreshold>[]>;
}
