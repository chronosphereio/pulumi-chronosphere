// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DropRule extends pulumi.CustomResource {
    /**
     * Get an existing DropRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DropRuleState, opts?: pulumi.CustomResourceOptions): DropRule {
        return new DropRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'chronosphere:index/dropRule:DropRule';

    /**
     * Returns true if the given object is an instance of DropRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DropRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DropRule.__pulumiType;
    }

    public readonly activatedDropDuration!: pulumi.Output<string | undefined>;
    /**
     * @deprecated use `mode` instead
     */
    public readonly active!: pulumi.Output<boolean | undefined>;
    public readonly conditionalDrop!: pulumi.Output<boolean | undefined>;
    public readonly dropNanValue!: pulumi.Output<boolean | undefined>;
    public readonly mode!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly queries!: pulumi.Output<string[]>;
    public readonly rateLimitThreshold!: pulumi.Output<number | undefined>;
    public readonly slug!: pulumi.Output<string>;
    public readonly valueBasedDrop!: pulumi.Output<outputs.DropRuleValueBasedDrop | undefined>;

    /**
     * Create a DropRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DropRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DropRuleArgs | DropRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DropRuleState | undefined;
            resourceInputs["activatedDropDuration"] = state ? state.activatedDropDuration : undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["conditionalDrop"] = state ? state.conditionalDrop : undefined;
            resourceInputs["dropNanValue"] = state ? state.dropNanValue : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["queries"] = state ? state.queries : undefined;
            resourceInputs["rateLimitThreshold"] = state ? state.rateLimitThreshold : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["valueBasedDrop"] = state ? state.valueBasedDrop : undefined;
        } else {
            const args = argsOrState as DropRuleArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.queries === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queries'");
            }
            resourceInputs["activatedDropDuration"] = args ? args.activatedDropDuration : undefined;
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["conditionalDrop"] = args ? args.conditionalDrop : undefined;
            resourceInputs["dropNanValue"] = args ? args.dropNanValue : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queries"] = args ? args.queries : undefined;
            resourceInputs["rateLimitThreshold"] = args ? args.rateLimitThreshold : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["valueBasedDrop"] = args ? args.valueBasedDrop : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DropRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DropRule resources.
 */
export interface DropRuleState {
    activatedDropDuration?: pulumi.Input<string>;
    /**
     * @deprecated use `mode` instead
     */
    active?: pulumi.Input<boolean>;
    conditionalDrop?: pulumi.Input<boolean>;
    dropNanValue?: pulumi.Input<boolean>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    queries?: pulumi.Input<pulumi.Input<string>[]>;
    rateLimitThreshold?: pulumi.Input<number>;
    slug?: pulumi.Input<string>;
    valueBasedDrop?: pulumi.Input<inputs.DropRuleValueBasedDrop>;
}

/**
 * The set of arguments for constructing a DropRule resource.
 */
export interface DropRuleArgs {
    activatedDropDuration?: pulumi.Input<string>;
    /**
     * @deprecated use `mode` instead
     */
    active?: pulumi.Input<boolean>;
    conditionalDrop?: pulumi.Input<boolean>;
    dropNanValue?: pulumi.Input<boolean>;
    mode?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    queries: pulumi.Input<pulumi.Input<string>[]>;
    rateLimitThreshold?: pulumi.Input<number>;
    slug?: pulumi.Input<string>;
    valueBasedDrop?: pulumi.Input<inputs.DropRuleValueBasedDrop>;
}
