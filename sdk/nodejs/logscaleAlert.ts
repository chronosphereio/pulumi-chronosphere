// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LogscaleAlert extends pulumi.CustomResource {
    /**
     * Get an existing LogscaleAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogscaleAlertState, opts?: pulumi.CustomResourceOptions): LogscaleAlert {
        return new LogscaleAlert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'chronosphere:index/logscaleAlert:LogscaleAlert';

    /**
     * Returns true if the given object is an instance of LogscaleAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogscaleAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogscaleAlert.__pulumiType;
    }

    public readonly actionIds!: pulumi.Output<string[] | undefined>;
    public readonly alertType!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly query!: pulumi.Output<string | undefined>;
    public readonly repository!: pulumi.Output<string>;
    /**
     * Email of the user that the alert runs on behalf of
     */
    public readonly runAsUser!: pulumi.Output<string>;
    public readonly slug!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Required for STANDARD type alerts, optional for FILTER type alerts
     */
    public readonly throttleDuration!: pulumi.Output<string | undefined>;
    public readonly throttleField!: pulumi.Output<string | undefined>;
    /**
     * Required for STANDARD type alerts, ignored for FILTER type alerts
     */
    public readonly timeWindow!: pulumi.Output<string | undefined>;

    /**
     * Create a LogscaleAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogscaleAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogscaleAlertArgs | LogscaleAlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogscaleAlertState | undefined;
            resourceInputs["actionIds"] = state ? state.actionIds : undefined;
            resourceInputs["alertType"] = state ? state.alertType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["runAsUser"] = state ? state.runAsUser : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["throttleDuration"] = state ? state.throttleDuration : undefined;
            resourceInputs["throttleField"] = state ? state.throttleField : undefined;
            resourceInputs["timeWindow"] = state ? state.timeWindow : undefined;
        } else {
            const args = argsOrState as LogscaleAlertArgs | undefined;
            if ((!args || args.alertType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alertType'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if ((!args || args.runAsUser === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runAsUser'");
            }
            resourceInputs["actionIds"] = args ? args.actionIds : undefined;
            resourceInputs["alertType"] = args ? args.alertType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["runAsUser"] = args ? args.runAsUser : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["throttleDuration"] = args ? args.throttleDuration : undefined;
            resourceInputs["throttleField"] = args ? args.throttleField : undefined;
            resourceInputs["timeWindow"] = args ? args.timeWindow : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogscaleAlert.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogscaleAlert resources.
 */
export interface LogscaleAlertState {
    actionIds?: pulumi.Input<pulumi.Input<string>[]>;
    alertType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    repository?: pulumi.Input<string>;
    /**
     * Email of the user that the alert runs on behalf of
     */
    runAsUser?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required for STANDARD type alerts, optional for FILTER type alerts
     */
    throttleDuration?: pulumi.Input<string>;
    throttleField?: pulumi.Input<string>;
    /**
     * Required for STANDARD type alerts, ignored for FILTER type alerts
     */
    timeWindow?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogscaleAlert resource.
 */
export interface LogscaleAlertArgs {
    actionIds?: pulumi.Input<pulumi.Input<string>[]>;
    alertType: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    repository: pulumi.Input<string>;
    /**
     * Email of the user that the alert runs on behalf of
     */
    runAsUser: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required for STANDARD type alerts, optional for FILTER type alerts
     */
    throttleDuration?: pulumi.Input<string>;
    throttleField?: pulumi.Input<string>;
    /**
     * Required for STANDARD type alerts, ignored for FILTER type alerts
     */
    timeWindow?: pulumi.Input<string>;
}
