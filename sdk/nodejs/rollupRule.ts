// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RollupRule extends pulumi.CustomResource {
    /**
     * Get an existing RollupRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RollupRuleState, opts?: pulumi.CustomResourceOptions): RollupRule {
        return new RollupRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'chronosphere:index/rollupRule:RollupRule';

    /**
     * Returns true if the given object is an instance of RollupRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RollupRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RollupRule.__pulumiType;
    }

    public readonly aggregation!: pulumi.Output<string | undefined>;
    public readonly bucketId!: pulumi.Output<string | undefined>;
    public readonly dropRaw!: pulumi.Output<boolean | undefined>;
    public readonly excludeBies!: pulumi.Output<string[] | undefined>;
    public readonly filter!: pulumi.Output<string>;
    public readonly groupBies!: pulumi.Output<string[] | undefined>;
    public readonly interval!: pulumi.Output<string | undefined>;
    public readonly metricType!: pulumi.Output<string>;
    public readonly metricTypeTag!: pulumi.Output<boolean | undefined>;
    public readonly mode!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly newMetric!: pulumi.Output<string | undefined>;
    public readonly permissive!: pulumi.Output<boolean | undefined>;
    public readonly slug!: pulumi.Output<string>;
    public readonly storagePolicies!: pulumi.Output<outputs.RollupRuleStoragePolicies>;

    /**
     * Create a RollupRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RollupRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RollupRuleArgs | RollupRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RollupRuleState | undefined;
            resourceInputs["aggregation"] = state ? state.aggregation : undefined;
            resourceInputs["bucketId"] = state ? state.bucketId : undefined;
            resourceInputs["dropRaw"] = state ? state.dropRaw : undefined;
            resourceInputs["excludeBies"] = state ? state.excludeBies : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["groupBies"] = state ? state.groupBies : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["metricType"] = state ? state.metricType : undefined;
            resourceInputs["metricTypeTag"] = state ? state.metricTypeTag : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["newMetric"] = state ? state.newMetric : undefined;
            resourceInputs["permissive"] = state ? state.permissive : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["storagePolicies"] = state ? state.storagePolicies : undefined;
        } else {
            const args = argsOrState as RollupRuleArgs | undefined;
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if ((!args || args.metricType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricType'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.slug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            resourceInputs["aggregation"] = args ? args.aggregation : undefined;
            resourceInputs["bucketId"] = args ? args.bucketId : undefined;
            resourceInputs["dropRaw"] = args ? args.dropRaw : undefined;
            resourceInputs["excludeBies"] = args ? args.excludeBies : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["groupBies"] = args ? args.groupBies : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["metricType"] = args ? args.metricType : undefined;
            resourceInputs["metricTypeTag"] = args ? args.metricTypeTag : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["newMetric"] = args ? args.newMetric : undefined;
            resourceInputs["permissive"] = args ? args.permissive : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["storagePolicies"] = args ? args.storagePolicies : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RollupRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RollupRule resources.
 */
export interface RollupRuleState {
    aggregation?: pulumi.Input<string>;
    bucketId?: pulumi.Input<string>;
    dropRaw?: pulumi.Input<boolean>;
    excludeBies?: pulumi.Input<pulumi.Input<string>[]>;
    filter?: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    interval?: pulumi.Input<string>;
    metricType?: pulumi.Input<string>;
    metricTypeTag?: pulumi.Input<boolean>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    newMetric?: pulumi.Input<string>;
    permissive?: pulumi.Input<boolean>;
    slug?: pulumi.Input<string>;
    storagePolicies?: pulumi.Input<inputs.RollupRuleStoragePolicies>;
}

/**
 * The set of arguments for constructing a RollupRule resource.
 */
export interface RollupRuleArgs {
    aggregation?: pulumi.Input<string>;
    bucketId?: pulumi.Input<string>;
    dropRaw?: pulumi.Input<boolean>;
    excludeBies?: pulumi.Input<pulumi.Input<string>[]>;
    filter: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    interval?: pulumi.Input<string>;
    metricType: pulumi.Input<string>;
    metricTypeTag?: pulumi.Input<boolean>;
    mode?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    newMetric?: pulumi.Input<string>;
    permissive?: pulumi.Input<boolean>;
    slug: pulumi.Input<string>;
    storagePolicies?: pulumi.Input<inputs.RollupRuleStoragePolicies>;
}
