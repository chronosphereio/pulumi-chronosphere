// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DerivedLabelMetricLabel {
    constructedLabel?: pulumi.Input<inputs.DerivedLabelMetricLabelConstructedLabel>;
    mappingLabel?: pulumi.Input<inputs.DerivedLabelMetricLabelMappingLabel>;
}

export interface DerivedLabelMetricLabelConstructedLabel {
    valueDefinitions: pulumi.Input<pulumi.Input<inputs.DerivedLabelMetricLabelConstructedLabelValueDefinition>[]>;
}

export interface DerivedLabelMetricLabelConstructedLabelValueDefinition {
    filters: pulumi.Input<pulumi.Input<inputs.DerivedLabelMetricLabelConstructedLabelValueDefinitionFilter>[]>;
    value: pulumi.Input<string>;
}

export interface DerivedLabelMetricLabelConstructedLabelValueDefinitionFilter {
    name: pulumi.Input<string>;
    valueGlob: pulumi.Input<string>;
}

export interface DerivedLabelMetricLabelMappingLabel {
    nameMappings?: pulumi.Input<pulumi.Input<inputs.DerivedLabelMetricLabelMappingLabelNameMapping>[]>;
    valueMappings?: pulumi.Input<pulumi.Input<inputs.DerivedLabelMetricLabelMappingLabelValueMapping>[]>;
}

export interface DerivedLabelMetricLabelMappingLabelNameMapping {
    filters: pulumi.Input<pulumi.Input<inputs.DerivedLabelMetricLabelMappingLabelNameMappingFilter>[]>;
    sourceLabel: pulumi.Input<string>;
    valueMappings?: pulumi.Input<pulumi.Input<inputs.DerivedLabelMetricLabelMappingLabelNameMappingValueMapping>[]>;
}

export interface DerivedLabelMetricLabelMappingLabelNameMappingFilter {
    name: pulumi.Input<string>;
    valueGlob: pulumi.Input<string>;
}

export interface DerivedLabelMetricLabelMappingLabelNameMappingValueMapping {
    sourceValueGlobs: pulumi.Input<pulumi.Input<string>[]>;
    targetValue: pulumi.Input<string>;
}

export interface DerivedLabelMetricLabelMappingLabelValueMapping {
    sourceValueGlobs: pulumi.Input<pulumi.Input<string>[]>;
    targetValue: pulumi.Input<string>;
}

export interface DerivedMetricQuery {
    query: pulumi.Input<inputs.DerivedMetricQueryQuery>;
    selector?: pulumi.Input<inputs.DerivedMetricQuerySelector>;
}

export interface DerivedMetricQueryQuery {
    expr: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.DerivedMetricQueryQueryVariable>[]>;
}

export interface DerivedMetricQueryQueryVariable {
    defaultSelector: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface DerivedMetricQuerySelector {
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DropRuleValueBasedDrop {
    targetDropValue: pulumi.Input<number>;
}

export interface MappingRuleStoragePolicy {
    resolution: pulumi.Input<string>;
    retention: pulumi.Input<string>;
}

export interface MonitorQuery {
    graphiteExpr?: pulumi.Input<string>;
    prometheusExpr?: pulumi.Input<string>;
}

export interface MonitorSchedule {
    ranges?: pulumi.Input<pulumi.Input<inputs.MonitorScheduleRange>[]>;
    timezone: pulumi.Input<string>;
}

export interface MonitorScheduleRange {
    day: pulumi.Input<string>;
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface MonitorSeriesConditions {
    conditions: pulumi.Input<pulumi.Input<inputs.MonitorSeriesConditionsCondition>[]>;
    overrides?: pulumi.Input<pulumi.Input<inputs.MonitorSeriesConditionsOverride>[]>;
}

export interface MonitorSeriesConditionsCondition {
    op: pulumi.Input<string>;
    resolveSustain?: pulumi.Input<string>;
    severity: pulumi.Input<string>;
    sustain?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface MonitorSeriesConditionsOverride {
    conditions: pulumi.Input<pulumi.Input<inputs.MonitorSeriesConditionsOverrideCondition>[]>;
    labelMatchers: pulumi.Input<pulumi.Input<inputs.MonitorSeriesConditionsOverrideLabelMatcher>[]>;
}

export interface MonitorSeriesConditionsOverrideCondition {
    op: pulumi.Input<string>;
    resolveSustain?: pulumi.Input<string>;
    severity: pulumi.Input<string>;
    sustain?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface MonitorSeriesConditionsOverrideLabelMatcher {
    name: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface MonitorSignalGrouping {
    labelNames?: pulumi.Input<pulumi.Input<string>[]>;
    signalPerSeries?: pulumi.Input<boolean>;
}

export interface NotificationPolicyDataSourceOverride {
    alertLabelMatchers: inputs.NotificationPolicyDataSourceOverrideAlertLabelMatcher[];
    routes?: inputs.NotificationPolicyDataSourceOverrideRoute[];
}

export interface NotificationPolicyDataSourceOverrideArgs {
    alertLabelMatchers: pulumi.Input<pulumi.Input<inputs.NotificationPolicyDataSourceOverrideAlertLabelMatcherArgs>[]>;
    routes?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyDataSourceOverrideRouteArgs>[]>;
}

export interface NotificationPolicyDataSourceOverrideAlertLabelMatcher {
    name: string;
    type: string;
    value: string;
}

export interface NotificationPolicyDataSourceOverrideAlertLabelMatcherArgs {
    name: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NotificationPolicyDataSourceOverrideRoute {
    notifiers?: string[];
    repeatInterval?: string;
    severity: string;
}

export interface NotificationPolicyDataSourceOverrideRouteArgs {
    notifiers?: pulumi.Input<pulumi.Input<string>[]>;
    repeatInterval?: pulumi.Input<string>;
    severity: pulumi.Input<string>;
}

export interface NotificationPolicyDataSourceRoute {
    notifiers?: string[];
    repeatInterval?: string;
    severity: string;
}

export interface NotificationPolicyDataSourceRouteArgs {
    notifiers?: pulumi.Input<pulumi.Input<string>[]>;
    repeatInterval?: pulumi.Input<string>;
    severity: pulumi.Input<string>;
}

export interface NotificationPolicyDataSourceRule {
    notifiers?: string[];
    repeatInterval?: string;
    severity: string;
}

export interface NotificationPolicyDataSourceRuleArgs {
    notifiers?: pulumi.Input<pulumi.Input<string>[]>;
    repeatInterval?: pulumi.Input<string>;
    severity: pulumi.Input<string>;
}

export interface NotificationPolicyOverride {
    alertLabelMatchers: pulumi.Input<pulumi.Input<inputs.NotificationPolicyOverrideAlertLabelMatcher>[]>;
    routes?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyOverrideRoute>[]>;
}

export interface NotificationPolicyOverrideAlertLabelMatcher {
    name: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NotificationPolicyOverrideRoute {
    notifiers?: pulumi.Input<pulumi.Input<string>[]>;
    repeatInterval?: pulumi.Input<string>;
    severity: pulumi.Input<string>;
}

export interface NotificationPolicyRoute {
    notifiers?: pulumi.Input<pulumi.Input<string>[]>;
    repeatInterval?: pulumi.Input<string>;
    severity: pulumi.Input<string>;
}

export interface NotificationPolicyRule {
    notifiers?: pulumi.Input<pulumi.Input<string>[]>;
    repeatInterval?: pulumi.Input<string>;
    severity: pulumi.Input<string>;
}

export interface OpsgenieAlertNotifierResponder {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface PagerdutyAlertNotifierImage {
    alt?: pulumi.Input<string>;
    href?: pulumi.Input<string>;
    src: pulumi.Input<string>;
}

export interface PagerdutyAlertNotifierLink {
    href: pulumi.Input<string>;
    text?: pulumi.Input<string>;
}

export interface ResourcePoolsConfigDefaultPool {
    allocation: pulumi.Input<inputs.ResourcePoolsConfigDefaultPoolAllocation>;
    priorities?: pulumi.Input<inputs.ResourcePoolsConfigDefaultPoolPriorities>;
}

export interface ResourcePoolsConfigDefaultPoolAllocation {
    percentOfLicense: pulumi.Input<number>;
}

export interface ResourcePoolsConfigDefaultPoolPriorities {
    highPriorityMatchRules?: pulumi.Input<pulumi.Input<string>[]>;
    lowPriorityMatchRules?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ResourcePoolsConfigPool {
    allocation: pulumi.Input<inputs.ResourcePoolsConfigPoolAllocation>;
    /**
     * @deprecated use match_rules
     */
    matchRule?: pulumi.Input<string>;
    matchRules?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    priorities?: pulumi.Input<inputs.ResourcePoolsConfigPoolPriorities>;
}

export interface ResourcePoolsConfigPoolAllocation {
    percentOfLicense: pulumi.Input<number>;
}

export interface ResourcePoolsConfigPoolPriorities {
    highPriorityMatchRules?: pulumi.Input<pulumi.Input<string>[]>;
    lowPriorityMatchRules?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RollupRuleStoragePolicies {
    resolution: pulumi.Input<string>;
    retention: pulumi.Input<string>;
}

export interface ServiceAccountRestriction {
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    permission: pulumi.Input<string>;
}

export interface SlackAlertNotifierAction {
    actionConfirmDismissText?: pulumi.Input<string>;
    actionConfirmOkText?: pulumi.Input<string>;
    actionConfirmText?: pulumi.Input<string>;
    actionConfirmTile?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    style?: pulumi.Input<string>;
    text?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SlackAlertNotifierField {
    short?: pulumi.Input<boolean>;
    title?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface TraceJaegerRemoteSamplingStrategyAppliedStrategy {
    perOperationStrategies?: pulumi.Input<inputs.TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategies>;
    probabilisticStrategy?: pulumi.Input<inputs.TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategy>;
    rateLimitingStrategy?: pulumi.Input<inputs.TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategy>;
}

export interface TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategies {
    defaultLowerBoundTracesPerSecond?: pulumi.Input<number>;
    defaultSamplingRate: pulumi.Input<number>;
    defaultUpperBoundTracesPerSecond?: pulumi.Input<number>;
    perOperationStrategies?: pulumi.Input<pulumi.Input<inputs.TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategy>[]>;
}

export interface TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategy {
    operation: pulumi.Input<string>;
    probabilisticStrategy: pulumi.Input<inputs.TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyProbabilisticStrategy>;
}

export interface TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyProbabilisticStrategy {
    samplingRate: pulumi.Input<number>;
}

export interface TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategy {
    samplingRate: pulumi.Input<number>;
}

export interface TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategy {
    maxTracesPerSecond: pulumi.Input<number>;
}

export interface TraceMetricsRuleGroupBy {
    key: pulumi.Input<inputs.TraceMetricsRuleGroupByKey>;
    label: pulumi.Input<string>;
}

export interface TraceMetricsRuleGroupByKey {
    namedKey?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface TraceMetricsRuleTraceFilter {
    spans?: pulumi.Input<pulumi.Input<inputs.TraceMetricsRuleTraceFilterSpan>[]>;
    trace?: pulumi.Input<inputs.TraceMetricsRuleTraceFilterTrace>;
}

export interface TraceMetricsRuleTraceFilterSpan {
    duration?: pulumi.Input<inputs.TraceMetricsRuleTraceFilterSpanDuration>;
    error?: pulumi.Input<inputs.TraceMetricsRuleTraceFilterSpanError>;
    matchType?: pulumi.Input<string>;
    operation?: pulumi.Input<inputs.TraceMetricsRuleTraceFilterSpanOperation>;
    parentOperation?: pulumi.Input<inputs.TraceMetricsRuleTraceFilterSpanParentOperation>;
    parentService?: pulumi.Input<inputs.TraceMetricsRuleTraceFilterSpanParentService>;
    service?: pulumi.Input<inputs.TraceMetricsRuleTraceFilterSpanService>;
    spanCount?: pulumi.Input<inputs.TraceMetricsRuleTraceFilterSpanSpanCount>;
    tags?: pulumi.Input<pulumi.Input<inputs.TraceMetricsRuleTraceFilterSpanTag>[]>;
}

export interface TraceMetricsRuleTraceFilterSpanDuration {
    maxSeconds?: pulumi.Input<number>;
    minSeconds?: pulumi.Input<number>;
}

export interface TraceMetricsRuleTraceFilterSpanError {
    value: pulumi.Input<boolean>;
}

export interface TraceMetricsRuleTraceFilterSpanOperation {
    match?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface TraceMetricsRuleTraceFilterSpanParentOperation {
    match?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface TraceMetricsRuleTraceFilterSpanParentService {
    match?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface TraceMetricsRuleTraceFilterSpanService {
    match?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface TraceMetricsRuleTraceFilterSpanSpanCount {
    max?: pulumi.Input<number>;
    min?: pulumi.Input<number>;
}

export interface TraceMetricsRuleTraceFilterSpanTag {
    key: pulumi.Input<string>;
    numericValue?: pulumi.Input<inputs.TraceMetricsRuleTraceFilterSpanTagNumericValue>;
    value?: pulumi.Input<inputs.TraceMetricsRuleTraceFilterSpanTagValue>;
}

export interface TraceMetricsRuleTraceFilterSpanTagNumericValue {
    comparison: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface TraceMetricsRuleTraceFilterSpanTagValue {
    match?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface TraceMetricsRuleTraceFilterTrace {
    duration?: pulumi.Input<inputs.TraceMetricsRuleTraceFilterTraceDuration>;
    error?: pulumi.Input<inputs.TraceMetricsRuleTraceFilterTraceError>;
}

export interface TraceMetricsRuleTraceFilterTraceDuration {
    maxSeconds?: pulumi.Input<number>;
    minSeconds?: pulumi.Input<number>;
}

export interface TraceMetricsRuleTraceFilterTraceError {
    value: pulumi.Input<boolean>;
}

export interface TraceTailSamplingRulesDefaultSampleRate {
    enabled?: pulumi.Input<boolean>;
    sampleRate: pulumi.Input<number>;
}

export interface TraceTailSamplingRulesRule {
    filter: pulumi.Input<inputs.TraceTailSamplingRulesRuleFilter>;
    name?: pulumi.Input<string>;
    sampleRate: pulumi.Input<number>;
    systemName?: pulumi.Input<string>;
}

export interface TraceTailSamplingRulesRuleFilter {
    spans?: pulumi.Input<pulumi.Input<inputs.TraceTailSamplingRulesRuleFilterSpan>[]>;
    trace?: pulumi.Input<inputs.TraceTailSamplingRulesRuleFilterTrace>;
}

export interface TraceTailSamplingRulesRuleFilterSpan {
    duration?: pulumi.Input<inputs.TraceTailSamplingRulesRuleFilterSpanDuration>;
    error?: pulumi.Input<inputs.TraceTailSamplingRulesRuleFilterSpanError>;
    matchType?: pulumi.Input<string>;
    operation?: pulumi.Input<inputs.TraceTailSamplingRulesRuleFilterSpanOperation>;
    parentOperation?: pulumi.Input<inputs.TraceTailSamplingRulesRuleFilterSpanParentOperation>;
    parentService?: pulumi.Input<inputs.TraceTailSamplingRulesRuleFilterSpanParentService>;
    service?: pulumi.Input<inputs.TraceTailSamplingRulesRuleFilterSpanService>;
    spanCount?: pulumi.Input<inputs.TraceTailSamplingRulesRuleFilterSpanSpanCount>;
    tags?: pulumi.Input<pulumi.Input<inputs.TraceTailSamplingRulesRuleFilterSpanTag>[]>;
}

export interface TraceTailSamplingRulesRuleFilterSpanDuration {
    maxSecs?: pulumi.Input<number>;
    minSecs?: pulumi.Input<number>;
}

export interface TraceTailSamplingRulesRuleFilterSpanError {
    value: pulumi.Input<boolean>;
}

export interface TraceTailSamplingRulesRuleFilterSpanOperation {
    match?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface TraceTailSamplingRulesRuleFilterSpanParentOperation {
    match?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface TraceTailSamplingRulesRuleFilterSpanParentService {
    match?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface TraceTailSamplingRulesRuleFilterSpanService {
    match?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface TraceTailSamplingRulesRuleFilterSpanSpanCount {
    max?: pulumi.Input<number>;
    min?: pulumi.Input<number>;
}

export interface TraceTailSamplingRulesRuleFilterSpanTag {
    key?: pulumi.Input<string>;
    numericValue?: pulumi.Input<inputs.TraceTailSamplingRulesRuleFilterSpanTagNumericValue>;
    value?: pulumi.Input<inputs.TraceTailSamplingRulesRuleFilterSpanTagValue>;
}

export interface TraceTailSamplingRulesRuleFilterSpanTagNumericValue {
    comparison: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface TraceTailSamplingRulesRuleFilterSpanTagValue {
    match?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface TraceTailSamplingRulesRuleFilterTrace {
    duration?: pulumi.Input<inputs.TraceTailSamplingRulesRuleFilterTraceDuration>;
    error?: pulumi.Input<inputs.TraceTailSamplingRulesRuleFilterTraceError>;
}

export interface TraceTailSamplingRulesRuleFilterTraceDuration {
    maxSecs?: pulumi.Input<number>;
    minSecs?: pulumi.Input<number>;
}

export interface TraceTailSamplingRulesRuleFilterTraceError {
    value: pulumi.Input<boolean>;
}
