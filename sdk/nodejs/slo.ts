// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SLO extends pulumi.CustomResource {
    /**
     * Get an existing SLO resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SLOState, opts?: pulumi.CustomResourceOptions): SLO {
        return new SLO(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'chronosphere:index/sLO:SLO';

    /**
     * Returns true if the given object is an instance of SLO.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SLO {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SLO.__pulumiType;
    }

    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly collectionId!: pulumi.Output<string>;
    public readonly definition!: pulumi.Output<outputs.SLODefinition>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationPolicyId!: pulumi.Output<string | undefined>;
    public readonly signalGrouping!: pulumi.Output<string | undefined>;
    public readonly sli!: pulumi.Output<outputs.SLOSli>;
    public readonly slug!: pulumi.Output<string>;

    /**
     * Create a SLO resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SLOArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SLOArgs | SLOState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SLOState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["collectionId"] = state ? state.collectionId : undefined;
            resourceInputs["definition"] = state ? state.definition : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationPolicyId"] = state ? state.notificationPolicyId : undefined;
            resourceInputs["signalGrouping"] = state ? state.signalGrouping : undefined;
            resourceInputs["sli"] = state ? state.sli : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
        } else {
            const args = argsOrState as SLOArgs | undefined;
            if ((!args || args.collectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collectionId'");
            }
            if ((!args || args.definition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'definition'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.sli === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sli'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["collectionId"] = args ? args.collectionId : undefined;
            resourceInputs["definition"] = args ? args.definition : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationPolicyId"] = args ? args.notificationPolicyId : undefined;
            resourceInputs["signalGrouping"] = args ? args.signalGrouping : undefined;
            resourceInputs["sli"] = args ? args.sli : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SLO.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SLO resources.
 */
export interface SLOState {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    collectionId?: pulumi.Input<string>;
    definition?: pulumi.Input<inputs.SLODefinition>;
    description?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    notificationPolicyId?: pulumi.Input<string>;
    signalGrouping?: pulumi.Input<string>;
    sli?: pulumi.Input<inputs.SLOSli>;
    slug?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SLO resource.
 */
export interface SLOArgs {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    collectionId: pulumi.Input<string>;
    definition: pulumi.Input<inputs.SLODefinition>;
    description?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name: pulumi.Input<string>;
    notificationPolicyId?: pulumi.Input<string>;
    signalGrouping?: pulumi.Input<string>;
    sli: pulumi.Input<inputs.SLOSli>;
    slug?: pulumi.Input<string>;
}
