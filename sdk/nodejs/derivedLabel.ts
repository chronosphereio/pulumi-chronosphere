// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DerivedLabel extends pulumi.CustomResource {
    /**
     * Get an existing DerivedLabel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DerivedLabelState, opts?: pulumi.CustomResourceOptions): DerivedLabel {
        return new DerivedLabel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'chronosphere:index/derivedLabel:DerivedLabel';

    /**
     * Returns true if the given object is an instance of DerivedLabel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DerivedLabel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DerivedLabel.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly existingLabelPolicy!: pulumi.Output<string | undefined>;
    public readonly labelName!: pulumi.Output<string>;
    public readonly metricLabel!: pulumi.Output<outputs.DerivedLabelMetricLabel | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly slug!: pulumi.Output<string>;
    public readonly spanTag!: pulumi.Output<outputs.DerivedLabelSpanTag | undefined>;

    /**
     * Create a DerivedLabel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DerivedLabelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DerivedLabelArgs | DerivedLabelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DerivedLabelState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["existingLabelPolicy"] = state ? state.existingLabelPolicy : undefined;
            resourceInputs["labelName"] = state ? state.labelName : undefined;
            resourceInputs["metricLabel"] = state ? state.metricLabel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["spanTag"] = state ? state.spanTag : undefined;
        } else {
            const args = argsOrState as DerivedLabelArgs | undefined;
            if ((!args || args.labelName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'labelName'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["existingLabelPolicy"] = args ? args.existingLabelPolicy : undefined;
            resourceInputs["labelName"] = args ? args.labelName : undefined;
            resourceInputs["metricLabel"] = args ? args.metricLabel : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["spanTag"] = args ? args.spanTag : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DerivedLabel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DerivedLabel resources.
 */
export interface DerivedLabelState {
    description?: pulumi.Input<string>;
    existingLabelPolicy?: pulumi.Input<string>;
    labelName?: pulumi.Input<string>;
    metricLabel?: pulumi.Input<inputs.DerivedLabelMetricLabel>;
    name?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    spanTag?: pulumi.Input<inputs.DerivedLabelSpanTag>;
}

/**
 * The set of arguments for constructing a DerivedLabel resource.
 */
export interface DerivedLabelArgs {
    description?: pulumi.Input<string>;
    existingLabelPolicy?: pulumi.Input<string>;
    labelName: pulumi.Input<string>;
    metricLabel?: pulumi.Input<inputs.DerivedLabelMetricLabel>;
    name: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    spanTag?: pulumi.Input<inputs.DerivedLabelSpanTag>;
}
