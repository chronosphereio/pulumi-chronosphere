// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function notificationPolicyDataSource(args?: NotificationPolicyDataSourceArgs, opts?: pulumi.InvokeOptions): Promise<NotificationPolicyDataSourceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("chronosphere:index/notificationPolicyDataSource:NotificationPolicyDataSource", {
        "name": args.name,
        "notificationPolicyData": args.notificationPolicyData,
        "overrides": args.overrides,
        "routes": args.routes,
        "rules": args.rules,
        "slug": args.slug,
        "teamId": args.teamId,
    }, opts);
}

/**
 * A collection of arguments for invoking NotificationPolicyDataSource.
 */
export interface NotificationPolicyDataSourceArgs {
    name?: string;
    notificationPolicyData?: string;
    overrides?: inputs.NotificationPolicyDataSourceOverride[];
    routes?: inputs.NotificationPolicyDataSourceRoute[];
    /**
     * @deprecated `rule` is deprecated, use `route` instead.
     */
    rules?: inputs.NotificationPolicyDataSourceRule[];
    slug?: string;
    teamId?: string;
}

/**
 * A collection of values returned by NotificationPolicyDataSource.
 */
export interface NotificationPolicyDataSourceResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly isIndependent: boolean;
    readonly name?: string;
    readonly notificationPolicyData: string;
    readonly overrides?: outputs.NotificationPolicyDataSourceOverride[];
    readonly routes?: outputs.NotificationPolicyDataSourceRoute[];
    /**
     * @deprecated `rule` is deprecated, use `route` instead.
     */
    readonly rules?: outputs.NotificationPolicyDataSourceRule[];
    readonly slug: string;
    readonly teamId?: string;
}
export function notificationPolicyDataSourceOutput(args?: NotificationPolicyDataSourceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<NotificationPolicyDataSourceResult> {
    return pulumi.output(args).apply((a: any) => notificationPolicyDataSource(a, opts))
}

/**
 * A collection of arguments for invoking NotificationPolicyDataSource.
 */
export interface NotificationPolicyDataSourceOutputArgs {
    name?: pulumi.Input<string>;
    notificationPolicyData?: pulumi.Input<string>;
    overrides?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyDataSourceOverrideArgs>[]>;
    routes?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyDataSourceRouteArgs>[]>;
    /**
     * @deprecated `rule` is deprecated, use `route` instead.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyDataSourceRuleArgs>[]>;
    slug?: pulumi.Input<string>;
    teamId?: pulumi.Input<string>;
}
