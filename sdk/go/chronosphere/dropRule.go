// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DropRule struct {
	pulumi.CustomResourceState

	ActivatedDropDuration pulumi.StringPtrOutput `pulumi:"activatedDropDuration"`
	// Deprecated: use `mode` instead
	Active             pulumi.BoolPtrOutput            `pulumi:"active"`
	ConditionalDrop    pulumi.BoolPtrOutput            `pulumi:"conditionalDrop"`
	DropNanValue       pulumi.BoolPtrOutput            `pulumi:"dropNanValue"`
	Mode               pulumi.StringPtrOutput          `pulumi:"mode"`
	Name               pulumi.StringOutput             `pulumi:"name"`
	Queries            pulumi.StringArrayOutput        `pulumi:"queries"`
	RateLimitThreshold pulumi.Float64PtrOutput         `pulumi:"rateLimitThreshold"`
	Slug               pulumi.StringOutput             `pulumi:"slug"`
	ValueBasedDrop     DropRuleValueBasedDropPtrOutput `pulumi:"valueBasedDrop"`
}

// NewDropRule registers a new resource with the given unique name, arguments, and options.
func NewDropRule(ctx *pulumi.Context,
	name string, args *DropRuleArgs, opts ...pulumi.ResourceOption) (*DropRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Queries == nil {
		return nil, errors.New("invalid value for required argument 'Queries'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DropRule
	err := ctx.RegisterResource("chronosphere:index/dropRule:DropRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDropRule gets an existing DropRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDropRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DropRuleState, opts ...pulumi.ResourceOption) (*DropRule, error) {
	var resource DropRule
	err := ctx.ReadResource("chronosphere:index/dropRule:DropRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DropRule resources.
type dropRuleState struct {
	ActivatedDropDuration *string `pulumi:"activatedDropDuration"`
	// Deprecated: use `mode` instead
	Active             *bool                   `pulumi:"active"`
	ConditionalDrop    *bool                   `pulumi:"conditionalDrop"`
	DropNanValue       *bool                   `pulumi:"dropNanValue"`
	Mode               *string                 `pulumi:"mode"`
	Name               *string                 `pulumi:"name"`
	Queries            []string                `pulumi:"queries"`
	RateLimitThreshold *float64                `pulumi:"rateLimitThreshold"`
	Slug               *string                 `pulumi:"slug"`
	ValueBasedDrop     *DropRuleValueBasedDrop `pulumi:"valueBasedDrop"`
}

type DropRuleState struct {
	ActivatedDropDuration pulumi.StringPtrInput
	// Deprecated: use `mode` instead
	Active             pulumi.BoolPtrInput
	ConditionalDrop    pulumi.BoolPtrInput
	DropNanValue       pulumi.BoolPtrInput
	Mode               pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	Queries            pulumi.StringArrayInput
	RateLimitThreshold pulumi.Float64PtrInput
	Slug               pulumi.StringPtrInput
	ValueBasedDrop     DropRuleValueBasedDropPtrInput
}

func (DropRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*dropRuleState)(nil)).Elem()
}

type dropRuleArgs struct {
	ActivatedDropDuration *string `pulumi:"activatedDropDuration"`
	// Deprecated: use `mode` instead
	Active             *bool                   `pulumi:"active"`
	ConditionalDrop    *bool                   `pulumi:"conditionalDrop"`
	DropNanValue       *bool                   `pulumi:"dropNanValue"`
	Mode               *string                 `pulumi:"mode"`
	Name               string                  `pulumi:"name"`
	Queries            []string                `pulumi:"queries"`
	RateLimitThreshold *float64                `pulumi:"rateLimitThreshold"`
	Slug               *string                 `pulumi:"slug"`
	ValueBasedDrop     *DropRuleValueBasedDrop `pulumi:"valueBasedDrop"`
}

// The set of arguments for constructing a DropRule resource.
type DropRuleArgs struct {
	ActivatedDropDuration pulumi.StringPtrInput
	// Deprecated: use `mode` instead
	Active             pulumi.BoolPtrInput
	ConditionalDrop    pulumi.BoolPtrInput
	DropNanValue       pulumi.BoolPtrInput
	Mode               pulumi.StringPtrInput
	Name               pulumi.StringInput
	Queries            pulumi.StringArrayInput
	RateLimitThreshold pulumi.Float64PtrInput
	Slug               pulumi.StringPtrInput
	ValueBasedDrop     DropRuleValueBasedDropPtrInput
}

func (DropRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dropRuleArgs)(nil)).Elem()
}

type DropRuleInput interface {
	pulumi.Input

	ToDropRuleOutput() DropRuleOutput
	ToDropRuleOutputWithContext(ctx context.Context) DropRuleOutput
}

func (*DropRule) ElementType() reflect.Type {
	return reflect.TypeOf((**DropRule)(nil)).Elem()
}

func (i *DropRule) ToDropRuleOutput() DropRuleOutput {
	return i.ToDropRuleOutputWithContext(context.Background())
}

func (i *DropRule) ToDropRuleOutputWithContext(ctx context.Context) DropRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropRuleOutput)
}

// DropRuleArrayInput is an input type that accepts DropRuleArray and DropRuleArrayOutput values.
// You can construct a concrete instance of `DropRuleArrayInput` via:
//
//	DropRuleArray{ DropRuleArgs{...} }
type DropRuleArrayInput interface {
	pulumi.Input

	ToDropRuleArrayOutput() DropRuleArrayOutput
	ToDropRuleArrayOutputWithContext(context.Context) DropRuleArrayOutput
}

type DropRuleArray []DropRuleInput

func (DropRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DropRule)(nil)).Elem()
}

func (i DropRuleArray) ToDropRuleArrayOutput() DropRuleArrayOutput {
	return i.ToDropRuleArrayOutputWithContext(context.Background())
}

func (i DropRuleArray) ToDropRuleArrayOutputWithContext(ctx context.Context) DropRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropRuleArrayOutput)
}

// DropRuleMapInput is an input type that accepts DropRuleMap and DropRuleMapOutput values.
// You can construct a concrete instance of `DropRuleMapInput` via:
//
//	DropRuleMap{ "key": DropRuleArgs{...} }
type DropRuleMapInput interface {
	pulumi.Input

	ToDropRuleMapOutput() DropRuleMapOutput
	ToDropRuleMapOutputWithContext(context.Context) DropRuleMapOutput
}

type DropRuleMap map[string]DropRuleInput

func (DropRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DropRule)(nil)).Elem()
}

func (i DropRuleMap) ToDropRuleMapOutput() DropRuleMapOutput {
	return i.ToDropRuleMapOutputWithContext(context.Background())
}

func (i DropRuleMap) ToDropRuleMapOutputWithContext(ctx context.Context) DropRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropRuleMapOutput)
}

type DropRuleOutput struct{ *pulumi.OutputState }

func (DropRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DropRule)(nil)).Elem()
}

func (o DropRuleOutput) ToDropRuleOutput() DropRuleOutput {
	return o
}

func (o DropRuleOutput) ToDropRuleOutputWithContext(ctx context.Context) DropRuleOutput {
	return o
}

func (o DropRuleOutput) ActivatedDropDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DropRule) pulumi.StringPtrOutput { return v.ActivatedDropDuration }).(pulumi.StringPtrOutput)
}

// Deprecated: use `mode` instead
func (o DropRuleOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DropRule) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

func (o DropRuleOutput) ConditionalDrop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DropRule) pulumi.BoolPtrOutput { return v.ConditionalDrop }).(pulumi.BoolPtrOutput)
}

func (o DropRuleOutput) DropNanValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DropRule) pulumi.BoolPtrOutput { return v.DropNanValue }).(pulumi.BoolPtrOutput)
}

func (o DropRuleOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DropRule) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o DropRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DropRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DropRuleOutput) Queries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DropRule) pulumi.StringArrayOutput { return v.Queries }).(pulumi.StringArrayOutput)
}

func (o DropRuleOutput) RateLimitThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DropRule) pulumi.Float64PtrOutput { return v.RateLimitThreshold }).(pulumi.Float64PtrOutput)
}

func (o DropRuleOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *DropRule) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o DropRuleOutput) ValueBasedDrop() DropRuleValueBasedDropPtrOutput {
	return o.ApplyT(func(v *DropRule) DropRuleValueBasedDropPtrOutput { return v.ValueBasedDrop }).(DropRuleValueBasedDropPtrOutput)
}

type DropRuleArrayOutput struct{ *pulumi.OutputState }

func (DropRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DropRule)(nil)).Elem()
}

func (o DropRuleArrayOutput) ToDropRuleArrayOutput() DropRuleArrayOutput {
	return o
}

func (o DropRuleArrayOutput) ToDropRuleArrayOutputWithContext(ctx context.Context) DropRuleArrayOutput {
	return o
}

func (o DropRuleArrayOutput) Index(i pulumi.IntInput) DropRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DropRule {
		return vs[0].([]*DropRule)[vs[1].(int)]
	}).(DropRuleOutput)
}

type DropRuleMapOutput struct{ *pulumi.OutputState }

func (DropRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DropRule)(nil)).Elem()
}

func (o DropRuleMapOutput) ToDropRuleMapOutput() DropRuleMapOutput {
	return o
}

func (o DropRuleMapOutput) ToDropRuleMapOutputWithContext(ctx context.Context) DropRuleMapOutput {
	return o
}

func (o DropRuleMapOutput) MapIndex(k pulumi.StringInput) DropRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DropRule {
		return vs[0].(map[string]*DropRule)[vs[1].(string)]
	}).(DropRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DropRuleInput)(nil)).Elem(), &DropRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*DropRuleArrayInput)(nil)).Elem(), DropRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DropRuleMapInput)(nil)).Elem(), DropRuleMap{})
	pulumi.RegisterOutputType(DropRuleOutput{})
	pulumi.RegisterOutputType(DropRuleArrayOutput{})
	pulumi.RegisterOutputType(DropRuleMapOutput{})
}
