// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LogControlConfig struct {
	pulumi.CustomResourceState

	Rules LogControlConfigRuleArrayOutput `pulumi:"rules"`
}

// NewLogControlConfig registers a new resource with the given unique name, arguments, and options.
func NewLogControlConfig(ctx *pulumi.Context,
	name string, args *LogControlConfigArgs, opts ...pulumi.ResourceOption) (*LogControlConfig, error) {
	if args == nil {
		args = &LogControlConfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogControlConfig
	err := ctx.RegisterResource("chronosphere:index/logControlConfig:LogControlConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogControlConfig gets an existing LogControlConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogControlConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogControlConfigState, opts ...pulumi.ResourceOption) (*LogControlConfig, error) {
	var resource LogControlConfig
	err := ctx.ReadResource("chronosphere:index/logControlConfig:LogControlConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogControlConfig resources.
type logControlConfigState struct {
	Rules []LogControlConfigRule `pulumi:"rules"`
}

type LogControlConfigState struct {
	Rules LogControlConfigRuleArrayInput
}

func (LogControlConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*logControlConfigState)(nil)).Elem()
}

type logControlConfigArgs struct {
	Rules []LogControlConfigRule `pulumi:"rules"`
}

// The set of arguments for constructing a LogControlConfig resource.
type LogControlConfigArgs struct {
	Rules LogControlConfigRuleArrayInput
}

func (LogControlConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logControlConfigArgs)(nil)).Elem()
}

type LogControlConfigInput interface {
	pulumi.Input

	ToLogControlConfigOutput() LogControlConfigOutput
	ToLogControlConfigOutputWithContext(ctx context.Context) LogControlConfigOutput
}

func (*LogControlConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**LogControlConfig)(nil)).Elem()
}

func (i *LogControlConfig) ToLogControlConfigOutput() LogControlConfigOutput {
	return i.ToLogControlConfigOutputWithContext(context.Background())
}

func (i *LogControlConfig) ToLogControlConfigOutputWithContext(ctx context.Context) LogControlConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogControlConfigOutput)
}

// LogControlConfigArrayInput is an input type that accepts LogControlConfigArray and LogControlConfigArrayOutput values.
// You can construct a concrete instance of `LogControlConfigArrayInput` via:
//
//	LogControlConfigArray{ LogControlConfigArgs{...} }
type LogControlConfigArrayInput interface {
	pulumi.Input

	ToLogControlConfigArrayOutput() LogControlConfigArrayOutput
	ToLogControlConfigArrayOutputWithContext(context.Context) LogControlConfigArrayOutput
}

type LogControlConfigArray []LogControlConfigInput

func (LogControlConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogControlConfig)(nil)).Elem()
}

func (i LogControlConfigArray) ToLogControlConfigArrayOutput() LogControlConfigArrayOutput {
	return i.ToLogControlConfigArrayOutputWithContext(context.Background())
}

func (i LogControlConfigArray) ToLogControlConfigArrayOutputWithContext(ctx context.Context) LogControlConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogControlConfigArrayOutput)
}

// LogControlConfigMapInput is an input type that accepts LogControlConfigMap and LogControlConfigMapOutput values.
// You can construct a concrete instance of `LogControlConfigMapInput` via:
//
//	LogControlConfigMap{ "key": LogControlConfigArgs{...} }
type LogControlConfigMapInput interface {
	pulumi.Input

	ToLogControlConfigMapOutput() LogControlConfigMapOutput
	ToLogControlConfigMapOutputWithContext(context.Context) LogControlConfigMapOutput
}

type LogControlConfigMap map[string]LogControlConfigInput

func (LogControlConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogControlConfig)(nil)).Elem()
}

func (i LogControlConfigMap) ToLogControlConfigMapOutput() LogControlConfigMapOutput {
	return i.ToLogControlConfigMapOutputWithContext(context.Background())
}

func (i LogControlConfigMap) ToLogControlConfigMapOutputWithContext(ctx context.Context) LogControlConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogControlConfigMapOutput)
}

type LogControlConfigOutput struct{ *pulumi.OutputState }

func (LogControlConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogControlConfig)(nil)).Elem()
}

func (o LogControlConfigOutput) ToLogControlConfigOutput() LogControlConfigOutput {
	return o
}

func (o LogControlConfigOutput) ToLogControlConfigOutputWithContext(ctx context.Context) LogControlConfigOutput {
	return o
}

func (o LogControlConfigOutput) Rules() LogControlConfigRuleArrayOutput {
	return o.ApplyT(func(v *LogControlConfig) LogControlConfigRuleArrayOutput { return v.Rules }).(LogControlConfigRuleArrayOutput)
}

type LogControlConfigArrayOutput struct{ *pulumi.OutputState }

func (LogControlConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogControlConfig)(nil)).Elem()
}

func (o LogControlConfigArrayOutput) ToLogControlConfigArrayOutput() LogControlConfigArrayOutput {
	return o
}

func (o LogControlConfigArrayOutput) ToLogControlConfigArrayOutputWithContext(ctx context.Context) LogControlConfigArrayOutput {
	return o
}

func (o LogControlConfigArrayOutput) Index(i pulumi.IntInput) LogControlConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogControlConfig {
		return vs[0].([]*LogControlConfig)[vs[1].(int)]
	}).(LogControlConfigOutput)
}

type LogControlConfigMapOutput struct{ *pulumi.OutputState }

func (LogControlConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogControlConfig)(nil)).Elem()
}

func (o LogControlConfigMapOutput) ToLogControlConfigMapOutput() LogControlConfigMapOutput {
	return o
}

func (o LogControlConfigMapOutput) ToLogControlConfigMapOutputWithContext(ctx context.Context) LogControlConfigMapOutput {
	return o
}

func (o LogControlConfigMapOutput) MapIndex(k pulumi.StringInput) LogControlConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogControlConfig {
		return vs[0].(map[string]*LogControlConfig)[vs[1].(string)]
	}).(LogControlConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogControlConfigInput)(nil)).Elem(), &LogControlConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogControlConfigArrayInput)(nil)).Elem(), LogControlConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogControlConfigMapInput)(nil)).Elem(), LogControlConfigMap{})
	pulumi.RegisterOutputType(LogControlConfigOutput{})
	pulumi.RegisterOutputType(LogControlConfigArrayOutput{})
	pulumi.RegisterOutputType(LogControlConfigMapOutput{})
}
