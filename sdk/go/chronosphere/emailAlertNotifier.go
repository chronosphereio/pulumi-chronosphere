// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EmailAlertNotifier struct {
	pulumi.CustomResourceState

	Html         pulumi.StringPtrOutput `pulumi:"html"`
	Name         pulumi.StringOutput    `pulumi:"name"`
	SendResolved pulumi.BoolPtrOutput   `pulumi:"sendResolved"`
	Slug         pulumi.StringOutput    `pulumi:"slug"`
	Text         pulumi.StringPtrOutput `pulumi:"text"`
	To           pulumi.StringOutput    `pulumi:"to"`
}

// NewEmailAlertNotifier registers a new resource with the given unique name, arguments, and options.
func NewEmailAlertNotifier(ctx *pulumi.Context,
	name string, args *EmailAlertNotifierArgs, opts ...pulumi.ResourceOption) (*EmailAlertNotifier, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.To == nil {
		return nil, errors.New("invalid value for required argument 'To'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmailAlertNotifier
	err := ctx.RegisterResource("chronosphere:index/emailAlertNotifier:EmailAlertNotifier", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailAlertNotifier gets an existing EmailAlertNotifier resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailAlertNotifier(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailAlertNotifierState, opts ...pulumi.ResourceOption) (*EmailAlertNotifier, error) {
	var resource EmailAlertNotifier
	err := ctx.ReadResource("chronosphere:index/emailAlertNotifier:EmailAlertNotifier", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailAlertNotifier resources.
type emailAlertNotifierState struct {
	Html         *string `pulumi:"html"`
	Name         *string `pulumi:"name"`
	SendResolved *bool   `pulumi:"sendResolved"`
	Slug         *string `pulumi:"slug"`
	Text         *string `pulumi:"text"`
	To           *string `pulumi:"to"`
}

type EmailAlertNotifierState struct {
	Html         pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	SendResolved pulumi.BoolPtrInput
	Slug         pulumi.StringPtrInput
	Text         pulumi.StringPtrInput
	To           pulumi.StringPtrInput
}

func (EmailAlertNotifierState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailAlertNotifierState)(nil)).Elem()
}

type emailAlertNotifierArgs struct {
	Html         *string `pulumi:"html"`
	Name         string  `pulumi:"name"`
	SendResolved *bool   `pulumi:"sendResolved"`
	Slug         *string `pulumi:"slug"`
	Text         *string `pulumi:"text"`
	To           string  `pulumi:"to"`
}

// The set of arguments for constructing a EmailAlertNotifier resource.
type EmailAlertNotifierArgs struct {
	Html         pulumi.StringPtrInput
	Name         pulumi.StringInput
	SendResolved pulumi.BoolPtrInput
	Slug         pulumi.StringPtrInput
	Text         pulumi.StringPtrInput
	To           pulumi.StringInput
}

func (EmailAlertNotifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailAlertNotifierArgs)(nil)).Elem()
}

type EmailAlertNotifierInput interface {
	pulumi.Input

	ToEmailAlertNotifierOutput() EmailAlertNotifierOutput
	ToEmailAlertNotifierOutputWithContext(ctx context.Context) EmailAlertNotifierOutput
}

func (*EmailAlertNotifier) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailAlertNotifier)(nil)).Elem()
}

func (i *EmailAlertNotifier) ToEmailAlertNotifierOutput() EmailAlertNotifierOutput {
	return i.ToEmailAlertNotifierOutputWithContext(context.Background())
}

func (i *EmailAlertNotifier) ToEmailAlertNotifierOutputWithContext(ctx context.Context) EmailAlertNotifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailAlertNotifierOutput)
}

// EmailAlertNotifierArrayInput is an input type that accepts EmailAlertNotifierArray and EmailAlertNotifierArrayOutput values.
// You can construct a concrete instance of `EmailAlertNotifierArrayInput` via:
//
//	EmailAlertNotifierArray{ EmailAlertNotifierArgs{...} }
type EmailAlertNotifierArrayInput interface {
	pulumi.Input

	ToEmailAlertNotifierArrayOutput() EmailAlertNotifierArrayOutput
	ToEmailAlertNotifierArrayOutputWithContext(context.Context) EmailAlertNotifierArrayOutput
}

type EmailAlertNotifierArray []EmailAlertNotifierInput

func (EmailAlertNotifierArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailAlertNotifier)(nil)).Elem()
}

func (i EmailAlertNotifierArray) ToEmailAlertNotifierArrayOutput() EmailAlertNotifierArrayOutput {
	return i.ToEmailAlertNotifierArrayOutputWithContext(context.Background())
}

func (i EmailAlertNotifierArray) ToEmailAlertNotifierArrayOutputWithContext(ctx context.Context) EmailAlertNotifierArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailAlertNotifierArrayOutput)
}

// EmailAlertNotifierMapInput is an input type that accepts EmailAlertNotifierMap and EmailAlertNotifierMapOutput values.
// You can construct a concrete instance of `EmailAlertNotifierMapInput` via:
//
//	EmailAlertNotifierMap{ "key": EmailAlertNotifierArgs{...} }
type EmailAlertNotifierMapInput interface {
	pulumi.Input

	ToEmailAlertNotifierMapOutput() EmailAlertNotifierMapOutput
	ToEmailAlertNotifierMapOutputWithContext(context.Context) EmailAlertNotifierMapOutput
}

type EmailAlertNotifierMap map[string]EmailAlertNotifierInput

func (EmailAlertNotifierMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailAlertNotifier)(nil)).Elem()
}

func (i EmailAlertNotifierMap) ToEmailAlertNotifierMapOutput() EmailAlertNotifierMapOutput {
	return i.ToEmailAlertNotifierMapOutputWithContext(context.Background())
}

func (i EmailAlertNotifierMap) ToEmailAlertNotifierMapOutputWithContext(ctx context.Context) EmailAlertNotifierMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailAlertNotifierMapOutput)
}

type EmailAlertNotifierOutput struct{ *pulumi.OutputState }

func (EmailAlertNotifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailAlertNotifier)(nil)).Elem()
}

func (o EmailAlertNotifierOutput) ToEmailAlertNotifierOutput() EmailAlertNotifierOutput {
	return o
}

func (o EmailAlertNotifierOutput) ToEmailAlertNotifierOutputWithContext(ctx context.Context) EmailAlertNotifierOutput {
	return o
}

func (o EmailAlertNotifierOutput) Html() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailAlertNotifier) pulumi.StringPtrOutput { return v.Html }).(pulumi.StringPtrOutput)
}

func (o EmailAlertNotifierOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailAlertNotifier) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EmailAlertNotifierOutput) SendResolved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EmailAlertNotifier) pulumi.BoolPtrOutput { return v.SendResolved }).(pulumi.BoolPtrOutput)
}

func (o EmailAlertNotifierOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailAlertNotifier) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o EmailAlertNotifierOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailAlertNotifier) pulumi.StringPtrOutput { return v.Text }).(pulumi.StringPtrOutput)
}

func (o EmailAlertNotifierOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailAlertNotifier) pulumi.StringOutput { return v.To }).(pulumi.StringOutput)
}

type EmailAlertNotifierArrayOutput struct{ *pulumi.OutputState }

func (EmailAlertNotifierArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailAlertNotifier)(nil)).Elem()
}

func (o EmailAlertNotifierArrayOutput) ToEmailAlertNotifierArrayOutput() EmailAlertNotifierArrayOutput {
	return o
}

func (o EmailAlertNotifierArrayOutput) ToEmailAlertNotifierArrayOutputWithContext(ctx context.Context) EmailAlertNotifierArrayOutput {
	return o
}

func (o EmailAlertNotifierArrayOutput) Index(i pulumi.IntInput) EmailAlertNotifierOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailAlertNotifier {
		return vs[0].([]*EmailAlertNotifier)[vs[1].(int)]
	}).(EmailAlertNotifierOutput)
}

type EmailAlertNotifierMapOutput struct{ *pulumi.OutputState }

func (EmailAlertNotifierMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailAlertNotifier)(nil)).Elem()
}

func (o EmailAlertNotifierMapOutput) ToEmailAlertNotifierMapOutput() EmailAlertNotifierMapOutput {
	return o
}

func (o EmailAlertNotifierMapOutput) ToEmailAlertNotifierMapOutputWithContext(ctx context.Context) EmailAlertNotifierMapOutput {
	return o
}

func (o EmailAlertNotifierMapOutput) MapIndex(k pulumi.StringInput) EmailAlertNotifierOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailAlertNotifier {
		return vs[0].(map[string]*EmailAlertNotifier)[vs[1].(string)]
	}).(EmailAlertNotifierOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailAlertNotifierInput)(nil)).Elem(), &EmailAlertNotifier{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailAlertNotifierArrayInput)(nil)).Elem(), EmailAlertNotifierArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailAlertNotifierMapInput)(nil)).Elem(), EmailAlertNotifierMap{})
	pulumi.RegisterOutputType(EmailAlertNotifierOutput{})
	pulumi.RegisterOutputType(EmailAlertNotifierArrayOutput{})
	pulumi.RegisterOutputType(EmailAlertNotifierMapOutput{})
}
