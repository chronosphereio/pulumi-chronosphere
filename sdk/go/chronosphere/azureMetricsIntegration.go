// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AzureMetricsIntegration struct {
	pulumi.CustomResourceState

	CountMetricsEnabled pulumi.BoolPtrOutput                         `pulumi:"countMetricsEnabled"`
	Name                pulumi.StringOutput                          `pulumi:"name"`
	Principal           AzureMetricsIntegrationPrincipalPtrOutput    `pulumi:"principal"`
	PropagateTags       pulumi.BoolPtrOutput                         `pulumi:"propagateTags"`
	ScrapeConfig        AzureMetricsIntegrationScrapeConfigPtrOutput `pulumi:"scrapeConfig"`
	Slug                pulumi.StringOutput                          `pulumi:"slug"`
	UsageMetricsEnabled pulumi.BoolPtrOutput                         `pulumi:"usageMetricsEnabled"`
}

// NewAzureMetricsIntegration registers a new resource with the given unique name, arguments, and options.
func NewAzureMetricsIntegration(ctx *pulumi.Context,
	name string, args *AzureMetricsIntegrationArgs, opts ...pulumi.ResourceOption) (*AzureMetricsIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureMetricsIntegration
	err := ctx.RegisterResource("chronosphere:index/azureMetricsIntegration:AzureMetricsIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureMetricsIntegration gets an existing AzureMetricsIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureMetricsIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureMetricsIntegrationState, opts ...pulumi.ResourceOption) (*AzureMetricsIntegration, error) {
	var resource AzureMetricsIntegration
	err := ctx.ReadResource("chronosphere:index/azureMetricsIntegration:AzureMetricsIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureMetricsIntegration resources.
type azureMetricsIntegrationState struct {
	CountMetricsEnabled *bool                                `pulumi:"countMetricsEnabled"`
	Name                *string                              `pulumi:"name"`
	Principal           *AzureMetricsIntegrationPrincipal    `pulumi:"principal"`
	PropagateTags       *bool                                `pulumi:"propagateTags"`
	ScrapeConfig        *AzureMetricsIntegrationScrapeConfig `pulumi:"scrapeConfig"`
	Slug                *string                              `pulumi:"slug"`
	UsageMetricsEnabled *bool                                `pulumi:"usageMetricsEnabled"`
}

type AzureMetricsIntegrationState struct {
	CountMetricsEnabled pulumi.BoolPtrInput
	Name                pulumi.StringPtrInput
	Principal           AzureMetricsIntegrationPrincipalPtrInput
	PropagateTags       pulumi.BoolPtrInput
	ScrapeConfig        AzureMetricsIntegrationScrapeConfigPtrInput
	Slug                pulumi.StringPtrInput
	UsageMetricsEnabled pulumi.BoolPtrInput
}

func (AzureMetricsIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureMetricsIntegrationState)(nil)).Elem()
}

type azureMetricsIntegrationArgs struct {
	CountMetricsEnabled *bool                                `pulumi:"countMetricsEnabled"`
	Name                string                               `pulumi:"name"`
	Principal           *AzureMetricsIntegrationPrincipal    `pulumi:"principal"`
	PropagateTags       *bool                                `pulumi:"propagateTags"`
	ScrapeConfig        *AzureMetricsIntegrationScrapeConfig `pulumi:"scrapeConfig"`
	Slug                *string                              `pulumi:"slug"`
	UsageMetricsEnabled *bool                                `pulumi:"usageMetricsEnabled"`
}

// The set of arguments for constructing a AzureMetricsIntegration resource.
type AzureMetricsIntegrationArgs struct {
	CountMetricsEnabled pulumi.BoolPtrInput
	Name                pulumi.StringInput
	Principal           AzureMetricsIntegrationPrincipalPtrInput
	PropagateTags       pulumi.BoolPtrInput
	ScrapeConfig        AzureMetricsIntegrationScrapeConfigPtrInput
	Slug                pulumi.StringPtrInput
	UsageMetricsEnabled pulumi.BoolPtrInput
}

func (AzureMetricsIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureMetricsIntegrationArgs)(nil)).Elem()
}

type AzureMetricsIntegrationInput interface {
	pulumi.Input

	ToAzureMetricsIntegrationOutput() AzureMetricsIntegrationOutput
	ToAzureMetricsIntegrationOutputWithContext(ctx context.Context) AzureMetricsIntegrationOutput
}

func (*AzureMetricsIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMetricsIntegration)(nil)).Elem()
}

func (i *AzureMetricsIntegration) ToAzureMetricsIntegrationOutput() AzureMetricsIntegrationOutput {
	return i.ToAzureMetricsIntegrationOutputWithContext(context.Background())
}

func (i *AzureMetricsIntegration) ToAzureMetricsIntegrationOutputWithContext(ctx context.Context) AzureMetricsIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMetricsIntegrationOutput)
}

// AzureMetricsIntegrationArrayInput is an input type that accepts AzureMetricsIntegrationArray and AzureMetricsIntegrationArrayOutput values.
// You can construct a concrete instance of `AzureMetricsIntegrationArrayInput` via:
//
//	AzureMetricsIntegrationArray{ AzureMetricsIntegrationArgs{...} }
type AzureMetricsIntegrationArrayInput interface {
	pulumi.Input

	ToAzureMetricsIntegrationArrayOutput() AzureMetricsIntegrationArrayOutput
	ToAzureMetricsIntegrationArrayOutputWithContext(context.Context) AzureMetricsIntegrationArrayOutput
}

type AzureMetricsIntegrationArray []AzureMetricsIntegrationInput

func (AzureMetricsIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureMetricsIntegration)(nil)).Elem()
}

func (i AzureMetricsIntegrationArray) ToAzureMetricsIntegrationArrayOutput() AzureMetricsIntegrationArrayOutput {
	return i.ToAzureMetricsIntegrationArrayOutputWithContext(context.Background())
}

func (i AzureMetricsIntegrationArray) ToAzureMetricsIntegrationArrayOutputWithContext(ctx context.Context) AzureMetricsIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMetricsIntegrationArrayOutput)
}

// AzureMetricsIntegrationMapInput is an input type that accepts AzureMetricsIntegrationMap and AzureMetricsIntegrationMapOutput values.
// You can construct a concrete instance of `AzureMetricsIntegrationMapInput` via:
//
//	AzureMetricsIntegrationMap{ "key": AzureMetricsIntegrationArgs{...} }
type AzureMetricsIntegrationMapInput interface {
	pulumi.Input

	ToAzureMetricsIntegrationMapOutput() AzureMetricsIntegrationMapOutput
	ToAzureMetricsIntegrationMapOutputWithContext(context.Context) AzureMetricsIntegrationMapOutput
}

type AzureMetricsIntegrationMap map[string]AzureMetricsIntegrationInput

func (AzureMetricsIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureMetricsIntegration)(nil)).Elem()
}

func (i AzureMetricsIntegrationMap) ToAzureMetricsIntegrationMapOutput() AzureMetricsIntegrationMapOutput {
	return i.ToAzureMetricsIntegrationMapOutputWithContext(context.Background())
}

func (i AzureMetricsIntegrationMap) ToAzureMetricsIntegrationMapOutputWithContext(ctx context.Context) AzureMetricsIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMetricsIntegrationMapOutput)
}

type AzureMetricsIntegrationOutput struct{ *pulumi.OutputState }

func (AzureMetricsIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMetricsIntegration)(nil)).Elem()
}

func (o AzureMetricsIntegrationOutput) ToAzureMetricsIntegrationOutput() AzureMetricsIntegrationOutput {
	return o
}

func (o AzureMetricsIntegrationOutput) ToAzureMetricsIntegrationOutputWithContext(ctx context.Context) AzureMetricsIntegrationOutput {
	return o
}

func (o AzureMetricsIntegrationOutput) CountMetricsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureMetricsIntegration) pulumi.BoolPtrOutput { return v.CountMetricsEnabled }).(pulumi.BoolPtrOutput)
}

func (o AzureMetricsIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMetricsIntegration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AzureMetricsIntegrationOutput) Principal() AzureMetricsIntegrationPrincipalPtrOutput {
	return o.ApplyT(func(v *AzureMetricsIntegration) AzureMetricsIntegrationPrincipalPtrOutput { return v.Principal }).(AzureMetricsIntegrationPrincipalPtrOutput)
}

func (o AzureMetricsIntegrationOutput) PropagateTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureMetricsIntegration) pulumi.BoolPtrOutput { return v.PropagateTags }).(pulumi.BoolPtrOutput)
}

func (o AzureMetricsIntegrationOutput) ScrapeConfig() AzureMetricsIntegrationScrapeConfigPtrOutput {
	return o.ApplyT(func(v *AzureMetricsIntegration) AzureMetricsIntegrationScrapeConfigPtrOutput { return v.ScrapeConfig }).(AzureMetricsIntegrationScrapeConfigPtrOutput)
}

func (o AzureMetricsIntegrationOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMetricsIntegration) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o AzureMetricsIntegrationOutput) UsageMetricsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureMetricsIntegration) pulumi.BoolPtrOutput { return v.UsageMetricsEnabled }).(pulumi.BoolPtrOutput)
}

type AzureMetricsIntegrationArrayOutput struct{ *pulumi.OutputState }

func (AzureMetricsIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureMetricsIntegration)(nil)).Elem()
}

func (o AzureMetricsIntegrationArrayOutput) ToAzureMetricsIntegrationArrayOutput() AzureMetricsIntegrationArrayOutput {
	return o
}

func (o AzureMetricsIntegrationArrayOutput) ToAzureMetricsIntegrationArrayOutputWithContext(ctx context.Context) AzureMetricsIntegrationArrayOutput {
	return o
}

func (o AzureMetricsIntegrationArrayOutput) Index(i pulumi.IntInput) AzureMetricsIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureMetricsIntegration {
		return vs[0].([]*AzureMetricsIntegration)[vs[1].(int)]
	}).(AzureMetricsIntegrationOutput)
}

type AzureMetricsIntegrationMapOutput struct{ *pulumi.OutputState }

func (AzureMetricsIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureMetricsIntegration)(nil)).Elem()
}

func (o AzureMetricsIntegrationMapOutput) ToAzureMetricsIntegrationMapOutput() AzureMetricsIntegrationMapOutput {
	return o
}

func (o AzureMetricsIntegrationMapOutput) ToAzureMetricsIntegrationMapOutputWithContext(ctx context.Context) AzureMetricsIntegrationMapOutput {
	return o
}

func (o AzureMetricsIntegrationMapOutput) MapIndex(k pulumi.StringInput) AzureMetricsIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureMetricsIntegration {
		return vs[0].(map[string]*AzureMetricsIntegration)[vs[1].(string)]
	}).(AzureMetricsIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureMetricsIntegrationInput)(nil)).Elem(), &AzureMetricsIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureMetricsIntegrationArrayInput)(nil)).Elem(), AzureMetricsIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureMetricsIntegrationMapInput)(nil)).Elem(), AzureMetricsIntegrationMap{})
	pulumi.RegisterOutputType(AzureMetricsIntegrationOutput{})
	pulumi.RegisterOutputType(AzureMetricsIntegrationArrayOutput{})
	pulumi.RegisterOutputType(AzureMetricsIntegrationMapOutput{})
}
