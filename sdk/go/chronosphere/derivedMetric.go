// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DerivedMetric struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput        `pulumi:"description"`
	MetricName  pulumi.StringOutput           `pulumi:"metricName"`
	Name        pulumi.StringOutput           `pulumi:"name"`
	Queries     DerivedMetricQueryArrayOutput `pulumi:"queries"`
	Slug        pulumi.StringOutput           `pulumi:"slug"`
}

// NewDerivedMetric registers a new resource with the given unique name, arguments, and options.
func NewDerivedMetric(ctx *pulumi.Context,
	name string, args *DerivedMetricArgs, opts ...pulumi.ResourceOption) (*DerivedMetric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetricName == nil {
		return nil, errors.New("invalid value for required argument 'MetricName'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Queries == nil {
		return nil, errors.New("invalid value for required argument 'Queries'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DerivedMetric
	err := ctx.RegisterResource("chronosphere:index/derivedMetric:DerivedMetric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDerivedMetric gets an existing DerivedMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDerivedMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DerivedMetricState, opts ...pulumi.ResourceOption) (*DerivedMetric, error) {
	var resource DerivedMetric
	err := ctx.ReadResource("chronosphere:index/derivedMetric:DerivedMetric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DerivedMetric resources.
type derivedMetricState struct {
	Description *string              `pulumi:"description"`
	MetricName  *string              `pulumi:"metricName"`
	Name        *string              `pulumi:"name"`
	Queries     []DerivedMetricQuery `pulumi:"queries"`
	Slug        *string              `pulumi:"slug"`
}

type DerivedMetricState struct {
	Description pulumi.StringPtrInput
	MetricName  pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Queries     DerivedMetricQueryArrayInput
	Slug        pulumi.StringPtrInput
}

func (DerivedMetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*derivedMetricState)(nil)).Elem()
}

type derivedMetricArgs struct {
	Description *string              `pulumi:"description"`
	MetricName  string               `pulumi:"metricName"`
	Name        string               `pulumi:"name"`
	Queries     []DerivedMetricQuery `pulumi:"queries"`
	Slug        *string              `pulumi:"slug"`
}

// The set of arguments for constructing a DerivedMetric resource.
type DerivedMetricArgs struct {
	Description pulumi.StringPtrInput
	MetricName  pulumi.StringInput
	Name        pulumi.StringInput
	Queries     DerivedMetricQueryArrayInput
	Slug        pulumi.StringPtrInput
}

func (DerivedMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*derivedMetricArgs)(nil)).Elem()
}

type DerivedMetricInput interface {
	pulumi.Input

	ToDerivedMetricOutput() DerivedMetricOutput
	ToDerivedMetricOutputWithContext(ctx context.Context) DerivedMetricOutput
}

func (*DerivedMetric) ElementType() reflect.Type {
	return reflect.TypeOf((**DerivedMetric)(nil)).Elem()
}

func (i *DerivedMetric) ToDerivedMetricOutput() DerivedMetricOutput {
	return i.ToDerivedMetricOutputWithContext(context.Background())
}

func (i *DerivedMetric) ToDerivedMetricOutputWithContext(ctx context.Context) DerivedMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedMetricOutput)
}

// DerivedMetricArrayInput is an input type that accepts DerivedMetricArray and DerivedMetricArrayOutput values.
// You can construct a concrete instance of `DerivedMetricArrayInput` via:
//
//	DerivedMetricArray{ DerivedMetricArgs{...} }
type DerivedMetricArrayInput interface {
	pulumi.Input

	ToDerivedMetricArrayOutput() DerivedMetricArrayOutput
	ToDerivedMetricArrayOutputWithContext(context.Context) DerivedMetricArrayOutput
}

type DerivedMetricArray []DerivedMetricInput

func (DerivedMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DerivedMetric)(nil)).Elem()
}

func (i DerivedMetricArray) ToDerivedMetricArrayOutput() DerivedMetricArrayOutput {
	return i.ToDerivedMetricArrayOutputWithContext(context.Background())
}

func (i DerivedMetricArray) ToDerivedMetricArrayOutputWithContext(ctx context.Context) DerivedMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedMetricArrayOutput)
}

// DerivedMetricMapInput is an input type that accepts DerivedMetricMap and DerivedMetricMapOutput values.
// You can construct a concrete instance of `DerivedMetricMapInput` via:
//
//	DerivedMetricMap{ "key": DerivedMetricArgs{...} }
type DerivedMetricMapInput interface {
	pulumi.Input

	ToDerivedMetricMapOutput() DerivedMetricMapOutput
	ToDerivedMetricMapOutputWithContext(context.Context) DerivedMetricMapOutput
}

type DerivedMetricMap map[string]DerivedMetricInput

func (DerivedMetricMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DerivedMetric)(nil)).Elem()
}

func (i DerivedMetricMap) ToDerivedMetricMapOutput() DerivedMetricMapOutput {
	return i.ToDerivedMetricMapOutputWithContext(context.Background())
}

func (i DerivedMetricMap) ToDerivedMetricMapOutputWithContext(ctx context.Context) DerivedMetricMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedMetricMapOutput)
}

type DerivedMetricOutput struct{ *pulumi.OutputState }

func (DerivedMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DerivedMetric)(nil)).Elem()
}

func (o DerivedMetricOutput) ToDerivedMetricOutput() DerivedMetricOutput {
	return o
}

func (o DerivedMetricOutput) ToDerivedMetricOutputWithContext(ctx context.Context) DerivedMetricOutput {
	return o
}

func (o DerivedMetricOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DerivedMetric) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DerivedMetricOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v *DerivedMetric) pulumi.StringOutput { return v.MetricName }).(pulumi.StringOutput)
}

func (o DerivedMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DerivedMetric) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DerivedMetricOutput) Queries() DerivedMetricQueryArrayOutput {
	return o.ApplyT(func(v *DerivedMetric) DerivedMetricQueryArrayOutput { return v.Queries }).(DerivedMetricQueryArrayOutput)
}

func (o DerivedMetricOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *DerivedMetric) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type DerivedMetricArrayOutput struct{ *pulumi.OutputState }

func (DerivedMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DerivedMetric)(nil)).Elem()
}

func (o DerivedMetricArrayOutput) ToDerivedMetricArrayOutput() DerivedMetricArrayOutput {
	return o
}

func (o DerivedMetricArrayOutput) ToDerivedMetricArrayOutputWithContext(ctx context.Context) DerivedMetricArrayOutput {
	return o
}

func (o DerivedMetricArrayOutput) Index(i pulumi.IntInput) DerivedMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DerivedMetric {
		return vs[0].([]*DerivedMetric)[vs[1].(int)]
	}).(DerivedMetricOutput)
}

type DerivedMetricMapOutput struct{ *pulumi.OutputState }

func (DerivedMetricMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DerivedMetric)(nil)).Elem()
}

func (o DerivedMetricMapOutput) ToDerivedMetricMapOutput() DerivedMetricMapOutput {
	return o
}

func (o DerivedMetricMapOutput) ToDerivedMetricMapOutputWithContext(ctx context.Context) DerivedMetricMapOutput {
	return o
}

func (o DerivedMetricMapOutput) MapIndex(k pulumi.StringInput) DerivedMetricOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DerivedMetric {
		return vs[0].(map[string]*DerivedMetric)[vs[1].(string)]
	}).(DerivedMetricOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DerivedMetricInput)(nil)).Elem(), &DerivedMetric{})
	pulumi.RegisterInputType(reflect.TypeOf((*DerivedMetricArrayInput)(nil)).Elem(), DerivedMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DerivedMetricMapInput)(nil)).Elem(), DerivedMetricMap{})
	pulumi.RegisterOutputType(DerivedMetricOutput{})
	pulumi.RegisterOutputType(DerivedMetricArrayOutput{})
	pulumi.RegisterOutputType(DerivedMetricMapOutput{})
}
