// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RecordingRule struct {
	pulumi.CustomResourceState

	BucketId       pulumi.StringPtrOutput `pulumi:"bucketId"`
	ExecutionGroup pulumi.StringPtrOutput `pulumi:"executionGroup"`
	Expr           pulumi.StringOutput    `pulumi:"expr"`
	Interval       pulumi.StringPtrOutput `pulumi:"interval"`
	Labels         pulumi.StringMapOutput `pulumi:"labels"`
	MetricName     pulumi.StringPtrOutput `pulumi:"metricName"`
	Name           pulumi.StringOutput    `pulumi:"name"`
	Slug           pulumi.StringOutput    `pulumi:"slug"`
}

// NewRecordingRule registers a new resource with the given unique name, arguments, and options.
func NewRecordingRule(ctx *pulumi.Context,
	name string, args *RecordingRuleArgs, opts ...pulumi.ResourceOption) (*RecordingRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Expr == nil {
		return nil, errors.New("invalid value for required argument 'Expr'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RecordingRule
	err := ctx.RegisterResource("chronosphere:index/recordingRule:RecordingRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecordingRule gets an existing RecordingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecordingRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordingRuleState, opts ...pulumi.ResourceOption) (*RecordingRule, error) {
	var resource RecordingRule
	err := ctx.ReadResource("chronosphere:index/recordingRule:RecordingRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecordingRule resources.
type recordingRuleState struct {
	BucketId       *string           `pulumi:"bucketId"`
	ExecutionGroup *string           `pulumi:"executionGroup"`
	Expr           *string           `pulumi:"expr"`
	Interval       *string           `pulumi:"interval"`
	Labels         map[string]string `pulumi:"labels"`
	MetricName     *string           `pulumi:"metricName"`
	Name           *string           `pulumi:"name"`
	Slug           *string           `pulumi:"slug"`
}

type RecordingRuleState struct {
	BucketId       pulumi.StringPtrInput
	ExecutionGroup pulumi.StringPtrInput
	Expr           pulumi.StringPtrInput
	Interval       pulumi.StringPtrInput
	Labels         pulumi.StringMapInput
	MetricName     pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	Slug           pulumi.StringPtrInput
}

func (RecordingRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordingRuleState)(nil)).Elem()
}

type recordingRuleArgs struct {
	BucketId       *string           `pulumi:"bucketId"`
	ExecutionGroup *string           `pulumi:"executionGroup"`
	Expr           string            `pulumi:"expr"`
	Interval       *string           `pulumi:"interval"`
	Labels         map[string]string `pulumi:"labels"`
	MetricName     *string           `pulumi:"metricName"`
	Name           string            `pulumi:"name"`
	Slug           *string           `pulumi:"slug"`
}

// The set of arguments for constructing a RecordingRule resource.
type RecordingRuleArgs struct {
	BucketId       pulumi.StringPtrInput
	ExecutionGroup pulumi.StringPtrInput
	Expr           pulumi.StringInput
	Interval       pulumi.StringPtrInput
	Labels         pulumi.StringMapInput
	MetricName     pulumi.StringPtrInput
	Name           pulumi.StringInput
	Slug           pulumi.StringPtrInput
}

func (RecordingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordingRuleArgs)(nil)).Elem()
}

type RecordingRuleInput interface {
	pulumi.Input

	ToRecordingRuleOutput() RecordingRuleOutput
	ToRecordingRuleOutputWithContext(ctx context.Context) RecordingRuleOutput
}

func (*RecordingRule) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingRule)(nil)).Elem()
}

func (i *RecordingRule) ToRecordingRuleOutput() RecordingRuleOutput {
	return i.ToRecordingRuleOutputWithContext(context.Background())
}

func (i *RecordingRule) ToRecordingRuleOutputWithContext(ctx context.Context) RecordingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingRuleOutput)
}

// RecordingRuleArrayInput is an input type that accepts RecordingRuleArray and RecordingRuleArrayOutput values.
// You can construct a concrete instance of `RecordingRuleArrayInput` via:
//
//	RecordingRuleArray{ RecordingRuleArgs{...} }
type RecordingRuleArrayInput interface {
	pulumi.Input

	ToRecordingRuleArrayOutput() RecordingRuleArrayOutput
	ToRecordingRuleArrayOutputWithContext(context.Context) RecordingRuleArrayOutput
}

type RecordingRuleArray []RecordingRuleInput

func (RecordingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecordingRule)(nil)).Elem()
}

func (i RecordingRuleArray) ToRecordingRuleArrayOutput() RecordingRuleArrayOutput {
	return i.ToRecordingRuleArrayOutputWithContext(context.Background())
}

func (i RecordingRuleArray) ToRecordingRuleArrayOutputWithContext(ctx context.Context) RecordingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingRuleArrayOutput)
}

// RecordingRuleMapInput is an input type that accepts RecordingRuleMap and RecordingRuleMapOutput values.
// You can construct a concrete instance of `RecordingRuleMapInput` via:
//
//	RecordingRuleMap{ "key": RecordingRuleArgs{...} }
type RecordingRuleMapInput interface {
	pulumi.Input

	ToRecordingRuleMapOutput() RecordingRuleMapOutput
	ToRecordingRuleMapOutputWithContext(context.Context) RecordingRuleMapOutput
}

type RecordingRuleMap map[string]RecordingRuleInput

func (RecordingRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecordingRule)(nil)).Elem()
}

func (i RecordingRuleMap) ToRecordingRuleMapOutput() RecordingRuleMapOutput {
	return i.ToRecordingRuleMapOutputWithContext(context.Background())
}

func (i RecordingRuleMap) ToRecordingRuleMapOutputWithContext(ctx context.Context) RecordingRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingRuleMapOutput)
}

type RecordingRuleOutput struct{ *pulumi.OutputState }

func (RecordingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingRule)(nil)).Elem()
}

func (o RecordingRuleOutput) ToRecordingRuleOutput() RecordingRuleOutput {
	return o
}

func (o RecordingRuleOutput) ToRecordingRuleOutputWithContext(ctx context.Context) RecordingRuleOutput {
	return o
}

func (o RecordingRuleOutput) BucketId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingRule) pulumi.StringPtrOutput { return v.BucketId }).(pulumi.StringPtrOutput)
}

func (o RecordingRuleOutput) ExecutionGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingRule) pulumi.StringPtrOutput { return v.ExecutionGroup }).(pulumi.StringPtrOutput)
}

func (o RecordingRuleOutput) Expr() pulumi.StringOutput {
	return o.ApplyT(func(v *RecordingRule) pulumi.StringOutput { return v.Expr }).(pulumi.StringOutput)
}

func (o RecordingRuleOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingRule) pulumi.StringPtrOutput { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o RecordingRuleOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RecordingRule) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o RecordingRuleOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingRule) pulumi.StringPtrOutput { return v.MetricName }).(pulumi.StringPtrOutput)
}

func (o RecordingRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RecordingRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RecordingRuleOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *RecordingRule) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type RecordingRuleArrayOutput struct{ *pulumi.OutputState }

func (RecordingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecordingRule)(nil)).Elem()
}

func (o RecordingRuleArrayOutput) ToRecordingRuleArrayOutput() RecordingRuleArrayOutput {
	return o
}

func (o RecordingRuleArrayOutput) ToRecordingRuleArrayOutputWithContext(ctx context.Context) RecordingRuleArrayOutput {
	return o
}

func (o RecordingRuleArrayOutput) Index(i pulumi.IntInput) RecordingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RecordingRule {
		return vs[0].([]*RecordingRule)[vs[1].(int)]
	}).(RecordingRuleOutput)
}

type RecordingRuleMapOutput struct{ *pulumi.OutputState }

func (RecordingRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecordingRule)(nil)).Elem()
}

func (o RecordingRuleMapOutput) ToRecordingRuleMapOutput() RecordingRuleMapOutput {
	return o
}

func (o RecordingRuleMapOutput) ToRecordingRuleMapOutputWithContext(ctx context.Context) RecordingRuleMapOutput {
	return o
}

func (o RecordingRuleMapOutput) MapIndex(k pulumi.StringInput) RecordingRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RecordingRule {
		return vs[0].(map[string]*RecordingRule)[vs[1].(string)]
	}).(RecordingRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingRuleInput)(nil)).Elem(), &RecordingRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingRuleArrayInput)(nil)).Elem(), RecordingRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingRuleMapInput)(nil)).Elem(), RecordingRuleMap{})
	pulumi.RegisterOutputType(RecordingRuleOutput{})
	pulumi.RegisterOutputType(RecordingRuleArrayOutput{})
	pulumi.RegisterOutputType(RecordingRuleMapOutput{})
}
