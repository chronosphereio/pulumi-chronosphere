// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Collection struct {
	pulumi.CustomResourceState

	Description          pulumi.StringPtrOutput `pulumi:"description"`
	Name                 pulumi.StringOutput    `pulumi:"name"`
	NotificationPolicyId pulumi.StringPtrOutput `pulumi:"notificationPolicyId"`
	Slug                 pulumi.StringOutput    `pulumi:"slug"`
	TeamId               pulumi.StringPtrOutput `pulumi:"teamId"`
}

// NewCollection registers a new resource with the given unique name, arguments, and options.
func NewCollection(ctx *pulumi.Context,
	name string, args *CollectionArgs, opts ...pulumi.ResourceOption) (*Collection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Collection
	err := ctx.RegisterResource("chronosphere:index/collection:Collection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCollection gets an existing Collection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCollection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CollectionState, opts ...pulumi.ResourceOption) (*Collection, error) {
	var resource Collection
	err := ctx.ReadResource("chronosphere:index/collection:Collection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Collection resources.
type collectionState struct {
	Description          *string `pulumi:"description"`
	Name                 *string `pulumi:"name"`
	NotificationPolicyId *string `pulumi:"notificationPolicyId"`
	Slug                 *string `pulumi:"slug"`
	TeamId               *string `pulumi:"teamId"`
}

type CollectionState struct {
	Description          pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	NotificationPolicyId pulumi.StringPtrInput
	Slug                 pulumi.StringPtrInput
	TeamId               pulumi.StringPtrInput
}

func (CollectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*collectionState)(nil)).Elem()
}

type collectionArgs struct {
	Description          *string `pulumi:"description"`
	Name                 string  `pulumi:"name"`
	NotificationPolicyId *string `pulumi:"notificationPolicyId"`
	Slug                 *string `pulumi:"slug"`
	TeamId               *string `pulumi:"teamId"`
}

// The set of arguments for constructing a Collection resource.
type CollectionArgs struct {
	Description          pulumi.StringPtrInput
	Name                 pulumi.StringInput
	NotificationPolicyId pulumi.StringPtrInput
	Slug                 pulumi.StringPtrInput
	TeamId               pulumi.StringPtrInput
}

func (CollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*collectionArgs)(nil)).Elem()
}

type CollectionInput interface {
	pulumi.Input

	ToCollectionOutput() CollectionOutput
	ToCollectionOutputWithContext(ctx context.Context) CollectionOutput
}

func (*Collection) ElementType() reflect.Type {
	return reflect.TypeOf((**Collection)(nil)).Elem()
}

func (i *Collection) ToCollectionOutput() CollectionOutput {
	return i.ToCollectionOutputWithContext(context.Background())
}

func (i *Collection) ToCollectionOutputWithContext(ctx context.Context) CollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectionOutput)
}

// CollectionArrayInput is an input type that accepts CollectionArray and CollectionArrayOutput values.
// You can construct a concrete instance of `CollectionArrayInput` via:
//
//	CollectionArray{ CollectionArgs{...} }
type CollectionArrayInput interface {
	pulumi.Input

	ToCollectionArrayOutput() CollectionArrayOutput
	ToCollectionArrayOutputWithContext(context.Context) CollectionArrayOutput
}

type CollectionArray []CollectionInput

func (CollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Collection)(nil)).Elem()
}

func (i CollectionArray) ToCollectionArrayOutput() CollectionArrayOutput {
	return i.ToCollectionArrayOutputWithContext(context.Background())
}

func (i CollectionArray) ToCollectionArrayOutputWithContext(ctx context.Context) CollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectionArrayOutput)
}

// CollectionMapInput is an input type that accepts CollectionMap and CollectionMapOutput values.
// You can construct a concrete instance of `CollectionMapInput` via:
//
//	CollectionMap{ "key": CollectionArgs{...} }
type CollectionMapInput interface {
	pulumi.Input

	ToCollectionMapOutput() CollectionMapOutput
	ToCollectionMapOutputWithContext(context.Context) CollectionMapOutput
}

type CollectionMap map[string]CollectionInput

func (CollectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Collection)(nil)).Elem()
}

func (i CollectionMap) ToCollectionMapOutput() CollectionMapOutput {
	return i.ToCollectionMapOutputWithContext(context.Background())
}

func (i CollectionMap) ToCollectionMapOutputWithContext(ctx context.Context) CollectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectionMapOutput)
}

type CollectionOutput struct{ *pulumi.OutputState }

func (CollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Collection)(nil)).Elem()
}

func (o CollectionOutput) ToCollectionOutput() CollectionOutput {
	return o
}

func (o CollectionOutput) ToCollectionOutputWithContext(ctx context.Context) CollectionOutput {
	return o
}

func (o CollectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Collection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o CollectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Collection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CollectionOutput) NotificationPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Collection) pulumi.StringPtrOutput { return v.NotificationPolicyId }).(pulumi.StringPtrOutput)
}

func (o CollectionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Collection) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o CollectionOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Collection) pulumi.StringPtrOutput { return v.TeamId }).(pulumi.StringPtrOutput)
}

type CollectionArrayOutput struct{ *pulumi.OutputState }

func (CollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Collection)(nil)).Elem()
}

func (o CollectionArrayOutput) ToCollectionArrayOutput() CollectionArrayOutput {
	return o
}

func (o CollectionArrayOutput) ToCollectionArrayOutputWithContext(ctx context.Context) CollectionArrayOutput {
	return o
}

func (o CollectionArrayOutput) Index(i pulumi.IntInput) CollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Collection {
		return vs[0].([]*Collection)[vs[1].(int)]
	}).(CollectionOutput)
}

type CollectionMapOutput struct{ *pulumi.OutputState }

func (CollectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Collection)(nil)).Elem()
}

func (o CollectionMapOutput) ToCollectionMapOutput() CollectionMapOutput {
	return o
}

func (o CollectionMapOutput) ToCollectionMapOutputWithContext(ctx context.Context) CollectionMapOutput {
	return o
}

func (o CollectionMapOutput) MapIndex(k pulumi.StringInput) CollectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Collection {
		return vs[0].(map[string]*Collection)[vs[1].(string)]
	}).(CollectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CollectionInput)(nil)).Elem(), &Collection{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollectionArrayInput)(nil)).Elem(), CollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollectionMapInput)(nil)).Elem(), CollectionMap{})
	pulumi.RegisterOutputType(CollectionOutput{})
	pulumi.RegisterOutputType(CollectionArrayOutput{})
	pulumi.RegisterOutputType(CollectionMapOutput{})
}
