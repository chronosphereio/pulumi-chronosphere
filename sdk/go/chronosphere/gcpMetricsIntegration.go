// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GcpMetricsIntegration struct {
	pulumi.CustomResourceState

	MetricGroups   GcpMetricsIntegrationMetricGroupArrayOutput  `pulumi:"metricGroups"`
	ServiceAccount GcpMetricsIntegrationServiceAccountPtrOutput `pulumi:"serviceAccount"`
	Slug           pulumi.StringPtrOutput                       `pulumi:"slug"`
}

// NewGcpMetricsIntegration registers a new resource with the given unique name, arguments, and options.
func NewGcpMetricsIntegration(ctx *pulumi.Context,
	name string, args *GcpMetricsIntegrationArgs, opts ...pulumi.ResourceOption) (*GcpMetricsIntegration, error) {
	if args == nil {
		args = &GcpMetricsIntegrationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GcpMetricsIntegration
	err := ctx.RegisterResource("chronosphere:index/gcpMetricsIntegration:GcpMetricsIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcpMetricsIntegration gets an existing GcpMetricsIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcpMetricsIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcpMetricsIntegrationState, opts ...pulumi.ResourceOption) (*GcpMetricsIntegration, error) {
	var resource GcpMetricsIntegration
	err := ctx.ReadResource("chronosphere:index/gcpMetricsIntegration:GcpMetricsIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcpMetricsIntegration resources.
type gcpMetricsIntegrationState struct {
	MetricGroups   []GcpMetricsIntegrationMetricGroup   `pulumi:"metricGroups"`
	ServiceAccount *GcpMetricsIntegrationServiceAccount `pulumi:"serviceAccount"`
	Slug           *string                              `pulumi:"slug"`
}

type GcpMetricsIntegrationState struct {
	MetricGroups   GcpMetricsIntegrationMetricGroupArrayInput
	ServiceAccount GcpMetricsIntegrationServiceAccountPtrInput
	Slug           pulumi.StringPtrInput
}

func (GcpMetricsIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpMetricsIntegrationState)(nil)).Elem()
}

type gcpMetricsIntegrationArgs struct {
	MetricGroups   []GcpMetricsIntegrationMetricGroup   `pulumi:"metricGroups"`
	ServiceAccount *GcpMetricsIntegrationServiceAccount `pulumi:"serviceAccount"`
	Slug           *string                              `pulumi:"slug"`
}

// The set of arguments for constructing a GcpMetricsIntegration resource.
type GcpMetricsIntegrationArgs struct {
	MetricGroups   GcpMetricsIntegrationMetricGroupArrayInput
	ServiceAccount GcpMetricsIntegrationServiceAccountPtrInput
	Slug           pulumi.StringPtrInput
}

func (GcpMetricsIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpMetricsIntegrationArgs)(nil)).Elem()
}

type GcpMetricsIntegrationInput interface {
	pulumi.Input

	ToGcpMetricsIntegrationOutput() GcpMetricsIntegrationOutput
	ToGcpMetricsIntegrationOutputWithContext(ctx context.Context) GcpMetricsIntegrationOutput
}

func (*GcpMetricsIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpMetricsIntegration)(nil)).Elem()
}

func (i *GcpMetricsIntegration) ToGcpMetricsIntegrationOutput() GcpMetricsIntegrationOutput {
	return i.ToGcpMetricsIntegrationOutputWithContext(context.Background())
}

func (i *GcpMetricsIntegration) ToGcpMetricsIntegrationOutputWithContext(ctx context.Context) GcpMetricsIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpMetricsIntegrationOutput)
}

// GcpMetricsIntegrationArrayInput is an input type that accepts GcpMetricsIntegrationArray and GcpMetricsIntegrationArrayOutput values.
// You can construct a concrete instance of `GcpMetricsIntegrationArrayInput` via:
//
//	GcpMetricsIntegrationArray{ GcpMetricsIntegrationArgs{...} }
type GcpMetricsIntegrationArrayInput interface {
	pulumi.Input

	ToGcpMetricsIntegrationArrayOutput() GcpMetricsIntegrationArrayOutput
	ToGcpMetricsIntegrationArrayOutputWithContext(context.Context) GcpMetricsIntegrationArrayOutput
}

type GcpMetricsIntegrationArray []GcpMetricsIntegrationInput

func (GcpMetricsIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpMetricsIntegration)(nil)).Elem()
}

func (i GcpMetricsIntegrationArray) ToGcpMetricsIntegrationArrayOutput() GcpMetricsIntegrationArrayOutput {
	return i.ToGcpMetricsIntegrationArrayOutputWithContext(context.Background())
}

func (i GcpMetricsIntegrationArray) ToGcpMetricsIntegrationArrayOutputWithContext(ctx context.Context) GcpMetricsIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpMetricsIntegrationArrayOutput)
}

// GcpMetricsIntegrationMapInput is an input type that accepts GcpMetricsIntegrationMap and GcpMetricsIntegrationMapOutput values.
// You can construct a concrete instance of `GcpMetricsIntegrationMapInput` via:
//
//	GcpMetricsIntegrationMap{ "key": GcpMetricsIntegrationArgs{...} }
type GcpMetricsIntegrationMapInput interface {
	pulumi.Input

	ToGcpMetricsIntegrationMapOutput() GcpMetricsIntegrationMapOutput
	ToGcpMetricsIntegrationMapOutputWithContext(context.Context) GcpMetricsIntegrationMapOutput
}

type GcpMetricsIntegrationMap map[string]GcpMetricsIntegrationInput

func (GcpMetricsIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpMetricsIntegration)(nil)).Elem()
}

func (i GcpMetricsIntegrationMap) ToGcpMetricsIntegrationMapOutput() GcpMetricsIntegrationMapOutput {
	return i.ToGcpMetricsIntegrationMapOutputWithContext(context.Background())
}

func (i GcpMetricsIntegrationMap) ToGcpMetricsIntegrationMapOutputWithContext(ctx context.Context) GcpMetricsIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpMetricsIntegrationMapOutput)
}

type GcpMetricsIntegrationOutput struct{ *pulumi.OutputState }

func (GcpMetricsIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpMetricsIntegration)(nil)).Elem()
}

func (o GcpMetricsIntegrationOutput) ToGcpMetricsIntegrationOutput() GcpMetricsIntegrationOutput {
	return o
}

func (o GcpMetricsIntegrationOutput) ToGcpMetricsIntegrationOutputWithContext(ctx context.Context) GcpMetricsIntegrationOutput {
	return o
}

func (o GcpMetricsIntegrationOutput) MetricGroups() GcpMetricsIntegrationMetricGroupArrayOutput {
	return o.ApplyT(func(v *GcpMetricsIntegration) GcpMetricsIntegrationMetricGroupArrayOutput { return v.MetricGroups }).(GcpMetricsIntegrationMetricGroupArrayOutput)
}

func (o GcpMetricsIntegrationOutput) ServiceAccount() GcpMetricsIntegrationServiceAccountPtrOutput {
	return o.ApplyT(func(v *GcpMetricsIntegration) GcpMetricsIntegrationServiceAccountPtrOutput { return v.ServiceAccount }).(GcpMetricsIntegrationServiceAccountPtrOutput)
}

func (o GcpMetricsIntegrationOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcpMetricsIntegration) pulumi.StringPtrOutput { return v.Slug }).(pulumi.StringPtrOutput)
}

type GcpMetricsIntegrationArrayOutput struct{ *pulumi.OutputState }

func (GcpMetricsIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpMetricsIntegration)(nil)).Elem()
}

func (o GcpMetricsIntegrationArrayOutput) ToGcpMetricsIntegrationArrayOutput() GcpMetricsIntegrationArrayOutput {
	return o
}

func (o GcpMetricsIntegrationArrayOutput) ToGcpMetricsIntegrationArrayOutputWithContext(ctx context.Context) GcpMetricsIntegrationArrayOutput {
	return o
}

func (o GcpMetricsIntegrationArrayOutput) Index(i pulumi.IntInput) GcpMetricsIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GcpMetricsIntegration {
		return vs[0].([]*GcpMetricsIntegration)[vs[1].(int)]
	}).(GcpMetricsIntegrationOutput)
}

type GcpMetricsIntegrationMapOutput struct{ *pulumi.OutputState }

func (GcpMetricsIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpMetricsIntegration)(nil)).Elem()
}

func (o GcpMetricsIntegrationMapOutput) ToGcpMetricsIntegrationMapOutput() GcpMetricsIntegrationMapOutput {
	return o
}

func (o GcpMetricsIntegrationMapOutput) ToGcpMetricsIntegrationMapOutputWithContext(ctx context.Context) GcpMetricsIntegrationMapOutput {
	return o
}

func (o GcpMetricsIntegrationMapOutput) MapIndex(k pulumi.StringInput) GcpMetricsIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GcpMetricsIntegration {
		return vs[0].(map[string]*GcpMetricsIntegration)[vs[1].(string)]
	}).(GcpMetricsIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcpMetricsIntegrationInput)(nil)).Elem(), &GcpMetricsIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpMetricsIntegrationArrayInput)(nil)).Elem(), GcpMetricsIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpMetricsIntegrationMapInput)(nil)).Elem(), GcpMetricsIntegrationMap{})
	pulumi.RegisterOutputType(GcpMetricsIntegrationOutput{})
	pulumi.RegisterOutputType(GcpMetricsIntegrationArrayOutput{})
	pulumi.RegisterOutputType(GcpMetricsIntegrationMapOutput{})
}
