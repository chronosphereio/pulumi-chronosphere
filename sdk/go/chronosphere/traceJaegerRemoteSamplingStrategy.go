// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TraceJaegerRemoteSamplingStrategy struct {
	pulumi.CustomResourceState

	AppliedStrategy TraceJaegerRemoteSamplingStrategyAppliedStrategyOutput `pulumi:"appliedStrategy"`
	Name            pulumi.StringOutput                                    `pulumi:"name"`
	ServiceName     pulumi.StringOutput                                    `pulumi:"serviceName"`
	Slug            pulumi.StringOutput                                    `pulumi:"slug"`
}

// NewTraceJaegerRemoteSamplingStrategy registers a new resource with the given unique name, arguments, and options.
func NewTraceJaegerRemoteSamplingStrategy(ctx *pulumi.Context,
	name string, args *TraceJaegerRemoteSamplingStrategyArgs, opts ...pulumi.ResourceOption) (*TraceJaegerRemoteSamplingStrategy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppliedStrategy == nil {
		return nil, errors.New("invalid value for required argument 'AppliedStrategy'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TraceJaegerRemoteSamplingStrategy
	err := ctx.RegisterResource("chronosphere:index/traceJaegerRemoteSamplingStrategy:TraceJaegerRemoteSamplingStrategy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTraceJaegerRemoteSamplingStrategy gets an existing TraceJaegerRemoteSamplingStrategy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTraceJaegerRemoteSamplingStrategy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TraceJaegerRemoteSamplingStrategyState, opts ...pulumi.ResourceOption) (*TraceJaegerRemoteSamplingStrategy, error) {
	var resource TraceJaegerRemoteSamplingStrategy
	err := ctx.ReadResource("chronosphere:index/traceJaegerRemoteSamplingStrategy:TraceJaegerRemoteSamplingStrategy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TraceJaegerRemoteSamplingStrategy resources.
type traceJaegerRemoteSamplingStrategyState struct {
	AppliedStrategy *TraceJaegerRemoteSamplingStrategyAppliedStrategy `pulumi:"appliedStrategy"`
	Name            *string                                           `pulumi:"name"`
	ServiceName     *string                                           `pulumi:"serviceName"`
	Slug            *string                                           `pulumi:"slug"`
}

type TraceJaegerRemoteSamplingStrategyState struct {
	AppliedStrategy TraceJaegerRemoteSamplingStrategyAppliedStrategyPtrInput
	Name            pulumi.StringPtrInput
	ServiceName     pulumi.StringPtrInput
	Slug            pulumi.StringPtrInput
}

func (TraceJaegerRemoteSamplingStrategyState) ElementType() reflect.Type {
	return reflect.TypeOf((*traceJaegerRemoteSamplingStrategyState)(nil)).Elem()
}

type traceJaegerRemoteSamplingStrategyArgs struct {
	AppliedStrategy TraceJaegerRemoteSamplingStrategyAppliedStrategy `pulumi:"appliedStrategy"`
	Name            string                                           `pulumi:"name"`
	ServiceName     string                                           `pulumi:"serviceName"`
	Slug            *string                                          `pulumi:"slug"`
}

// The set of arguments for constructing a TraceJaegerRemoteSamplingStrategy resource.
type TraceJaegerRemoteSamplingStrategyArgs struct {
	AppliedStrategy TraceJaegerRemoteSamplingStrategyAppliedStrategyInput
	Name            pulumi.StringInput
	ServiceName     pulumi.StringInput
	Slug            pulumi.StringPtrInput
}

func (TraceJaegerRemoteSamplingStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*traceJaegerRemoteSamplingStrategyArgs)(nil)).Elem()
}

type TraceJaegerRemoteSamplingStrategyInput interface {
	pulumi.Input

	ToTraceJaegerRemoteSamplingStrategyOutput() TraceJaegerRemoteSamplingStrategyOutput
	ToTraceJaegerRemoteSamplingStrategyOutputWithContext(ctx context.Context) TraceJaegerRemoteSamplingStrategyOutput
}

func (*TraceJaegerRemoteSamplingStrategy) ElementType() reflect.Type {
	return reflect.TypeOf((**TraceJaegerRemoteSamplingStrategy)(nil)).Elem()
}

func (i *TraceJaegerRemoteSamplingStrategy) ToTraceJaegerRemoteSamplingStrategyOutput() TraceJaegerRemoteSamplingStrategyOutput {
	return i.ToTraceJaegerRemoteSamplingStrategyOutputWithContext(context.Background())
}

func (i *TraceJaegerRemoteSamplingStrategy) ToTraceJaegerRemoteSamplingStrategyOutputWithContext(ctx context.Context) TraceJaegerRemoteSamplingStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TraceJaegerRemoteSamplingStrategyOutput)
}

// TraceJaegerRemoteSamplingStrategyArrayInput is an input type that accepts TraceJaegerRemoteSamplingStrategyArray and TraceJaegerRemoteSamplingStrategyArrayOutput values.
// You can construct a concrete instance of `TraceJaegerRemoteSamplingStrategyArrayInput` via:
//
//	TraceJaegerRemoteSamplingStrategyArray{ TraceJaegerRemoteSamplingStrategyArgs{...} }
type TraceJaegerRemoteSamplingStrategyArrayInput interface {
	pulumi.Input

	ToTraceJaegerRemoteSamplingStrategyArrayOutput() TraceJaegerRemoteSamplingStrategyArrayOutput
	ToTraceJaegerRemoteSamplingStrategyArrayOutputWithContext(context.Context) TraceJaegerRemoteSamplingStrategyArrayOutput
}

type TraceJaegerRemoteSamplingStrategyArray []TraceJaegerRemoteSamplingStrategyInput

func (TraceJaegerRemoteSamplingStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TraceJaegerRemoteSamplingStrategy)(nil)).Elem()
}

func (i TraceJaegerRemoteSamplingStrategyArray) ToTraceJaegerRemoteSamplingStrategyArrayOutput() TraceJaegerRemoteSamplingStrategyArrayOutput {
	return i.ToTraceJaegerRemoteSamplingStrategyArrayOutputWithContext(context.Background())
}

func (i TraceJaegerRemoteSamplingStrategyArray) ToTraceJaegerRemoteSamplingStrategyArrayOutputWithContext(ctx context.Context) TraceJaegerRemoteSamplingStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TraceJaegerRemoteSamplingStrategyArrayOutput)
}

// TraceJaegerRemoteSamplingStrategyMapInput is an input type that accepts TraceJaegerRemoteSamplingStrategyMap and TraceJaegerRemoteSamplingStrategyMapOutput values.
// You can construct a concrete instance of `TraceJaegerRemoteSamplingStrategyMapInput` via:
//
//	TraceJaegerRemoteSamplingStrategyMap{ "key": TraceJaegerRemoteSamplingStrategyArgs{...} }
type TraceJaegerRemoteSamplingStrategyMapInput interface {
	pulumi.Input

	ToTraceJaegerRemoteSamplingStrategyMapOutput() TraceJaegerRemoteSamplingStrategyMapOutput
	ToTraceJaegerRemoteSamplingStrategyMapOutputWithContext(context.Context) TraceJaegerRemoteSamplingStrategyMapOutput
}

type TraceJaegerRemoteSamplingStrategyMap map[string]TraceJaegerRemoteSamplingStrategyInput

func (TraceJaegerRemoteSamplingStrategyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TraceJaegerRemoteSamplingStrategy)(nil)).Elem()
}

func (i TraceJaegerRemoteSamplingStrategyMap) ToTraceJaegerRemoteSamplingStrategyMapOutput() TraceJaegerRemoteSamplingStrategyMapOutput {
	return i.ToTraceJaegerRemoteSamplingStrategyMapOutputWithContext(context.Background())
}

func (i TraceJaegerRemoteSamplingStrategyMap) ToTraceJaegerRemoteSamplingStrategyMapOutputWithContext(ctx context.Context) TraceJaegerRemoteSamplingStrategyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TraceJaegerRemoteSamplingStrategyMapOutput)
}

type TraceJaegerRemoteSamplingStrategyOutput struct{ *pulumi.OutputState }

func (TraceJaegerRemoteSamplingStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TraceJaegerRemoteSamplingStrategy)(nil)).Elem()
}

func (o TraceJaegerRemoteSamplingStrategyOutput) ToTraceJaegerRemoteSamplingStrategyOutput() TraceJaegerRemoteSamplingStrategyOutput {
	return o
}

func (o TraceJaegerRemoteSamplingStrategyOutput) ToTraceJaegerRemoteSamplingStrategyOutputWithContext(ctx context.Context) TraceJaegerRemoteSamplingStrategyOutput {
	return o
}

func (o TraceJaegerRemoteSamplingStrategyOutput) AppliedStrategy() TraceJaegerRemoteSamplingStrategyAppliedStrategyOutput {
	return o.ApplyT(func(v *TraceJaegerRemoteSamplingStrategy) TraceJaegerRemoteSamplingStrategyAppliedStrategyOutput {
		return v.AppliedStrategy
	}).(TraceJaegerRemoteSamplingStrategyAppliedStrategyOutput)
}

func (o TraceJaegerRemoteSamplingStrategyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TraceJaegerRemoteSamplingStrategy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TraceJaegerRemoteSamplingStrategyOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *TraceJaegerRemoteSamplingStrategy) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func (o TraceJaegerRemoteSamplingStrategyOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *TraceJaegerRemoteSamplingStrategy) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type TraceJaegerRemoteSamplingStrategyArrayOutput struct{ *pulumi.OutputState }

func (TraceJaegerRemoteSamplingStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TraceJaegerRemoteSamplingStrategy)(nil)).Elem()
}

func (o TraceJaegerRemoteSamplingStrategyArrayOutput) ToTraceJaegerRemoteSamplingStrategyArrayOutput() TraceJaegerRemoteSamplingStrategyArrayOutput {
	return o
}

func (o TraceJaegerRemoteSamplingStrategyArrayOutput) ToTraceJaegerRemoteSamplingStrategyArrayOutputWithContext(ctx context.Context) TraceJaegerRemoteSamplingStrategyArrayOutput {
	return o
}

func (o TraceJaegerRemoteSamplingStrategyArrayOutput) Index(i pulumi.IntInput) TraceJaegerRemoteSamplingStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TraceJaegerRemoteSamplingStrategy {
		return vs[0].([]*TraceJaegerRemoteSamplingStrategy)[vs[1].(int)]
	}).(TraceJaegerRemoteSamplingStrategyOutput)
}

type TraceJaegerRemoteSamplingStrategyMapOutput struct{ *pulumi.OutputState }

func (TraceJaegerRemoteSamplingStrategyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TraceJaegerRemoteSamplingStrategy)(nil)).Elem()
}

func (o TraceJaegerRemoteSamplingStrategyMapOutput) ToTraceJaegerRemoteSamplingStrategyMapOutput() TraceJaegerRemoteSamplingStrategyMapOutput {
	return o
}

func (o TraceJaegerRemoteSamplingStrategyMapOutput) ToTraceJaegerRemoteSamplingStrategyMapOutputWithContext(ctx context.Context) TraceJaegerRemoteSamplingStrategyMapOutput {
	return o
}

func (o TraceJaegerRemoteSamplingStrategyMapOutput) MapIndex(k pulumi.StringInput) TraceJaegerRemoteSamplingStrategyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TraceJaegerRemoteSamplingStrategy {
		return vs[0].(map[string]*TraceJaegerRemoteSamplingStrategy)[vs[1].(string)]
	}).(TraceJaegerRemoteSamplingStrategyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TraceJaegerRemoteSamplingStrategyInput)(nil)).Elem(), &TraceJaegerRemoteSamplingStrategy{})
	pulumi.RegisterInputType(reflect.TypeOf((*TraceJaegerRemoteSamplingStrategyArrayInput)(nil)).Elem(), TraceJaegerRemoteSamplingStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TraceJaegerRemoteSamplingStrategyMapInput)(nil)).Elem(), TraceJaegerRemoteSamplingStrategyMap{})
	pulumi.RegisterOutputType(TraceJaegerRemoteSamplingStrategyOutput{})
	pulumi.RegisterOutputType(TraceJaegerRemoteSamplingStrategyArrayOutput{})
	pulumi.RegisterOutputType(TraceJaegerRemoteSamplingStrategyMapOutput{})
}
