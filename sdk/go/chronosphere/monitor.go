// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Monitor struct {
	pulumi.CustomResourceState

	Annotations          pulumi.StringMapOutput         `pulumi:"annotations"`
	BucketId             pulumi.StringPtrOutput         `pulumi:"bucketId"`
	CollectionId         pulumi.StringPtrOutput         `pulumi:"collectionId"`
	Interval             pulumi.StringPtrOutput         `pulumi:"interval"`
	Labels               pulumi.StringMapOutput         `pulumi:"labels"`
	Name                 pulumi.StringOutput            `pulumi:"name"`
	NotificationPolicyId pulumi.StringPtrOutput         `pulumi:"notificationPolicyId"`
	Query                MonitorQueryOutput             `pulumi:"query"`
	Schedule             MonitorSchedulePtrOutput       `pulumi:"schedule"`
	SeriesConditions     MonitorSeriesConditionsOutput  `pulumi:"seriesConditions"`
	SignalGrouping       MonitorSignalGroupingPtrOutput `pulumi:"signalGrouping"`
	Slug                 pulumi.StringOutput            `pulumi:"slug"`
}

// NewMonitor registers a new resource with the given unique name, arguments, and options.
func NewMonitor(ctx *pulumi.Context,
	name string, args *MonitorArgs, opts ...pulumi.ResourceOption) (*Monitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Query == nil {
		return nil, errors.New("invalid value for required argument 'Query'")
	}
	if args.SeriesConditions == nil {
		return nil, errors.New("invalid value for required argument 'SeriesConditions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Monitor
	err := ctx.RegisterResource("chronosphere:index/monitor:Monitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitor gets an existing Monitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitorState, opts ...pulumi.ResourceOption) (*Monitor, error) {
	var resource Monitor
	err := ctx.ReadResource("chronosphere:index/monitor:Monitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Monitor resources.
type monitorState struct {
	Annotations          map[string]string        `pulumi:"annotations"`
	BucketId             *string                  `pulumi:"bucketId"`
	CollectionId         *string                  `pulumi:"collectionId"`
	Interval             *string                  `pulumi:"interval"`
	Labels               map[string]string        `pulumi:"labels"`
	Name                 *string                  `pulumi:"name"`
	NotificationPolicyId *string                  `pulumi:"notificationPolicyId"`
	Query                *MonitorQuery            `pulumi:"query"`
	Schedule             *MonitorSchedule         `pulumi:"schedule"`
	SeriesConditions     *MonitorSeriesConditions `pulumi:"seriesConditions"`
	SignalGrouping       *MonitorSignalGrouping   `pulumi:"signalGrouping"`
	Slug                 *string                  `pulumi:"slug"`
}

type MonitorState struct {
	Annotations          pulumi.StringMapInput
	BucketId             pulumi.StringPtrInput
	CollectionId         pulumi.StringPtrInput
	Interval             pulumi.StringPtrInput
	Labels               pulumi.StringMapInput
	Name                 pulumi.StringPtrInput
	NotificationPolicyId pulumi.StringPtrInput
	Query                MonitorQueryPtrInput
	Schedule             MonitorSchedulePtrInput
	SeriesConditions     MonitorSeriesConditionsPtrInput
	SignalGrouping       MonitorSignalGroupingPtrInput
	Slug                 pulumi.StringPtrInput
}

func (MonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorState)(nil)).Elem()
}

type monitorArgs struct {
	Annotations          map[string]string       `pulumi:"annotations"`
	BucketId             *string                 `pulumi:"bucketId"`
	CollectionId         *string                 `pulumi:"collectionId"`
	Interval             *string                 `pulumi:"interval"`
	Labels               map[string]string       `pulumi:"labels"`
	Name                 string                  `pulumi:"name"`
	NotificationPolicyId *string                 `pulumi:"notificationPolicyId"`
	Query                MonitorQuery            `pulumi:"query"`
	Schedule             *MonitorSchedule        `pulumi:"schedule"`
	SeriesConditions     MonitorSeriesConditions `pulumi:"seriesConditions"`
	SignalGrouping       *MonitorSignalGrouping  `pulumi:"signalGrouping"`
	Slug                 *string                 `pulumi:"slug"`
}

// The set of arguments for constructing a Monitor resource.
type MonitorArgs struct {
	Annotations          pulumi.StringMapInput
	BucketId             pulumi.StringPtrInput
	CollectionId         pulumi.StringPtrInput
	Interval             pulumi.StringPtrInput
	Labels               pulumi.StringMapInput
	Name                 pulumi.StringInput
	NotificationPolicyId pulumi.StringPtrInput
	Query                MonitorQueryInput
	Schedule             MonitorSchedulePtrInput
	SeriesConditions     MonitorSeriesConditionsInput
	SignalGrouping       MonitorSignalGroupingPtrInput
	Slug                 pulumi.StringPtrInput
}

func (MonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorArgs)(nil)).Elem()
}

type MonitorInput interface {
	pulumi.Input

	ToMonitorOutput() MonitorOutput
	ToMonitorOutputWithContext(ctx context.Context) MonitorOutput
}

func (*Monitor) ElementType() reflect.Type {
	return reflect.TypeOf((**Monitor)(nil)).Elem()
}

func (i *Monitor) ToMonitorOutput() MonitorOutput {
	return i.ToMonitorOutputWithContext(context.Background())
}

func (i *Monitor) ToMonitorOutputWithContext(ctx context.Context) MonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorOutput)
}

// MonitorArrayInput is an input type that accepts MonitorArray and MonitorArrayOutput values.
// You can construct a concrete instance of `MonitorArrayInput` via:
//
//	MonitorArray{ MonitorArgs{...} }
type MonitorArrayInput interface {
	pulumi.Input

	ToMonitorArrayOutput() MonitorArrayOutput
	ToMonitorArrayOutputWithContext(context.Context) MonitorArrayOutput
}

type MonitorArray []MonitorInput

func (MonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Monitor)(nil)).Elem()
}

func (i MonitorArray) ToMonitorArrayOutput() MonitorArrayOutput {
	return i.ToMonitorArrayOutputWithContext(context.Background())
}

func (i MonitorArray) ToMonitorArrayOutputWithContext(ctx context.Context) MonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorArrayOutput)
}

// MonitorMapInput is an input type that accepts MonitorMap and MonitorMapOutput values.
// You can construct a concrete instance of `MonitorMapInput` via:
//
//	MonitorMap{ "key": MonitorArgs{...} }
type MonitorMapInput interface {
	pulumi.Input

	ToMonitorMapOutput() MonitorMapOutput
	ToMonitorMapOutputWithContext(context.Context) MonitorMapOutput
}

type MonitorMap map[string]MonitorInput

func (MonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Monitor)(nil)).Elem()
}

func (i MonitorMap) ToMonitorMapOutput() MonitorMapOutput {
	return i.ToMonitorMapOutputWithContext(context.Background())
}

func (i MonitorMap) ToMonitorMapOutputWithContext(ctx context.Context) MonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorMapOutput)
}

type MonitorOutput struct{ *pulumi.OutputState }

func (MonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Monitor)(nil)).Elem()
}

func (o MonitorOutput) ToMonitorOutput() MonitorOutput {
	return o
}

func (o MonitorOutput) ToMonitorOutputWithContext(ctx context.Context) MonitorOutput {
	return o
}

func (o MonitorOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o MonitorOutput) BucketId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringPtrOutput { return v.BucketId }).(pulumi.StringPtrOutput)
}

func (o MonitorOutput) CollectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringPtrOutput { return v.CollectionId }).(pulumi.StringPtrOutput)
}

func (o MonitorOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringPtrOutput { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o MonitorOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o MonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MonitorOutput) NotificationPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringPtrOutput { return v.NotificationPolicyId }).(pulumi.StringPtrOutput)
}

func (o MonitorOutput) Query() MonitorQueryOutput {
	return o.ApplyT(func(v *Monitor) MonitorQueryOutput { return v.Query }).(MonitorQueryOutput)
}

func (o MonitorOutput) Schedule() MonitorSchedulePtrOutput {
	return o.ApplyT(func(v *Monitor) MonitorSchedulePtrOutput { return v.Schedule }).(MonitorSchedulePtrOutput)
}

func (o MonitorOutput) SeriesConditions() MonitorSeriesConditionsOutput {
	return o.ApplyT(func(v *Monitor) MonitorSeriesConditionsOutput { return v.SeriesConditions }).(MonitorSeriesConditionsOutput)
}

func (o MonitorOutput) SignalGrouping() MonitorSignalGroupingPtrOutput {
	return o.ApplyT(func(v *Monitor) MonitorSignalGroupingPtrOutput { return v.SignalGrouping }).(MonitorSignalGroupingPtrOutput)
}

func (o MonitorOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type MonitorArrayOutput struct{ *pulumi.OutputState }

func (MonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Monitor)(nil)).Elem()
}

func (o MonitorArrayOutput) ToMonitorArrayOutput() MonitorArrayOutput {
	return o
}

func (o MonitorArrayOutput) ToMonitorArrayOutputWithContext(ctx context.Context) MonitorArrayOutput {
	return o
}

func (o MonitorArrayOutput) Index(i pulumi.IntInput) MonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Monitor {
		return vs[0].([]*Monitor)[vs[1].(int)]
	}).(MonitorOutput)
}

type MonitorMapOutput struct{ *pulumi.OutputState }

func (MonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Monitor)(nil)).Elem()
}

func (o MonitorMapOutput) ToMonitorMapOutput() MonitorMapOutput {
	return o
}

func (o MonitorMapOutput) ToMonitorMapOutputWithContext(ctx context.Context) MonitorMapOutput {
	return o
}

func (o MonitorMapOutput) MapIndex(k pulumi.StringInput) MonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Monitor {
		return vs[0].(map[string]*Monitor)[vs[1].(string)]
	}).(MonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorInput)(nil)).Elem(), &Monitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorArrayInput)(nil)).Elem(), MonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorMapInput)(nil)).Elem(), MonitorMap{})
	pulumi.RegisterOutputType(MonitorOutput{})
	pulumi.RegisterOutputType(MonitorArrayOutput{})
	pulumi.RegisterOutputType(MonitorMapOutput{})
}
