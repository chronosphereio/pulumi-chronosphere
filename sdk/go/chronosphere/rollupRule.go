// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RollupRule struct {
	pulumi.CustomResourceState

	Aggregation         pulumi.StringPtrOutput                 `pulumi:"aggregation"`
	BucketId            pulumi.StringPtrOutput                 `pulumi:"bucketId"`
	DropRaw             pulumi.BoolPtrOutput                   `pulumi:"dropRaw"`
	ExcludeBies         pulumi.StringArrayOutput               `pulumi:"excludeBies"`
	Filter              pulumi.StringOutput                    `pulumi:"filter"`
	GraphiteLabelPolicy RollupRuleGraphiteLabelPolicyPtrOutput `pulumi:"graphiteLabelPolicy"`
	GroupBies           pulumi.StringArrayOutput               `pulumi:"groupBies"`
	Interval            pulumi.StringOutput                    `pulumi:"interval"`
	MetricType          pulumi.StringOutput                    `pulumi:"metricType"`
	MetricTypeTag       pulumi.BoolPtrOutput                   `pulumi:"metricTypeTag"`
	Mode                pulumi.StringPtrOutput                 `pulumi:"mode"`
	Name                pulumi.StringOutput                    `pulumi:"name"`
	NewMetric           pulumi.StringPtrOutput                 `pulumi:"newMetric"`
	Permissive          pulumi.BoolPtrOutput                   `pulumi:"permissive"`
	Slug                pulumi.StringOutput                    `pulumi:"slug"`
	// Deprecated: use `interval` instead
	StoragePolicies RollupRuleStoragePoliciesPtrOutput `pulumi:"storagePolicies"`
}

// NewRollupRule registers a new resource with the given unique name, arguments, and options.
func NewRollupRule(ctx *pulumi.Context,
	name string, args *RollupRuleArgs, opts ...pulumi.ResourceOption) (*RollupRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	if args.MetricType == nil {
		return nil, errors.New("invalid value for required argument 'MetricType'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RollupRule
	err := ctx.RegisterResource("chronosphere:index/rollupRule:RollupRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRollupRule gets an existing RollupRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRollupRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RollupRuleState, opts ...pulumi.ResourceOption) (*RollupRule, error) {
	var resource RollupRule
	err := ctx.ReadResource("chronosphere:index/rollupRule:RollupRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RollupRule resources.
type rollupRuleState struct {
	Aggregation         *string                        `pulumi:"aggregation"`
	BucketId            *string                        `pulumi:"bucketId"`
	DropRaw             *bool                          `pulumi:"dropRaw"`
	ExcludeBies         []string                       `pulumi:"excludeBies"`
	Filter              *string                        `pulumi:"filter"`
	GraphiteLabelPolicy *RollupRuleGraphiteLabelPolicy `pulumi:"graphiteLabelPolicy"`
	GroupBies           []string                       `pulumi:"groupBies"`
	Interval            *string                        `pulumi:"interval"`
	MetricType          *string                        `pulumi:"metricType"`
	MetricTypeTag       *bool                          `pulumi:"metricTypeTag"`
	Mode                *string                        `pulumi:"mode"`
	Name                *string                        `pulumi:"name"`
	NewMetric           *string                        `pulumi:"newMetric"`
	Permissive          *bool                          `pulumi:"permissive"`
	Slug                *string                        `pulumi:"slug"`
	// Deprecated: use `interval` instead
	StoragePolicies *RollupRuleStoragePolicies `pulumi:"storagePolicies"`
}

type RollupRuleState struct {
	Aggregation         pulumi.StringPtrInput
	BucketId            pulumi.StringPtrInput
	DropRaw             pulumi.BoolPtrInput
	ExcludeBies         pulumi.StringArrayInput
	Filter              pulumi.StringPtrInput
	GraphiteLabelPolicy RollupRuleGraphiteLabelPolicyPtrInput
	GroupBies           pulumi.StringArrayInput
	Interval            pulumi.StringPtrInput
	MetricType          pulumi.StringPtrInput
	MetricTypeTag       pulumi.BoolPtrInput
	Mode                pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	NewMetric           pulumi.StringPtrInput
	Permissive          pulumi.BoolPtrInput
	Slug                pulumi.StringPtrInput
	// Deprecated: use `interval` instead
	StoragePolicies RollupRuleStoragePoliciesPtrInput
}

func (RollupRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*rollupRuleState)(nil)).Elem()
}

type rollupRuleArgs struct {
	Aggregation         *string                        `pulumi:"aggregation"`
	BucketId            *string                        `pulumi:"bucketId"`
	DropRaw             *bool                          `pulumi:"dropRaw"`
	ExcludeBies         []string                       `pulumi:"excludeBies"`
	Filter              string                         `pulumi:"filter"`
	GraphiteLabelPolicy *RollupRuleGraphiteLabelPolicy `pulumi:"graphiteLabelPolicy"`
	GroupBies           []string                       `pulumi:"groupBies"`
	Interval            *string                        `pulumi:"interval"`
	MetricType          string                         `pulumi:"metricType"`
	MetricTypeTag       *bool                          `pulumi:"metricTypeTag"`
	Mode                *string                        `pulumi:"mode"`
	Name                string                         `pulumi:"name"`
	NewMetric           *string                        `pulumi:"newMetric"`
	Permissive          *bool                          `pulumi:"permissive"`
	Slug                string                         `pulumi:"slug"`
	// Deprecated: use `interval` instead
	StoragePolicies *RollupRuleStoragePolicies `pulumi:"storagePolicies"`
}

// The set of arguments for constructing a RollupRule resource.
type RollupRuleArgs struct {
	Aggregation         pulumi.StringPtrInput
	BucketId            pulumi.StringPtrInput
	DropRaw             pulumi.BoolPtrInput
	ExcludeBies         pulumi.StringArrayInput
	Filter              pulumi.StringInput
	GraphiteLabelPolicy RollupRuleGraphiteLabelPolicyPtrInput
	GroupBies           pulumi.StringArrayInput
	Interval            pulumi.StringPtrInput
	MetricType          pulumi.StringInput
	MetricTypeTag       pulumi.BoolPtrInput
	Mode                pulumi.StringPtrInput
	Name                pulumi.StringInput
	NewMetric           pulumi.StringPtrInput
	Permissive          pulumi.BoolPtrInput
	Slug                pulumi.StringInput
	// Deprecated: use `interval` instead
	StoragePolicies RollupRuleStoragePoliciesPtrInput
}

func (RollupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rollupRuleArgs)(nil)).Elem()
}

type RollupRuleInput interface {
	pulumi.Input

	ToRollupRuleOutput() RollupRuleOutput
	ToRollupRuleOutputWithContext(ctx context.Context) RollupRuleOutput
}

func (*RollupRule) ElementType() reflect.Type {
	return reflect.TypeOf((**RollupRule)(nil)).Elem()
}

func (i *RollupRule) ToRollupRuleOutput() RollupRuleOutput {
	return i.ToRollupRuleOutputWithContext(context.Background())
}

func (i *RollupRule) ToRollupRuleOutputWithContext(ctx context.Context) RollupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollupRuleOutput)
}

// RollupRuleArrayInput is an input type that accepts RollupRuleArray and RollupRuleArrayOutput values.
// You can construct a concrete instance of `RollupRuleArrayInput` via:
//
//	RollupRuleArray{ RollupRuleArgs{...} }
type RollupRuleArrayInput interface {
	pulumi.Input

	ToRollupRuleArrayOutput() RollupRuleArrayOutput
	ToRollupRuleArrayOutputWithContext(context.Context) RollupRuleArrayOutput
}

type RollupRuleArray []RollupRuleInput

func (RollupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RollupRule)(nil)).Elem()
}

func (i RollupRuleArray) ToRollupRuleArrayOutput() RollupRuleArrayOutput {
	return i.ToRollupRuleArrayOutputWithContext(context.Background())
}

func (i RollupRuleArray) ToRollupRuleArrayOutputWithContext(ctx context.Context) RollupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollupRuleArrayOutput)
}

// RollupRuleMapInput is an input type that accepts RollupRuleMap and RollupRuleMapOutput values.
// You can construct a concrete instance of `RollupRuleMapInput` via:
//
//	RollupRuleMap{ "key": RollupRuleArgs{...} }
type RollupRuleMapInput interface {
	pulumi.Input

	ToRollupRuleMapOutput() RollupRuleMapOutput
	ToRollupRuleMapOutputWithContext(context.Context) RollupRuleMapOutput
}

type RollupRuleMap map[string]RollupRuleInput

func (RollupRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RollupRule)(nil)).Elem()
}

func (i RollupRuleMap) ToRollupRuleMapOutput() RollupRuleMapOutput {
	return i.ToRollupRuleMapOutputWithContext(context.Background())
}

func (i RollupRuleMap) ToRollupRuleMapOutputWithContext(ctx context.Context) RollupRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollupRuleMapOutput)
}

type RollupRuleOutput struct{ *pulumi.OutputState }

func (RollupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RollupRule)(nil)).Elem()
}

func (o RollupRuleOutput) ToRollupRuleOutput() RollupRuleOutput {
	return o
}

func (o RollupRuleOutput) ToRollupRuleOutputWithContext(ctx context.Context) RollupRuleOutput {
	return o
}

func (o RollupRuleOutput) Aggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RollupRule) pulumi.StringPtrOutput { return v.Aggregation }).(pulumi.StringPtrOutput)
}

func (o RollupRuleOutput) BucketId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RollupRule) pulumi.StringPtrOutput { return v.BucketId }).(pulumi.StringPtrOutput)
}

func (o RollupRuleOutput) DropRaw() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RollupRule) pulumi.BoolPtrOutput { return v.DropRaw }).(pulumi.BoolPtrOutput)
}

func (o RollupRuleOutput) ExcludeBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RollupRule) pulumi.StringArrayOutput { return v.ExcludeBies }).(pulumi.StringArrayOutput)
}

func (o RollupRuleOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *RollupRule) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

func (o RollupRuleOutput) GraphiteLabelPolicy() RollupRuleGraphiteLabelPolicyPtrOutput {
	return o.ApplyT(func(v *RollupRule) RollupRuleGraphiteLabelPolicyPtrOutput { return v.GraphiteLabelPolicy }).(RollupRuleGraphiteLabelPolicyPtrOutput)
}

func (o RollupRuleOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RollupRule) pulumi.StringArrayOutput { return v.GroupBies }).(pulumi.StringArrayOutput)
}

func (o RollupRuleOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v *RollupRule) pulumi.StringOutput { return v.Interval }).(pulumi.StringOutput)
}

func (o RollupRuleOutput) MetricType() pulumi.StringOutput {
	return o.ApplyT(func(v *RollupRule) pulumi.StringOutput { return v.MetricType }).(pulumi.StringOutput)
}

func (o RollupRuleOutput) MetricTypeTag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RollupRule) pulumi.BoolPtrOutput { return v.MetricTypeTag }).(pulumi.BoolPtrOutput)
}

func (o RollupRuleOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RollupRule) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o RollupRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RollupRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RollupRuleOutput) NewMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RollupRule) pulumi.StringPtrOutput { return v.NewMetric }).(pulumi.StringPtrOutput)
}

func (o RollupRuleOutput) Permissive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RollupRule) pulumi.BoolPtrOutput { return v.Permissive }).(pulumi.BoolPtrOutput)
}

func (o RollupRuleOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *RollupRule) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Deprecated: use `interval` instead
func (o RollupRuleOutput) StoragePolicies() RollupRuleStoragePoliciesPtrOutput {
	return o.ApplyT(func(v *RollupRule) RollupRuleStoragePoliciesPtrOutput { return v.StoragePolicies }).(RollupRuleStoragePoliciesPtrOutput)
}

type RollupRuleArrayOutput struct{ *pulumi.OutputState }

func (RollupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RollupRule)(nil)).Elem()
}

func (o RollupRuleArrayOutput) ToRollupRuleArrayOutput() RollupRuleArrayOutput {
	return o
}

func (o RollupRuleArrayOutput) ToRollupRuleArrayOutputWithContext(ctx context.Context) RollupRuleArrayOutput {
	return o
}

func (o RollupRuleArrayOutput) Index(i pulumi.IntInput) RollupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RollupRule {
		return vs[0].([]*RollupRule)[vs[1].(int)]
	}).(RollupRuleOutput)
}

type RollupRuleMapOutput struct{ *pulumi.OutputState }

func (RollupRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RollupRule)(nil)).Elem()
}

func (o RollupRuleMapOutput) ToRollupRuleMapOutput() RollupRuleMapOutput {
	return o
}

func (o RollupRuleMapOutput) ToRollupRuleMapOutputWithContext(ctx context.Context) RollupRuleMapOutput {
	return o
}

func (o RollupRuleMapOutput) MapIndex(k pulumi.StringInput) RollupRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RollupRule {
		return vs[0].(map[string]*RollupRule)[vs[1].(string)]
	}).(RollupRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RollupRuleInput)(nil)).Elem(), &RollupRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollupRuleArrayInput)(nil)).Elem(), RollupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollupRuleMapInput)(nil)).Elem(), RollupRuleMap{})
	pulumi.RegisterOutputType(RollupRuleOutput{})
	pulumi.RegisterOutputType(RollupRuleArrayOutput{})
	pulumi.RegisterOutputType(RollupRuleMapOutput{})
}
