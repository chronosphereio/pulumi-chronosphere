// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DerivedLabel struct {
	pulumi.CustomResourceState

	Description         pulumi.StringPtrOutput           `pulumi:"description"`
	ExistingLabelPolicy pulumi.StringPtrOutput           `pulumi:"existingLabelPolicy"`
	LabelName           pulumi.StringOutput              `pulumi:"labelName"`
	MetricLabel         DerivedLabelMetricLabelPtrOutput `pulumi:"metricLabel"`
	Name                pulumi.StringOutput              `pulumi:"name"`
	Slug                pulumi.StringOutput              `pulumi:"slug"`
	SpanTag             DerivedLabelSpanTagPtrOutput     `pulumi:"spanTag"`
}

// NewDerivedLabel registers a new resource with the given unique name, arguments, and options.
func NewDerivedLabel(ctx *pulumi.Context,
	name string, args *DerivedLabelArgs, opts ...pulumi.ResourceOption) (*DerivedLabel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LabelName == nil {
		return nil, errors.New("invalid value for required argument 'LabelName'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DerivedLabel
	err := ctx.RegisterResource("chronosphere:index/derivedLabel:DerivedLabel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDerivedLabel gets an existing DerivedLabel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDerivedLabel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DerivedLabelState, opts ...pulumi.ResourceOption) (*DerivedLabel, error) {
	var resource DerivedLabel
	err := ctx.ReadResource("chronosphere:index/derivedLabel:DerivedLabel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DerivedLabel resources.
type derivedLabelState struct {
	Description         *string                  `pulumi:"description"`
	ExistingLabelPolicy *string                  `pulumi:"existingLabelPolicy"`
	LabelName           *string                  `pulumi:"labelName"`
	MetricLabel         *DerivedLabelMetricLabel `pulumi:"metricLabel"`
	Name                *string                  `pulumi:"name"`
	Slug                *string                  `pulumi:"slug"`
	SpanTag             *DerivedLabelSpanTag     `pulumi:"spanTag"`
}

type DerivedLabelState struct {
	Description         pulumi.StringPtrInput
	ExistingLabelPolicy pulumi.StringPtrInput
	LabelName           pulumi.StringPtrInput
	MetricLabel         DerivedLabelMetricLabelPtrInput
	Name                pulumi.StringPtrInput
	Slug                pulumi.StringPtrInput
	SpanTag             DerivedLabelSpanTagPtrInput
}

func (DerivedLabelState) ElementType() reflect.Type {
	return reflect.TypeOf((*derivedLabelState)(nil)).Elem()
}

type derivedLabelArgs struct {
	Description         *string                  `pulumi:"description"`
	ExistingLabelPolicy *string                  `pulumi:"existingLabelPolicy"`
	LabelName           string                   `pulumi:"labelName"`
	MetricLabel         *DerivedLabelMetricLabel `pulumi:"metricLabel"`
	Name                string                   `pulumi:"name"`
	Slug                *string                  `pulumi:"slug"`
	SpanTag             *DerivedLabelSpanTag     `pulumi:"spanTag"`
}

// The set of arguments for constructing a DerivedLabel resource.
type DerivedLabelArgs struct {
	Description         pulumi.StringPtrInput
	ExistingLabelPolicy pulumi.StringPtrInput
	LabelName           pulumi.StringInput
	MetricLabel         DerivedLabelMetricLabelPtrInput
	Name                pulumi.StringInput
	Slug                pulumi.StringPtrInput
	SpanTag             DerivedLabelSpanTagPtrInput
}

func (DerivedLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*derivedLabelArgs)(nil)).Elem()
}

type DerivedLabelInput interface {
	pulumi.Input

	ToDerivedLabelOutput() DerivedLabelOutput
	ToDerivedLabelOutputWithContext(ctx context.Context) DerivedLabelOutput
}

func (*DerivedLabel) ElementType() reflect.Type {
	return reflect.TypeOf((**DerivedLabel)(nil)).Elem()
}

func (i *DerivedLabel) ToDerivedLabelOutput() DerivedLabelOutput {
	return i.ToDerivedLabelOutputWithContext(context.Background())
}

func (i *DerivedLabel) ToDerivedLabelOutputWithContext(ctx context.Context) DerivedLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedLabelOutput)
}

// DerivedLabelArrayInput is an input type that accepts DerivedLabelArray and DerivedLabelArrayOutput values.
// You can construct a concrete instance of `DerivedLabelArrayInput` via:
//
//	DerivedLabelArray{ DerivedLabelArgs{...} }
type DerivedLabelArrayInput interface {
	pulumi.Input

	ToDerivedLabelArrayOutput() DerivedLabelArrayOutput
	ToDerivedLabelArrayOutputWithContext(context.Context) DerivedLabelArrayOutput
}

type DerivedLabelArray []DerivedLabelInput

func (DerivedLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DerivedLabel)(nil)).Elem()
}

func (i DerivedLabelArray) ToDerivedLabelArrayOutput() DerivedLabelArrayOutput {
	return i.ToDerivedLabelArrayOutputWithContext(context.Background())
}

func (i DerivedLabelArray) ToDerivedLabelArrayOutputWithContext(ctx context.Context) DerivedLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedLabelArrayOutput)
}

// DerivedLabelMapInput is an input type that accepts DerivedLabelMap and DerivedLabelMapOutput values.
// You can construct a concrete instance of `DerivedLabelMapInput` via:
//
//	DerivedLabelMap{ "key": DerivedLabelArgs{...} }
type DerivedLabelMapInput interface {
	pulumi.Input

	ToDerivedLabelMapOutput() DerivedLabelMapOutput
	ToDerivedLabelMapOutputWithContext(context.Context) DerivedLabelMapOutput
}

type DerivedLabelMap map[string]DerivedLabelInput

func (DerivedLabelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DerivedLabel)(nil)).Elem()
}

func (i DerivedLabelMap) ToDerivedLabelMapOutput() DerivedLabelMapOutput {
	return i.ToDerivedLabelMapOutputWithContext(context.Background())
}

func (i DerivedLabelMap) ToDerivedLabelMapOutputWithContext(ctx context.Context) DerivedLabelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedLabelMapOutput)
}

type DerivedLabelOutput struct{ *pulumi.OutputState }

func (DerivedLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DerivedLabel)(nil)).Elem()
}

func (o DerivedLabelOutput) ToDerivedLabelOutput() DerivedLabelOutput {
	return o
}

func (o DerivedLabelOutput) ToDerivedLabelOutputWithContext(ctx context.Context) DerivedLabelOutput {
	return o
}

func (o DerivedLabelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DerivedLabel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DerivedLabelOutput) ExistingLabelPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DerivedLabel) pulumi.StringPtrOutput { return v.ExistingLabelPolicy }).(pulumi.StringPtrOutput)
}

func (o DerivedLabelOutput) LabelName() pulumi.StringOutput {
	return o.ApplyT(func(v *DerivedLabel) pulumi.StringOutput { return v.LabelName }).(pulumi.StringOutput)
}

func (o DerivedLabelOutput) MetricLabel() DerivedLabelMetricLabelPtrOutput {
	return o.ApplyT(func(v *DerivedLabel) DerivedLabelMetricLabelPtrOutput { return v.MetricLabel }).(DerivedLabelMetricLabelPtrOutput)
}

func (o DerivedLabelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DerivedLabel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DerivedLabelOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *DerivedLabel) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o DerivedLabelOutput) SpanTag() DerivedLabelSpanTagPtrOutput {
	return o.ApplyT(func(v *DerivedLabel) DerivedLabelSpanTagPtrOutput { return v.SpanTag }).(DerivedLabelSpanTagPtrOutput)
}

type DerivedLabelArrayOutput struct{ *pulumi.OutputState }

func (DerivedLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DerivedLabel)(nil)).Elem()
}

func (o DerivedLabelArrayOutput) ToDerivedLabelArrayOutput() DerivedLabelArrayOutput {
	return o
}

func (o DerivedLabelArrayOutput) ToDerivedLabelArrayOutputWithContext(ctx context.Context) DerivedLabelArrayOutput {
	return o
}

func (o DerivedLabelArrayOutput) Index(i pulumi.IntInput) DerivedLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DerivedLabel {
		return vs[0].([]*DerivedLabel)[vs[1].(int)]
	}).(DerivedLabelOutput)
}

type DerivedLabelMapOutput struct{ *pulumi.OutputState }

func (DerivedLabelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DerivedLabel)(nil)).Elem()
}

func (o DerivedLabelMapOutput) ToDerivedLabelMapOutput() DerivedLabelMapOutput {
	return o
}

func (o DerivedLabelMapOutput) ToDerivedLabelMapOutputWithContext(ctx context.Context) DerivedLabelMapOutput {
	return o
}

func (o DerivedLabelMapOutput) MapIndex(k pulumi.StringInput) DerivedLabelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DerivedLabel {
		return vs[0].(map[string]*DerivedLabel)[vs[1].(string)]
	}).(DerivedLabelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DerivedLabelInput)(nil)).Elem(), &DerivedLabel{})
	pulumi.RegisterInputType(reflect.TypeOf((*DerivedLabelArrayInput)(nil)).Elem(), DerivedLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DerivedLabelMapInput)(nil)).Elem(), DerivedLabelMap{})
	pulumi.RegisterOutputType(DerivedLabelOutput{})
	pulumi.RegisterOutputType(DerivedLabelArrayOutput{})
	pulumi.RegisterOutputType(DerivedLabelMapOutput{})
}
