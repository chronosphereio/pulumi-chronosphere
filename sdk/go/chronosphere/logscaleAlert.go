// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LogscaleAlert struct {
	pulumi.CustomResourceState

	ActionIds   pulumi.StringArrayOutput `pulumi:"actionIds"`
	AlertType   pulumi.StringOutput      `pulumi:"alertType"`
	Description pulumi.StringPtrOutput   `pulumi:"description"`
	Disabled    pulumi.BoolPtrOutput     `pulumi:"disabled"`
	Name        pulumi.StringOutput      `pulumi:"name"`
	Query       pulumi.StringPtrOutput   `pulumi:"query"`
	Repository  pulumi.StringOutput      `pulumi:"repository"`
	// Email of the user that the alert runs on behalf of
	RunAsUser pulumi.StringOutput      `pulumi:"runAsUser"`
	Slug      pulumi.StringOutput      `pulumi:"slug"`
	Tags      pulumi.StringArrayOutput `pulumi:"tags"`
	// Required for STANDARD type alerts, optional for FILTER type alerts
	ThrottleDuration pulumi.StringPtrOutput `pulumi:"throttleDuration"`
	ThrottleField    pulumi.StringPtrOutput `pulumi:"throttleField"`
	// Required for STANDARD type alerts, ignored for FILTER type alerts
	TimeWindow pulumi.StringPtrOutput `pulumi:"timeWindow"`
}

// NewLogscaleAlert registers a new resource with the given unique name, arguments, and options.
func NewLogscaleAlert(ctx *pulumi.Context,
	name string, args *LogscaleAlertArgs, opts ...pulumi.ResourceOption) (*LogscaleAlert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlertType == nil {
		return nil, errors.New("invalid value for required argument 'AlertType'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.RunAsUser == nil {
		return nil, errors.New("invalid value for required argument 'RunAsUser'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogscaleAlert
	err := ctx.RegisterResource("chronosphere:index/logscaleAlert:LogscaleAlert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogscaleAlert gets an existing LogscaleAlert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogscaleAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogscaleAlertState, opts ...pulumi.ResourceOption) (*LogscaleAlert, error) {
	var resource LogscaleAlert
	err := ctx.ReadResource("chronosphere:index/logscaleAlert:LogscaleAlert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogscaleAlert resources.
type logscaleAlertState struct {
	ActionIds   []string `pulumi:"actionIds"`
	AlertType   *string  `pulumi:"alertType"`
	Description *string  `pulumi:"description"`
	Disabled    *bool    `pulumi:"disabled"`
	Name        *string  `pulumi:"name"`
	Query       *string  `pulumi:"query"`
	Repository  *string  `pulumi:"repository"`
	// Email of the user that the alert runs on behalf of
	RunAsUser *string  `pulumi:"runAsUser"`
	Slug      *string  `pulumi:"slug"`
	Tags      []string `pulumi:"tags"`
	// Required for STANDARD type alerts, optional for FILTER type alerts
	ThrottleDuration *string `pulumi:"throttleDuration"`
	ThrottleField    *string `pulumi:"throttleField"`
	// Required for STANDARD type alerts, ignored for FILTER type alerts
	TimeWindow *string `pulumi:"timeWindow"`
}

type LogscaleAlertState struct {
	ActionIds   pulumi.StringArrayInput
	AlertType   pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	Disabled    pulumi.BoolPtrInput
	Name        pulumi.StringPtrInput
	Query       pulumi.StringPtrInput
	Repository  pulumi.StringPtrInput
	// Email of the user that the alert runs on behalf of
	RunAsUser pulumi.StringPtrInput
	Slug      pulumi.StringPtrInput
	Tags      pulumi.StringArrayInput
	// Required for STANDARD type alerts, optional for FILTER type alerts
	ThrottleDuration pulumi.StringPtrInput
	ThrottleField    pulumi.StringPtrInput
	// Required for STANDARD type alerts, ignored for FILTER type alerts
	TimeWindow pulumi.StringPtrInput
}

func (LogscaleAlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*logscaleAlertState)(nil)).Elem()
}

type logscaleAlertArgs struct {
	ActionIds   []string `pulumi:"actionIds"`
	AlertType   string   `pulumi:"alertType"`
	Description *string  `pulumi:"description"`
	Disabled    *bool    `pulumi:"disabled"`
	Name        string   `pulumi:"name"`
	Query       *string  `pulumi:"query"`
	Repository  string   `pulumi:"repository"`
	// Email of the user that the alert runs on behalf of
	RunAsUser string   `pulumi:"runAsUser"`
	Slug      *string  `pulumi:"slug"`
	Tags      []string `pulumi:"tags"`
	// Required for STANDARD type alerts, optional for FILTER type alerts
	ThrottleDuration *string `pulumi:"throttleDuration"`
	ThrottleField    *string `pulumi:"throttleField"`
	// Required for STANDARD type alerts, ignored for FILTER type alerts
	TimeWindow *string `pulumi:"timeWindow"`
}

// The set of arguments for constructing a LogscaleAlert resource.
type LogscaleAlertArgs struct {
	ActionIds   pulumi.StringArrayInput
	AlertType   pulumi.StringInput
	Description pulumi.StringPtrInput
	Disabled    pulumi.BoolPtrInput
	Name        pulumi.StringInput
	Query       pulumi.StringPtrInput
	Repository  pulumi.StringInput
	// Email of the user that the alert runs on behalf of
	RunAsUser pulumi.StringInput
	Slug      pulumi.StringPtrInput
	Tags      pulumi.StringArrayInput
	// Required for STANDARD type alerts, optional for FILTER type alerts
	ThrottleDuration pulumi.StringPtrInput
	ThrottleField    pulumi.StringPtrInput
	// Required for STANDARD type alerts, ignored for FILTER type alerts
	TimeWindow pulumi.StringPtrInput
}

func (LogscaleAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logscaleAlertArgs)(nil)).Elem()
}

type LogscaleAlertInput interface {
	pulumi.Input

	ToLogscaleAlertOutput() LogscaleAlertOutput
	ToLogscaleAlertOutputWithContext(ctx context.Context) LogscaleAlertOutput
}

func (*LogscaleAlert) ElementType() reflect.Type {
	return reflect.TypeOf((**LogscaleAlert)(nil)).Elem()
}

func (i *LogscaleAlert) ToLogscaleAlertOutput() LogscaleAlertOutput {
	return i.ToLogscaleAlertOutputWithContext(context.Background())
}

func (i *LogscaleAlert) ToLogscaleAlertOutputWithContext(ctx context.Context) LogscaleAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogscaleAlertOutput)
}

// LogscaleAlertArrayInput is an input type that accepts LogscaleAlertArray and LogscaleAlertArrayOutput values.
// You can construct a concrete instance of `LogscaleAlertArrayInput` via:
//
//	LogscaleAlertArray{ LogscaleAlertArgs{...} }
type LogscaleAlertArrayInput interface {
	pulumi.Input

	ToLogscaleAlertArrayOutput() LogscaleAlertArrayOutput
	ToLogscaleAlertArrayOutputWithContext(context.Context) LogscaleAlertArrayOutput
}

type LogscaleAlertArray []LogscaleAlertInput

func (LogscaleAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogscaleAlert)(nil)).Elem()
}

func (i LogscaleAlertArray) ToLogscaleAlertArrayOutput() LogscaleAlertArrayOutput {
	return i.ToLogscaleAlertArrayOutputWithContext(context.Background())
}

func (i LogscaleAlertArray) ToLogscaleAlertArrayOutputWithContext(ctx context.Context) LogscaleAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogscaleAlertArrayOutput)
}

// LogscaleAlertMapInput is an input type that accepts LogscaleAlertMap and LogscaleAlertMapOutput values.
// You can construct a concrete instance of `LogscaleAlertMapInput` via:
//
//	LogscaleAlertMap{ "key": LogscaleAlertArgs{...} }
type LogscaleAlertMapInput interface {
	pulumi.Input

	ToLogscaleAlertMapOutput() LogscaleAlertMapOutput
	ToLogscaleAlertMapOutputWithContext(context.Context) LogscaleAlertMapOutput
}

type LogscaleAlertMap map[string]LogscaleAlertInput

func (LogscaleAlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogscaleAlert)(nil)).Elem()
}

func (i LogscaleAlertMap) ToLogscaleAlertMapOutput() LogscaleAlertMapOutput {
	return i.ToLogscaleAlertMapOutputWithContext(context.Background())
}

func (i LogscaleAlertMap) ToLogscaleAlertMapOutputWithContext(ctx context.Context) LogscaleAlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogscaleAlertMapOutput)
}

type LogscaleAlertOutput struct{ *pulumi.OutputState }

func (LogscaleAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogscaleAlert)(nil)).Elem()
}

func (o LogscaleAlertOutput) ToLogscaleAlertOutput() LogscaleAlertOutput {
	return o
}

func (o LogscaleAlertOutput) ToLogscaleAlertOutputWithContext(ctx context.Context) LogscaleAlertOutput {
	return o
}

func (o LogscaleAlertOutput) ActionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LogscaleAlert) pulumi.StringArrayOutput { return v.ActionIds }).(pulumi.StringArrayOutput)
}

func (o LogscaleAlertOutput) AlertType() pulumi.StringOutput {
	return o.ApplyT(func(v *LogscaleAlert) pulumi.StringOutput { return v.AlertType }).(pulumi.StringOutput)
}

func (o LogscaleAlertOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogscaleAlert) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LogscaleAlertOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogscaleAlert) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o LogscaleAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogscaleAlert) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LogscaleAlertOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogscaleAlert) pulumi.StringPtrOutput { return v.Query }).(pulumi.StringPtrOutput)
}

func (o LogscaleAlertOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *LogscaleAlert) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

// Email of the user that the alert runs on behalf of
func (o LogscaleAlertOutput) RunAsUser() pulumi.StringOutput {
	return o.ApplyT(func(v *LogscaleAlert) pulumi.StringOutput { return v.RunAsUser }).(pulumi.StringOutput)
}

func (o LogscaleAlertOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *LogscaleAlert) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o LogscaleAlertOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LogscaleAlert) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Required for STANDARD type alerts, optional for FILTER type alerts
func (o LogscaleAlertOutput) ThrottleDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogscaleAlert) pulumi.StringPtrOutput { return v.ThrottleDuration }).(pulumi.StringPtrOutput)
}

func (o LogscaleAlertOutput) ThrottleField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogscaleAlert) pulumi.StringPtrOutput { return v.ThrottleField }).(pulumi.StringPtrOutput)
}

// Required for STANDARD type alerts, ignored for FILTER type alerts
func (o LogscaleAlertOutput) TimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogscaleAlert) pulumi.StringPtrOutput { return v.TimeWindow }).(pulumi.StringPtrOutput)
}

type LogscaleAlertArrayOutput struct{ *pulumi.OutputState }

func (LogscaleAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogscaleAlert)(nil)).Elem()
}

func (o LogscaleAlertArrayOutput) ToLogscaleAlertArrayOutput() LogscaleAlertArrayOutput {
	return o
}

func (o LogscaleAlertArrayOutput) ToLogscaleAlertArrayOutputWithContext(ctx context.Context) LogscaleAlertArrayOutput {
	return o
}

func (o LogscaleAlertArrayOutput) Index(i pulumi.IntInput) LogscaleAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogscaleAlert {
		return vs[0].([]*LogscaleAlert)[vs[1].(int)]
	}).(LogscaleAlertOutput)
}

type LogscaleAlertMapOutput struct{ *pulumi.OutputState }

func (LogscaleAlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogscaleAlert)(nil)).Elem()
}

func (o LogscaleAlertMapOutput) ToLogscaleAlertMapOutput() LogscaleAlertMapOutput {
	return o
}

func (o LogscaleAlertMapOutput) ToLogscaleAlertMapOutputWithContext(ctx context.Context) LogscaleAlertMapOutput {
	return o
}

func (o LogscaleAlertMapOutput) MapIndex(k pulumi.StringInput) LogscaleAlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogscaleAlert {
		return vs[0].(map[string]*LogscaleAlert)[vs[1].(string)]
	}).(LogscaleAlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogscaleAlertInput)(nil)).Elem(), &LogscaleAlert{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogscaleAlertArrayInput)(nil)).Elem(), LogscaleAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogscaleAlertMapInput)(nil)).Elem(), LogscaleAlertMap{})
	pulumi.RegisterOutputType(LogscaleAlertOutput{})
	pulumi.RegisterOutputType(LogscaleAlertArrayOutput{})
	pulumi.RegisterOutputType(LogscaleAlertMapOutput{})
}
