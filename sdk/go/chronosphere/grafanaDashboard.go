// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GrafanaDashboard struct {
	pulumi.CustomResourceState

	BucketId      pulumi.StringPtrOutput `pulumi:"bucketId"`
	CollectionId  pulumi.StringPtrOutput `pulumi:"collectionId"`
	DashboardJson pulumi.StringOutput    `pulumi:"dashboardJson"`
}

// NewGrafanaDashboard registers a new resource with the given unique name, arguments, and options.
func NewGrafanaDashboard(ctx *pulumi.Context,
	name string, args *GrafanaDashboardArgs, opts ...pulumi.ResourceOption) (*GrafanaDashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DashboardJson == nil {
		return nil, errors.New("invalid value for required argument 'DashboardJson'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GrafanaDashboard
	err := ctx.RegisterResource("chronosphere:index/grafanaDashboard:GrafanaDashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrafanaDashboard gets an existing GrafanaDashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrafanaDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrafanaDashboardState, opts ...pulumi.ResourceOption) (*GrafanaDashboard, error) {
	var resource GrafanaDashboard
	err := ctx.ReadResource("chronosphere:index/grafanaDashboard:GrafanaDashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GrafanaDashboard resources.
type grafanaDashboardState struct {
	BucketId      *string `pulumi:"bucketId"`
	CollectionId  *string `pulumi:"collectionId"`
	DashboardJson *string `pulumi:"dashboardJson"`
}

type GrafanaDashboardState struct {
	BucketId      pulumi.StringPtrInput
	CollectionId  pulumi.StringPtrInput
	DashboardJson pulumi.StringPtrInput
}

func (GrafanaDashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaDashboardState)(nil)).Elem()
}

type grafanaDashboardArgs struct {
	BucketId      *string `pulumi:"bucketId"`
	CollectionId  *string `pulumi:"collectionId"`
	DashboardJson string  `pulumi:"dashboardJson"`
}

// The set of arguments for constructing a GrafanaDashboard resource.
type GrafanaDashboardArgs struct {
	BucketId      pulumi.StringPtrInput
	CollectionId  pulumi.StringPtrInput
	DashboardJson pulumi.StringInput
}

func (GrafanaDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaDashboardArgs)(nil)).Elem()
}

type GrafanaDashboardInput interface {
	pulumi.Input

	ToGrafanaDashboardOutput() GrafanaDashboardOutput
	ToGrafanaDashboardOutputWithContext(ctx context.Context) GrafanaDashboardOutput
}

func (*GrafanaDashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafanaDashboard)(nil)).Elem()
}

func (i *GrafanaDashboard) ToGrafanaDashboardOutput() GrafanaDashboardOutput {
	return i.ToGrafanaDashboardOutputWithContext(context.Background())
}

func (i *GrafanaDashboard) ToGrafanaDashboardOutputWithContext(ctx context.Context) GrafanaDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaDashboardOutput)
}

// GrafanaDashboardArrayInput is an input type that accepts GrafanaDashboardArray and GrafanaDashboardArrayOutput values.
// You can construct a concrete instance of `GrafanaDashboardArrayInput` via:
//
//	GrafanaDashboardArray{ GrafanaDashboardArgs{...} }
type GrafanaDashboardArrayInput interface {
	pulumi.Input

	ToGrafanaDashboardArrayOutput() GrafanaDashboardArrayOutput
	ToGrafanaDashboardArrayOutputWithContext(context.Context) GrafanaDashboardArrayOutput
}

type GrafanaDashboardArray []GrafanaDashboardInput

func (GrafanaDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrafanaDashboard)(nil)).Elem()
}

func (i GrafanaDashboardArray) ToGrafanaDashboardArrayOutput() GrafanaDashboardArrayOutput {
	return i.ToGrafanaDashboardArrayOutputWithContext(context.Background())
}

func (i GrafanaDashboardArray) ToGrafanaDashboardArrayOutputWithContext(ctx context.Context) GrafanaDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaDashboardArrayOutput)
}

// GrafanaDashboardMapInput is an input type that accepts GrafanaDashboardMap and GrafanaDashboardMapOutput values.
// You can construct a concrete instance of `GrafanaDashboardMapInput` via:
//
//	GrafanaDashboardMap{ "key": GrafanaDashboardArgs{...} }
type GrafanaDashboardMapInput interface {
	pulumi.Input

	ToGrafanaDashboardMapOutput() GrafanaDashboardMapOutput
	ToGrafanaDashboardMapOutputWithContext(context.Context) GrafanaDashboardMapOutput
}

type GrafanaDashboardMap map[string]GrafanaDashboardInput

func (GrafanaDashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrafanaDashboard)(nil)).Elem()
}

func (i GrafanaDashboardMap) ToGrafanaDashboardMapOutput() GrafanaDashboardMapOutput {
	return i.ToGrafanaDashboardMapOutputWithContext(context.Background())
}

func (i GrafanaDashboardMap) ToGrafanaDashboardMapOutputWithContext(ctx context.Context) GrafanaDashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaDashboardMapOutput)
}

type GrafanaDashboardOutput struct{ *pulumi.OutputState }

func (GrafanaDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafanaDashboard)(nil)).Elem()
}

func (o GrafanaDashboardOutput) ToGrafanaDashboardOutput() GrafanaDashboardOutput {
	return o
}

func (o GrafanaDashboardOutput) ToGrafanaDashboardOutputWithContext(ctx context.Context) GrafanaDashboardOutput {
	return o
}

func (o GrafanaDashboardOutput) BucketId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafanaDashboard) pulumi.StringPtrOutput { return v.BucketId }).(pulumi.StringPtrOutput)
}

func (o GrafanaDashboardOutput) CollectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafanaDashboard) pulumi.StringPtrOutput { return v.CollectionId }).(pulumi.StringPtrOutput)
}

func (o GrafanaDashboardOutput) DashboardJson() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaDashboard) pulumi.StringOutput { return v.DashboardJson }).(pulumi.StringOutput)
}

type GrafanaDashboardArrayOutput struct{ *pulumi.OutputState }

func (GrafanaDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrafanaDashboard)(nil)).Elem()
}

func (o GrafanaDashboardArrayOutput) ToGrafanaDashboardArrayOutput() GrafanaDashboardArrayOutput {
	return o
}

func (o GrafanaDashboardArrayOutput) ToGrafanaDashboardArrayOutputWithContext(ctx context.Context) GrafanaDashboardArrayOutput {
	return o
}

func (o GrafanaDashboardArrayOutput) Index(i pulumi.IntInput) GrafanaDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GrafanaDashboard {
		return vs[0].([]*GrafanaDashboard)[vs[1].(int)]
	}).(GrafanaDashboardOutput)
}

type GrafanaDashboardMapOutput struct{ *pulumi.OutputState }

func (GrafanaDashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrafanaDashboard)(nil)).Elem()
}

func (o GrafanaDashboardMapOutput) ToGrafanaDashboardMapOutput() GrafanaDashboardMapOutput {
	return o
}

func (o GrafanaDashboardMapOutput) ToGrafanaDashboardMapOutputWithContext(ctx context.Context) GrafanaDashboardMapOutput {
	return o
}

func (o GrafanaDashboardMapOutput) MapIndex(k pulumi.StringInput) GrafanaDashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GrafanaDashboard {
		return vs[0].(map[string]*GrafanaDashboard)[vs[1].(string)]
	}).(GrafanaDashboardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaDashboardInput)(nil)).Elem(), &GrafanaDashboard{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaDashboardArrayInput)(nil)).Elem(), GrafanaDashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaDashboardMapInput)(nil)).Elem(), GrafanaDashboardMap{})
	pulumi.RegisterOutputType(GrafanaDashboardOutput{})
	pulumi.RegisterOutputType(GrafanaDashboardArrayOutput{})
	pulumi.RegisterOutputType(GrafanaDashboardMapOutput{})
}
