// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LogAllocationConfig struct {
	pulumi.CustomResourceState

	DatasetAllocations LogAllocationConfigDatasetAllocationArrayOutput `pulumi:"datasetAllocations"`
	DefaultDataset     LogAllocationConfigDefaultDatasetOutput         `pulumi:"defaultDataset"`
}

// NewLogAllocationConfig registers a new resource with the given unique name, arguments, and options.
func NewLogAllocationConfig(ctx *pulumi.Context,
	name string, args *LogAllocationConfigArgs, opts ...pulumi.ResourceOption) (*LogAllocationConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultDataset == nil {
		return nil, errors.New("invalid value for required argument 'DefaultDataset'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogAllocationConfig
	err := ctx.RegisterResource("chronosphere:index/logAllocationConfig:LogAllocationConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogAllocationConfig gets an existing LogAllocationConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogAllocationConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogAllocationConfigState, opts ...pulumi.ResourceOption) (*LogAllocationConfig, error) {
	var resource LogAllocationConfig
	err := ctx.ReadResource("chronosphere:index/logAllocationConfig:LogAllocationConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogAllocationConfig resources.
type logAllocationConfigState struct {
	DatasetAllocations []LogAllocationConfigDatasetAllocation `pulumi:"datasetAllocations"`
	DefaultDataset     *LogAllocationConfigDefaultDataset     `pulumi:"defaultDataset"`
}

type LogAllocationConfigState struct {
	DatasetAllocations LogAllocationConfigDatasetAllocationArrayInput
	DefaultDataset     LogAllocationConfigDefaultDatasetPtrInput
}

func (LogAllocationConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*logAllocationConfigState)(nil)).Elem()
}

type logAllocationConfigArgs struct {
	DatasetAllocations []LogAllocationConfigDatasetAllocation `pulumi:"datasetAllocations"`
	DefaultDataset     LogAllocationConfigDefaultDataset      `pulumi:"defaultDataset"`
}

// The set of arguments for constructing a LogAllocationConfig resource.
type LogAllocationConfigArgs struct {
	DatasetAllocations LogAllocationConfigDatasetAllocationArrayInput
	DefaultDataset     LogAllocationConfigDefaultDatasetInput
}

func (LogAllocationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logAllocationConfigArgs)(nil)).Elem()
}

type LogAllocationConfigInput interface {
	pulumi.Input

	ToLogAllocationConfigOutput() LogAllocationConfigOutput
	ToLogAllocationConfigOutputWithContext(ctx context.Context) LogAllocationConfigOutput
}

func (*LogAllocationConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAllocationConfig)(nil)).Elem()
}

func (i *LogAllocationConfig) ToLogAllocationConfigOutput() LogAllocationConfigOutput {
	return i.ToLogAllocationConfigOutputWithContext(context.Background())
}

func (i *LogAllocationConfig) ToLogAllocationConfigOutputWithContext(ctx context.Context) LogAllocationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAllocationConfigOutput)
}

// LogAllocationConfigArrayInput is an input type that accepts LogAllocationConfigArray and LogAllocationConfigArrayOutput values.
// You can construct a concrete instance of `LogAllocationConfigArrayInput` via:
//
//	LogAllocationConfigArray{ LogAllocationConfigArgs{...} }
type LogAllocationConfigArrayInput interface {
	pulumi.Input

	ToLogAllocationConfigArrayOutput() LogAllocationConfigArrayOutput
	ToLogAllocationConfigArrayOutputWithContext(context.Context) LogAllocationConfigArrayOutput
}

type LogAllocationConfigArray []LogAllocationConfigInput

func (LogAllocationConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogAllocationConfig)(nil)).Elem()
}

func (i LogAllocationConfigArray) ToLogAllocationConfigArrayOutput() LogAllocationConfigArrayOutput {
	return i.ToLogAllocationConfigArrayOutputWithContext(context.Background())
}

func (i LogAllocationConfigArray) ToLogAllocationConfigArrayOutputWithContext(ctx context.Context) LogAllocationConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAllocationConfigArrayOutput)
}

// LogAllocationConfigMapInput is an input type that accepts LogAllocationConfigMap and LogAllocationConfigMapOutput values.
// You can construct a concrete instance of `LogAllocationConfigMapInput` via:
//
//	LogAllocationConfigMap{ "key": LogAllocationConfigArgs{...} }
type LogAllocationConfigMapInput interface {
	pulumi.Input

	ToLogAllocationConfigMapOutput() LogAllocationConfigMapOutput
	ToLogAllocationConfigMapOutputWithContext(context.Context) LogAllocationConfigMapOutput
}

type LogAllocationConfigMap map[string]LogAllocationConfigInput

func (LogAllocationConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogAllocationConfig)(nil)).Elem()
}

func (i LogAllocationConfigMap) ToLogAllocationConfigMapOutput() LogAllocationConfigMapOutput {
	return i.ToLogAllocationConfigMapOutputWithContext(context.Background())
}

func (i LogAllocationConfigMap) ToLogAllocationConfigMapOutputWithContext(ctx context.Context) LogAllocationConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAllocationConfigMapOutput)
}

type LogAllocationConfigOutput struct{ *pulumi.OutputState }

func (LogAllocationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAllocationConfig)(nil)).Elem()
}

func (o LogAllocationConfigOutput) ToLogAllocationConfigOutput() LogAllocationConfigOutput {
	return o
}

func (o LogAllocationConfigOutput) ToLogAllocationConfigOutputWithContext(ctx context.Context) LogAllocationConfigOutput {
	return o
}

func (o LogAllocationConfigOutput) DatasetAllocations() LogAllocationConfigDatasetAllocationArrayOutput {
	return o.ApplyT(func(v *LogAllocationConfig) LogAllocationConfigDatasetAllocationArrayOutput {
		return v.DatasetAllocations
	}).(LogAllocationConfigDatasetAllocationArrayOutput)
}

func (o LogAllocationConfigOutput) DefaultDataset() LogAllocationConfigDefaultDatasetOutput {
	return o.ApplyT(func(v *LogAllocationConfig) LogAllocationConfigDefaultDatasetOutput { return v.DefaultDataset }).(LogAllocationConfigDefaultDatasetOutput)
}

type LogAllocationConfigArrayOutput struct{ *pulumi.OutputState }

func (LogAllocationConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogAllocationConfig)(nil)).Elem()
}

func (o LogAllocationConfigArrayOutput) ToLogAllocationConfigArrayOutput() LogAllocationConfigArrayOutput {
	return o
}

func (o LogAllocationConfigArrayOutput) ToLogAllocationConfigArrayOutputWithContext(ctx context.Context) LogAllocationConfigArrayOutput {
	return o
}

func (o LogAllocationConfigArrayOutput) Index(i pulumi.IntInput) LogAllocationConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogAllocationConfig {
		return vs[0].([]*LogAllocationConfig)[vs[1].(int)]
	}).(LogAllocationConfigOutput)
}

type LogAllocationConfigMapOutput struct{ *pulumi.OutputState }

func (LogAllocationConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogAllocationConfig)(nil)).Elem()
}

func (o LogAllocationConfigMapOutput) ToLogAllocationConfigMapOutput() LogAllocationConfigMapOutput {
	return o
}

func (o LogAllocationConfigMapOutput) ToLogAllocationConfigMapOutputWithContext(ctx context.Context) LogAllocationConfigMapOutput {
	return o
}

func (o LogAllocationConfigMapOutput) MapIndex(k pulumi.StringInput) LogAllocationConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogAllocationConfig {
		return vs[0].(map[string]*LogAllocationConfig)[vs[1].(string)]
	}).(LogAllocationConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogAllocationConfigInput)(nil)).Elem(), &LogAllocationConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogAllocationConfigArrayInput)(nil)).Elem(), LogAllocationConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogAllocationConfigMapInput)(nil)).Elem(), LogAllocationConfigMap{})
	pulumi.RegisterOutputType(LogAllocationConfigOutput{})
	pulumi.RegisterOutputType(LogAllocationConfigArrayOutput{})
	pulumi.RegisterOutputType(LogAllocationConfigMapOutput{})
}
