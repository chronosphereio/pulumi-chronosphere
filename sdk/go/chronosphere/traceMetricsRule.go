// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TraceMetricsRule struct {
	pulumi.CustomResourceState

	GroupBies               TraceMetricsRuleGroupByArrayOutput `pulumi:"groupBies"`
	HistogramBucketsSeconds pulumi.Float64ArrayOutput          `pulumi:"histogramBucketsSeconds"`
	MetricLabels            pulumi.StringMapOutput             `pulumi:"metricLabels"`
	MetricName              pulumi.StringOutput                `pulumi:"metricName"`
	Name                    pulumi.StringOutput                `pulumi:"name"`
	Slug                    pulumi.StringOutput                `pulumi:"slug"`
	TraceFilter             TraceMetricsRuleTraceFilterOutput  `pulumi:"traceFilter"`
}

// NewTraceMetricsRule registers a new resource with the given unique name, arguments, and options.
func NewTraceMetricsRule(ctx *pulumi.Context,
	name string, args *TraceMetricsRuleArgs, opts ...pulumi.ResourceOption) (*TraceMetricsRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetricName == nil {
		return nil, errors.New("invalid value for required argument 'MetricName'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.TraceFilter == nil {
		return nil, errors.New("invalid value for required argument 'TraceFilter'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TraceMetricsRule
	err := ctx.RegisterResource("chronosphere:index/traceMetricsRule:TraceMetricsRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTraceMetricsRule gets an existing TraceMetricsRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTraceMetricsRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TraceMetricsRuleState, opts ...pulumi.ResourceOption) (*TraceMetricsRule, error) {
	var resource TraceMetricsRule
	err := ctx.ReadResource("chronosphere:index/traceMetricsRule:TraceMetricsRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TraceMetricsRule resources.
type traceMetricsRuleState struct {
	GroupBies               []TraceMetricsRuleGroupBy    `pulumi:"groupBies"`
	HistogramBucketsSeconds []float64                    `pulumi:"histogramBucketsSeconds"`
	MetricLabels            map[string]string            `pulumi:"metricLabels"`
	MetricName              *string                      `pulumi:"metricName"`
	Name                    *string                      `pulumi:"name"`
	Slug                    *string                      `pulumi:"slug"`
	TraceFilter             *TraceMetricsRuleTraceFilter `pulumi:"traceFilter"`
}

type TraceMetricsRuleState struct {
	GroupBies               TraceMetricsRuleGroupByArrayInput
	HistogramBucketsSeconds pulumi.Float64ArrayInput
	MetricLabels            pulumi.StringMapInput
	MetricName              pulumi.StringPtrInput
	Name                    pulumi.StringPtrInput
	Slug                    pulumi.StringPtrInput
	TraceFilter             TraceMetricsRuleTraceFilterPtrInput
}

func (TraceMetricsRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*traceMetricsRuleState)(nil)).Elem()
}

type traceMetricsRuleArgs struct {
	GroupBies               []TraceMetricsRuleGroupBy   `pulumi:"groupBies"`
	HistogramBucketsSeconds []float64                   `pulumi:"histogramBucketsSeconds"`
	MetricLabels            map[string]string           `pulumi:"metricLabels"`
	MetricName              string                      `pulumi:"metricName"`
	Name                    string                      `pulumi:"name"`
	Slug                    *string                     `pulumi:"slug"`
	TraceFilter             TraceMetricsRuleTraceFilter `pulumi:"traceFilter"`
}

// The set of arguments for constructing a TraceMetricsRule resource.
type TraceMetricsRuleArgs struct {
	GroupBies               TraceMetricsRuleGroupByArrayInput
	HistogramBucketsSeconds pulumi.Float64ArrayInput
	MetricLabels            pulumi.StringMapInput
	MetricName              pulumi.StringInput
	Name                    pulumi.StringInput
	Slug                    pulumi.StringPtrInput
	TraceFilter             TraceMetricsRuleTraceFilterInput
}

func (TraceMetricsRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*traceMetricsRuleArgs)(nil)).Elem()
}

type TraceMetricsRuleInput interface {
	pulumi.Input

	ToTraceMetricsRuleOutput() TraceMetricsRuleOutput
	ToTraceMetricsRuleOutputWithContext(ctx context.Context) TraceMetricsRuleOutput
}

func (*TraceMetricsRule) ElementType() reflect.Type {
	return reflect.TypeOf((**TraceMetricsRule)(nil)).Elem()
}

func (i *TraceMetricsRule) ToTraceMetricsRuleOutput() TraceMetricsRuleOutput {
	return i.ToTraceMetricsRuleOutputWithContext(context.Background())
}

func (i *TraceMetricsRule) ToTraceMetricsRuleOutputWithContext(ctx context.Context) TraceMetricsRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TraceMetricsRuleOutput)
}

// TraceMetricsRuleArrayInput is an input type that accepts TraceMetricsRuleArray and TraceMetricsRuleArrayOutput values.
// You can construct a concrete instance of `TraceMetricsRuleArrayInput` via:
//
//	TraceMetricsRuleArray{ TraceMetricsRuleArgs{...} }
type TraceMetricsRuleArrayInput interface {
	pulumi.Input

	ToTraceMetricsRuleArrayOutput() TraceMetricsRuleArrayOutput
	ToTraceMetricsRuleArrayOutputWithContext(context.Context) TraceMetricsRuleArrayOutput
}

type TraceMetricsRuleArray []TraceMetricsRuleInput

func (TraceMetricsRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TraceMetricsRule)(nil)).Elem()
}

func (i TraceMetricsRuleArray) ToTraceMetricsRuleArrayOutput() TraceMetricsRuleArrayOutput {
	return i.ToTraceMetricsRuleArrayOutputWithContext(context.Background())
}

func (i TraceMetricsRuleArray) ToTraceMetricsRuleArrayOutputWithContext(ctx context.Context) TraceMetricsRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TraceMetricsRuleArrayOutput)
}

// TraceMetricsRuleMapInput is an input type that accepts TraceMetricsRuleMap and TraceMetricsRuleMapOutput values.
// You can construct a concrete instance of `TraceMetricsRuleMapInput` via:
//
//	TraceMetricsRuleMap{ "key": TraceMetricsRuleArgs{...} }
type TraceMetricsRuleMapInput interface {
	pulumi.Input

	ToTraceMetricsRuleMapOutput() TraceMetricsRuleMapOutput
	ToTraceMetricsRuleMapOutputWithContext(context.Context) TraceMetricsRuleMapOutput
}

type TraceMetricsRuleMap map[string]TraceMetricsRuleInput

func (TraceMetricsRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TraceMetricsRule)(nil)).Elem()
}

func (i TraceMetricsRuleMap) ToTraceMetricsRuleMapOutput() TraceMetricsRuleMapOutput {
	return i.ToTraceMetricsRuleMapOutputWithContext(context.Background())
}

func (i TraceMetricsRuleMap) ToTraceMetricsRuleMapOutputWithContext(ctx context.Context) TraceMetricsRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TraceMetricsRuleMapOutput)
}

type TraceMetricsRuleOutput struct{ *pulumi.OutputState }

func (TraceMetricsRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TraceMetricsRule)(nil)).Elem()
}

func (o TraceMetricsRuleOutput) ToTraceMetricsRuleOutput() TraceMetricsRuleOutput {
	return o
}

func (o TraceMetricsRuleOutput) ToTraceMetricsRuleOutputWithContext(ctx context.Context) TraceMetricsRuleOutput {
	return o
}

func (o TraceMetricsRuleOutput) GroupBies() TraceMetricsRuleGroupByArrayOutput {
	return o.ApplyT(func(v *TraceMetricsRule) TraceMetricsRuleGroupByArrayOutput { return v.GroupBies }).(TraceMetricsRuleGroupByArrayOutput)
}

func (o TraceMetricsRuleOutput) HistogramBucketsSeconds() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v *TraceMetricsRule) pulumi.Float64ArrayOutput { return v.HistogramBucketsSeconds }).(pulumi.Float64ArrayOutput)
}

func (o TraceMetricsRuleOutput) MetricLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TraceMetricsRule) pulumi.StringMapOutput { return v.MetricLabels }).(pulumi.StringMapOutput)
}

func (o TraceMetricsRuleOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v *TraceMetricsRule) pulumi.StringOutput { return v.MetricName }).(pulumi.StringOutput)
}

func (o TraceMetricsRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TraceMetricsRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TraceMetricsRuleOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *TraceMetricsRule) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o TraceMetricsRuleOutput) TraceFilter() TraceMetricsRuleTraceFilterOutput {
	return o.ApplyT(func(v *TraceMetricsRule) TraceMetricsRuleTraceFilterOutput { return v.TraceFilter }).(TraceMetricsRuleTraceFilterOutput)
}

type TraceMetricsRuleArrayOutput struct{ *pulumi.OutputState }

func (TraceMetricsRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TraceMetricsRule)(nil)).Elem()
}

func (o TraceMetricsRuleArrayOutput) ToTraceMetricsRuleArrayOutput() TraceMetricsRuleArrayOutput {
	return o
}

func (o TraceMetricsRuleArrayOutput) ToTraceMetricsRuleArrayOutputWithContext(ctx context.Context) TraceMetricsRuleArrayOutput {
	return o
}

func (o TraceMetricsRuleArrayOutput) Index(i pulumi.IntInput) TraceMetricsRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TraceMetricsRule {
		return vs[0].([]*TraceMetricsRule)[vs[1].(int)]
	}).(TraceMetricsRuleOutput)
}

type TraceMetricsRuleMapOutput struct{ *pulumi.OutputState }

func (TraceMetricsRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TraceMetricsRule)(nil)).Elem()
}

func (o TraceMetricsRuleMapOutput) ToTraceMetricsRuleMapOutput() TraceMetricsRuleMapOutput {
	return o
}

func (o TraceMetricsRuleMapOutput) ToTraceMetricsRuleMapOutputWithContext(ctx context.Context) TraceMetricsRuleMapOutput {
	return o
}

func (o TraceMetricsRuleMapOutput) MapIndex(k pulumi.StringInput) TraceMetricsRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TraceMetricsRule {
		return vs[0].(map[string]*TraceMetricsRule)[vs[1].(string)]
	}).(TraceMetricsRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TraceMetricsRuleInput)(nil)).Elem(), &TraceMetricsRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*TraceMetricsRuleArrayInput)(nil)).Elem(), TraceMetricsRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TraceMetricsRuleMapInput)(nil)).Elem(), TraceMetricsRuleMap{})
	pulumi.RegisterOutputType(TraceMetricsRuleOutput{})
	pulumi.RegisterOutputType(TraceMetricsRuleArrayOutput{})
	pulumi.RegisterOutputType(TraceMetricsRuleMapOutput{})
}
