// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConsumptionConfig struct {
	pulumi.CustomResourceState

	Partitions ConsumptionConfigPartitionArrayOutput `pulumi:"partitions"`
}

// NewConsumptionConfig registers a new resource with the given unique name, arguments, and options.
func NewConsumptionConfig(ctx *pulumi.Context,
	name string, args *ConsumptionConfigArgs, opts ...pulumi.ResourceOption) (*ConsumptionConfig, error) {
	if args == nil {
		args = &ConsumptionConfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConsumptionConfig
	err := ctx.RegisterResource("chronosphere:index/consumptionConfig:ConsumptionConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsumptionConfig gets an existing ConsumptionConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumptionConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsumptionConfigState, opts ...pulumi.ResourceOption) (*ConsumptionConfig, error) {
	var resource ConsumptionConfig
	err := ctx.ReadResource("chronosphere:index/consumptionConfig:ConsumptionConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsumptionConfig resources.
type consumptionConfigState struct {
	Partitions []ConsumptionConfigPartition `pulumi:"partitions"`
}

type ConsumptionConfigState struct {
	Partitions ConsumptionConfigPartitionArrayInput
}

func (ConsumptionConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*consumptionConfigState)(nil)).Elem()
}

type consumptionConfigArgs struct {
	Partitions []ConsumptionConfigPartition `pulumi:"partitions"`
}

// The set of arguments for constructing a ConsumptionConfig resource.
type ConsumptionConfigArgs struct {
	Partitions ConsumptionConfigPartitionArrayInput
}

func (ConsumptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consumptionConfigArgs)(nil)).Elem()
}

type ConsumptionConfigInput interface {
	pulumi.Input

	ToConsumptionConfigOutput() ConsumptionConfigOutput
	ToConsumptionConfigOutputWithContext(ctx context.Context) ConsumptionConfigOutput
}

func (*ConsumptionConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumptionConfig)(nil)).Elem()
}

func (i *ConsumptionConfig) ToConsumptionConfigOutput() ConsumptionConfigOutput {
	return i.ToConsumptionConfigOutputWithContext(context.Background())
}

func (i *ConsumptionConfig) ToConsumptionConfigOutputWithContext(ctx context.Context) ConsumptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionConfigOutput)
}

// ConsumptionConfigArrayInput is an input type that accepts ConsumptionConfigArray and ConsumptionConfigArrayOutput values.
// You can construct a concrete instance of `ConsumptionConfigArrayInput` via:
//
//	ConsumptionConfigArray{ ConsumptionConfigArgs{...} }
type ConsumptionConfigArrayInput interface {
	pulumi.Input

	ToConsumptionConfigArrayOutput() ConsumptionConfigArrayOutput
	ToConsumptionConfigArrayOutputWithContext(context.Context) ConsumptionConfigArrayOutput
}

type ConsumptionConfigArray []ConsumptionConfigInput

func (ConsumptionConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumptionConfig)(nil)).Elem()
}

func (i ConsumptionConfigArray) ToConsumptionConfigArrayOutput() ConsumptionConfigArrayOutput {
	return i.ToConsumptionConfigArrayOutputWithContext(context.Background())
}

func (i ConsumptionConfigArray) ToConsumptionConfigArrayOutputWithContext(ctx context.Context) ConsumptionConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionConfigArrayOutput)
}

// ConsumptionConfigMapInput is an input type that accepts ConsumptionConfigMap and ConsumptionConfigMapOutput values.
// You can construct a concrete instance of `ConsumptionConfigMapInput` via:
//
//	ConsumptionConfigMap{ "key": ConsumptionConfigArgs{...} }
type ConsumptionConfigMapInput interface {
	pulumi.Input

	ToConsumptionConfigMapOutput() ConsumptionConfigMapOutput
	ToConsumptionConfigMapOutputWithContext(context.Context) ConsumptionConfigMapOutput
}

type ConsumptionConfigMap map[string]ConsumptionConfigInput

func (ConsumptionConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumptionConfig)(nil)).Elem()
}

func (i ConsumptionConfigMap) ToConsumptionConfigMapOutput() ConsumptionConfigMapOutput {
	return i.ToConsumptionConfigMapOutputWithContext(context.Background())
}

func (i ConsumptionConfigMap) ToConsumptionConfigMapOutputWithContext(ctx context.Context) ConsumptionConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionConfigMapOutput)
}

type ConsumptionConfigOutput struct{ *pulumi.OutputState }

func (ConsumptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumptionConfig)(nil)).Elem()
}

func (o ConsumptionConfigOutput) ToConsumptionConfigOutput() ConsumptionConfigOutput {
	return o
}

func (o ConsumptionConfigOutput) ToConsumptionConfigOutputWithContext(ctx context.Context) ConsumptionConfigOutput {
	return o
}

func (o ConsumptionConfigOutput) Partitions() ConsumptionConfigPartitionArrayOutput {
	return o.ApplyT(func(v *ConsumptionConfig) ConsumptionConfigPartitionArrayOutput { return v.Partitions }).(ConsumptionConfigPartitionArrayOutput)
}

type ConsumptionConfigArrayOutput struct{ *pulumi.OutputState }

func (ConsumptionConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumptionConfig)(nil)).Elem()
}

func (o ConsumptionConfigArrayOutput) ToConsumptionConfigArrayOutput() ConsumptionConfigArrayOutput {
	return o
}

func (o ConsumptionConfigArrayOutput) ToConsumptionConfigArrayOutputWithContext(ctx context.Context) ConsumptionConfigArrayOutput {
	return o
}

func (o ConsumptionConfigArrayOutput) Index(i pulumi.IntInput) ConsumptionConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConsumptionConfig {
		return vs[0].([]*ConsumptionConfig)[vs[1].(int)]
	}).(ConsumptionConfigOutput)
}

type ConsumptionConfigMapOutput struct{ *pulumi.OutputState }

func (ConsumptionConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumptionConfig)(nil)).Elem()
}

func (o ConsumptionConfigMapOutput) ToConsumptionConfigMapOutput() ConsumptionConfigMapOutput {
	return o
}

func (o ConsumptionConfigMapOutput) ToConsumptionConfigMapOutputWithContext(ctx context.Context) ConsumptionConfigMapOutput {
	return o
}

func (o ConsumptionConfigMapOutput) MapIndex(k pulumi.StringInput) ConsumptionConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConsumptionConfig {
		return vs[0].(map[string]*ConsumptionConfig)[vs[1].(string)]
	}).(ConsumptionConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumptionConfigInput)(nil)).Elem(), &ConsumptionConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumptionConfigArrayInput)(nil)).Elem(), ConsumptionConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumptionConfigMapInput)(nil)).Elem(), ConsumptionConfigMap{})
	pulumi.RegisterOutputType(ConsumptionConfigOutput{})
	pulumi.RegisterOutputType(ConsumptionConfigArrayOutput{})
	pulumi.RegisterOutputType(ConsumptionConfigMapOutput{})
}
