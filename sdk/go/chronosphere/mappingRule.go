// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MappingRule struct {
	pulumi.CustomResourceState

	Aggregations pulumi.StringPtrOutput `pulumi:"aggregations"`
	BucketId     pulumi.StringPtrOutput `pulumi:"bucketId"`
	Drop         pulumi.BoolPtrOutput   `pulumi:"drop"`
	// Deprecated: drop timestamp is no longer supported
	DropTimestamp pulumi.BoolPtrOutput   `pulumi:"dropTimestamp"`
	Filter        pulumi.StringOutput    `pulumi:"filter"`
	Interval      pulumi.StringOutput    `pulumi:"interval"`
	Mode          pulumi.StringPtrOutput `pulumi:"mode"`
	Name          pulumi.StringOutput    `pulumi:"name"`
	Slug          pulumi.StringOutput    `pulumi:"slug"`
	// Deprecated: use `interval` instead
	StoragePolicy MappingRuleStoragePolicyPtrOutput `pulumi:"storagePolicy"`
}

// NewMappingRule registers a new resource with the given unique name, arguments, and options.
func NewMappingRule(ctx *pulumi.Context,
	name string, args *MappingRuleArgs, opts ...pulumi.ResourceOption) (*MappingRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MappingRule
	err := ctx.RegisterResource("chronosphere:index/mappingRule:MappingRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMappingRule gets an existing MappingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMappingRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MappingRuleState, opts ...pulumi.ResourceOption) (*MappingRule, error) {
	var resource MappingRule
	err := ctx.ReadResource("chronosphere:index/mappingRule:MappingRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MappingRule resources.
type mappingRuleState struct {
	Aggregations *string `pulumi:"aggregations"`
	BucketId     *string `pulumi:"bucketId"`
	Drop         *bool   `pulumi:"drop"`
	// Deprecated: drop timestamp is no longer supported
	DropTimestamp *bool   `pulumi:"dropTimestamp"`
	Filter        *string `pulumi:"filter"`
	Interval      *string `pulumi:"interval"`
	Mode          *string `pulumi:"mode"`
	Name          *string `pulumi:"name"`
	Slug          *string `pulumi:"slug"`
	// Deprecated: use `interval` instead
	StoragePolicy *MappingRuleStoragePolicy `pulumi:"storagePolicy"`
}

type MappingRuleState struct {
	Aggregations pulumi.StringPtrInput
	BucketId     pulumi.StringPtrInput
	Drop         pulumi.BoolPtrInput
	// Deprecated: drop timestamp is no longer supported
	DropTimestamp pulumi.BoolPtrInput
	Filter        pulumi.StringPtrInput
	Interval      pulumi.StringPtrInput
	Mode          pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	Slug          pulumi.StringPtrInput
	// Deprecated: use `interval` instead
	StoragePolicy MappingRuleStoragePolicyPtrInput
}

func (MappingRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*mappingRuleState)(nil)).Elem()
}

type mappingRuleArgs struct {
	Aggregations *string `pulumi:"aggregations"`
	BucketId     *string `pulumi:"bucketId"`
	Drop         *bool   `pulumi:"drop"`
	// Deprecated: drop timestamp is no longer supported
	DropTimestamp *bool   `pulumi:"dropTimestamp"`
	Filter        string  `pulumi:"filter"`
	Interval      *string `pulumi:"interval"`
	Mode          *string `pulumi:"mode"`
	Name          string  `pulumi:"name"`
	Slug          *string `pulumi:"slug"`
	// Deprecated: use `interval` instead
	StoragePolicy *MappingRuleStoragePolicy `pulumi:"storagePolicy"`
}

// The set of arguments for constructing a MappingRule resource.
type MappingRuleArgs struct {
	Aggregations pulumi.StringPtrInput
	BucketId     pulumi.StringPtrInput
	Drop         pulumi.BoolPtrInput
	// Deprecated: drop timestamp is no longer supported
	DropTimestamp pulumi.BoolPtrInput
	Filter        pulumi.StringInput
	Interval      pulumi.StringPtrInput
	Mode          pulumi.StringPtrInput
	Name          pulumi.StringInput
	Slug          pulumi.StringPtrInput
	// Deprecated: use `interval` instead
	StoragePolicy MappingRuleStoragePolicyPtrInput
}

func (MappingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mappingRuleArgs)(nil)).Elem()
}

type MappingRuleInput interface {
	pulumi.Input

	ToMappingRuleOutput() MappingRuleOutput
	ToMappingRuleOutputWithContext(ctx context.Context) MappingRuleOutput
}

func (*MappingRule) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingRule)(nil)).Elem()
}

func (i *MappingRule) ToMappingRuleOutput() MappingRuleOutput {
	return i.ToMappingRuleOutputWithContext(context.Background())
}

func (i *MappingRule) ToMappingRuleOutputWithContext(ctx context.Context) MappingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingRuleOutput)
}

// MappingRuleArrayInput is an input type that accepts MappingRuleArray and MappingRuleArrayOutput values.
// You can construct a concrete instance of `MappingRuleArrayInput` via:
//
//	MappingRuleArray{ MappingRuleArgs{...} }
type MappingRuleArrayInput interface {
	pulumi.Input

	ToMappingRuleArrayOutput() MappingRuleArrayOutput
	ToMappingRuleArrayOutputWithContext(context.Context) MappingRuleArrayOutput
}

type MappingRuleArray []MappingRuleInput

func (MappingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MappingRule)(nil)).Elem()
}

func (i MappingRuleArray) ToMappingRuleArrayOutput() MappingRuleArrayOutput {
	return i.ToMappingRuleArrayOutputWithContext(context.Background())
}

func (i MappingRuleArray) ToMappingRuleArrayOutputWithContext(ctx context.Context) MappingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingRuleArrayOutput)
}

// MappingRuleMapInput is an input type that accepts MappingRuleMap and MappingRuleMapOutput values.
// You can construct a concrete instance of `MappingRuleMapInput` via:
//
//	MappingRuleMap{ "key": MappingRuleArgs{...} }
type MappingRuleMapInput interface {
	pulumi.Input

	ToMappingRuleMapOutput() MappingRuleMapOutput
	ToMappingRuleMapOutputWithContext(context.Context) MappingRuleMapOutput
}

type MappingRuleMap map[string]MappingRuleInput

func (MappingRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MappingRule)(nil)).Elem()
}

func (i MappingRuleMap) ToMappingRuleMapOutput() MappingRuleMapOutput {
	return i.ToMappingRuleMapOutputWithContext(context.Background())
}

func (i MappingRuleMap) ToMappingRuleMapOutputWithContext(ctx context.Context) MappingRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingRuleMapOutput)
}

type MappingRuleOutput struct{ *pulumi.OutputState }

func (MappingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingRule)(nil)).Elem()
}

func (o MappingRuleOutput) ToMappingRuleOutput() MappingRuleOutput {
	return o
}

func (o MappingRuleOutput) ToMappingRuleOutputWithContext(ctx context.Context) MappingRuleOutput {
	return o
}

func (o MappingRuleOutput) Aggregations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringPtrOutput { return v.Aggregations }).(pulumi.StringPtrOutput)
}

func (o MappingRuleOutput) BucketId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringPtrOutput { return v.BucketId }).(pulumi.StringPtrOutput)
}

func (o MappingRuleOutput) Drop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.BoolPtrOutput { return v.Drop }).(pulumi.BoolPtrOutput)
}

// Deprecated: drop timestamp is no longer supported
func (o MappingRuleOutput) DropTimestamp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.BoolPtrOutput { return v.DropTimestamp }).(pulumi.BoolPtrOutput)
}

func (o MappingRuleOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

func (o MappingRuleOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringOutput { return v.Interval }).(pulumi.StringOutput)
}

func (o MappingRuleOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o MappingRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MappingRuleOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Deprecated: use `interval` instead
func (o MappingRuleOutput) StoragePolicy() MappingRuleStoragePolicyPtrOutput {
	return o.ApplyT(func(v *MappingRule) MappingRuleStoragePolicyPtrOutput { return v.StoragePolicy }).(MappingRuleStoragePolicyPtrOutput)
}

type MappingRuleArrayOutput struct{ *pulumi.OutputState }

func (MappingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MappingRule)(nil)).Elem()
}

func (o MappingRuleArrayOutput) ToMappingRuleArrayOutput() MappingRuleArrayOutput {
	return o
}

func (o MappingRuleArrayOutput) ToMappingRuleArrayOutputWithContext(ctx context.Context) MappingRuleArrayOutput {
	return o
}

func (o MappingRuleArrayOutput) Index(i pulumi.IntInput) MappingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MappingRule {
		return vs[0].([]*MappingRule)[vs[1].(int)]
	}).(MappingRuleOutput)
}

type MappingRuleMapOutput struct{ *pulumi.OutputState }

func (MappingRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MappingRule)(nil)).Elem()
}

func (o MappingRuleMapOutput) ToMappingRuleMapOutput() MappingRuleMapOutput {
	return o
}

func (o MappingRuleMapOutput) ToMappingRuleMapOutputWithContext(ctx context.Context) MappingRuleMapOutput {
	return o
}

func (o MappingRuleMapOutput) MapIndex(k pulumi.StringInput) MappingRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MappingRule {
		return vs[0].(map[string]*MappingRule)[vs[1].(string)]
	}).(MappingRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MappingRuleInput)(nil)).Elem(), &MappingRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*MappingRuleArrayInput)(nil)).Elem(), MappingRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MappingRuleMapInput)(nil)).Elem(), MappingRuleMap{})
	pulumi.RegisterOutputType(MappingRuleOutput{})
	pulumi.RegisterOutputType(MappingRuleArrayOutput{})
	pulumi.RegisterOutputType(MappingRuleMapOutput{})
}
