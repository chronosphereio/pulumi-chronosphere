// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LogIngestConfig struct {
	pulumi.CustomResourceState

	Parsers LogIngestConfigParserArrayOutput `pulumi:"parsers"`
}

// NewLogIngestConfig registers a new resource with the given unique name, arguments, and options.
func NewLogIngestConfig(ctx *pulumi.Context,
	name string, args *LogIngestConfigArgs, opts ...pulumi.ResourceOption) (*LogIngestConfig, error) {
	if args == nil {
		args = &LogIngestConfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogIngestConfig
	err := ctx.RegisterResource("chronosphere:index/logIngestConfig:LogIngestConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogIngestConfig gets an existing LogIngestConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogIngestConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogIngestConfigState, opts ...pulumi.ResourceOption) (*LogIngestConfig, error) {
	var resource LogIngestConfig
	err := ctx.ReadResource("chronosphere:index/logIngestConfig:LogIngestConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogIngestConfig resources.
type logIngestConfigState struct {
	Parsers []LogIngestConfigParser `pulumi:"parsers"`
}

type LogIngestConfigState struct {
	Parsers LogIngestConfigParserArrayInput
}

func (LogIngestConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*logIngestConfigState)(nil)).Elem()
}

type logIngestConfigArgs struct {
	Parsers []LogIngestConfigParser `pulumi:"parsers"`
}

// The set of arguments for constructing a LogIngestConfig resource.
type LogIngestConfigArgs struct {
	Parsers LogIngestConfigParserArrayInput
}

func (LogIngestConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logIngestConfigArgs)(nil)).Elem()
}

type LogIngestConfigInput interface {
	pulumi.Input

	ToLogIngestConfigOutput() LogIngestConfigOutput
	ToLogIngestConfigOutputWithContext(ctx context.Context) LogIngestConfigOutput
}

func (*LogIngestConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**LogIngestConfig)(nil)).Elem()
}

func (i *LogIngestConfig) ToLogIngestConfigOutput() LogIngestConfigOutput {
	return i.ToLogIngestConfigOutputWithContext(context.Background())
}

func (i *LogIngestConfig) ToLogIngestConfigOutputWithContext(ctx context.Context) LogIngestConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogIngestConfigOutput)
}

// LogIngestConfigArrayInput is an input type that accepts LogIngestConfigArray and LogIngestConfigArrayOutput values.
// You can construct a concrete instance of `LogIngestConfigArrayInput` via:
//
//	LogIngestConfigArray{ LogIngestConfigArgs{...} }
type LogIngestConfigArrayInput interface {
	pulumi.Input

	ToLogIngestConfigArrayOutput() LogIngestConfigArrayOutput
	ToLogIngestConfigArrayOutputWithContext(context.Context) LogIngestConfigArrayOutput
}

type LogIngestConfigArray []LogIngestConfigInput

func (LogIngestConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogIngestConfig)(nil)).Elem()
}

func (i LogIngestConfigArray) ToLogIngestConfigArrayOutput() LogIngestConfigArrayOutput {
	return i.ToLogIngestConfigArrayOutputWithContext(context.Background())
}

func (i LogIngestConfigArray) ToLogIngestConfigArrayOutputWithContext(ctx context.Context) LogIngestConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogIngestConfigArrayOutput)
}

// LogIngestConfigMapInput is an input type that accepts LogIngestConfigMap and LogIngestConfigMapOutput values.
// You can construct a concrete instance of `LogIngestConfigMapInput` via:
//
//	LogIngestConfigMap{ "key": LogIngestConfigArgs{...} }
type LogIngestConfigMapInput interface {
	pulumi.Input

	ToLogIngestConfigMapOutput() LogIngestConfigMapOutput
	ToLogIngestConfigMapOutputWithContext(context.Context) LogIngestConfigMapOutput
}

type LogIngestConfigMap map[string]LogIngestConfigInput

func (LogIngestConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogIngestConfig)(nil)).Elem()
}

func (i LogIngestConfigMap) ToLogIngestConfigMapOutput() LogIngestConfigMapOutput {
	return i.ToLogIngestConfigMapOutputWithContext(context.Background())
}

func (i LogIngestConfigMap) ToLogIngestConfigMapOutputWithContext(ctx context.Context) LogIngestConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogIngestConfigMapOutput)
}

type LogIngestConfigOutput struct{ *pulumi.OutputState }

func (LogIngestConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogIngestConfig)(nil)).Elem()
}

func (o LogIngestConfigOutput) ToLogIngestConfigOutput() LogIngestConfigOutput {
	return o
}

func (o LogIngestConfigOutput) ToLogIngestConfigOutputWithContext(ctx context.Context) LogIngestConfigOutput {
	return o
}

func (o LogIngestConfigOutput) Parsers() LogIngestConfigParserArrayOutput {
	return o.ApplyT(func(v *LogIngestConfig) LogIngestConfigParserArrayOutput { return v.Parsers }).(LogIngestConfigParserArrayOutput)
}

type LogIngestConfigArrayOutput struct{ *pulumi.OutputState }

func (LogIngestConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogIngestConfig)(nil)).Elem()
}

func (o LogIngestConfigArrayOutput) ToLogIngestConfigArrayOutput() LogIngestConfigArrayOutput {
	return o
}

func (o LogIngestConfigArrayOutput) ToLogIngestConfigArrayOutputWithContext(ctx context.Context) LogIngestConfigArrayOutput {
	return o
}

func (o LogIngestConfigArrayOutput) Index(i pulumi.IntInput) LogIngestConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogIngestConfig {
		return vs[0].([]*LogIngestConfig)[vs[1].(int)]
	}).(LogIngestConfigOutput)
}

type LogIngestConfigMapOutput struct{ *pulumi.OutputState }

func (LogIngestConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogIngestConfig)(nil)).Elem()
}

func (o LogIngestConfigMapOutput) ToLogIngestConfigMapOutput() LogIngestConfigMapOutput {
	return o
}

func (o LogIngestConfigMapOutput) ToLogIngestConfigMapOutputWithContext(ctx context.Context) LogIngestConfigMapOutput {
	return o
}

func (o LogIngestConfigMapOutput) MapIndex(k pulumi.StringInput) LogIngestConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogIngestConfig {
		return vs[0].(map[string]*LogIngestConfig)[vs[1].(string)]
	}).(LogIngestConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogIngestConfigInput)(nil)).Elem(), &LogIngestConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogIngestConfigArrayInput)(nil)).Elem(), LogIngestConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogIngestConfigMapInput)(nil)).Elem(), LogIngestConfigMap{})
	pulumi.RegisterOutputType(LogIngestConfigOutput{})
	pulumi.RegisterOutputType(LogIngestConfigArrayOutput{})
	pulumi.RegisterOutputType(LogIngestConfigMapOutput{})
}
