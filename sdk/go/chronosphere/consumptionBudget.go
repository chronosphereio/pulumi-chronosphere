// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronosphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/chronosphereio/pulumi-chronosphere/sdk/go/chronosphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConsumptionBudget struct {
	pulumi.CustomResourceState

	AlertActionConfig    ConsumptionBudgetAlertActionConfigPtrOutput `pulumi:"alertActionConfig"`
	ConsumptionConfigId  pulumi.StringOutput                         `pulumi:"consumptionConfigId"`
	DefaultPriority      pulumi.IntPtrOutput                         `pulumi:"defaultPriority"`
	Name                 pulumi.StringOutput                         `pulumi:"name"`
	NotificationPolicyId pulumi.StringPtrOutput                      `pulumi:"notificationPolicyId"`
	PartitionSlugPath    pulumi.StringPtrOutput                      `pulumi:"partitionSlugPath"`
	Priorities           ConsumptionBudgetPriorityArrayOutput        `pulumi:"priorities"`
	Resource             pulumi.StringPtrOutput                      `pulumi:"resource"`
	Slug                 pulumi.StringOutput                         `pulumi:"slug"`
	Thresholds           ConsumptionBudgetThresholdArrayOutput       `pulumi:"thresholds"`
}

// NewConsumptionBudget registers a new resource with the given unique name, arguments, and options.
func NewConsumptionBudget(ctx *pulumi.Context,
	name string, args *ConsumptionBudgetArgs, opts ...pulumi.ResourceOption) (*ConsumptionBudget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumptionConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConsumptionConfigId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConsumptionBudget
	err := ctx.RegisterResource("chronosphere:index/consumptionBudget:ConsumptionBudget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsumptionBudget gets an existing ConsumptionBudget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumptionBudget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsumptionBudgetState, opts ...pulumi.ResourceOption) (*ConsumptionBudget, error) {
	var resource ConsumptionBudget
	err := ctx.ReadResource("chronosphere:index/consumptionBudget:ConsumptionBudget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsumptionBudget resources.
type consumptionBudgetState struct {
	AlertActionConfig    *ConsumptionBudgetAlertActionConfig `pulumi:"alertActionConfig"`
	ConsumptionConfigId  *string                             `pulumi:"consumptionConfigId"`
	DefaultPriority      *int                                `pulumi:"defaultPriority"`
	Name                 *string                             `pulumi:"name"`
	NotificationPolicyId *string                             `pulumi:"notificationPolicyId"`
	PartitionSlugPath    *string                             `pulumi:"partitionSlugPath"`
	Priorities           []ConsumptionBudgetPriority         `pulumi:"priorities"`
	Resource             *string                             `pulumi:"resource"`
	Slug                 *string                             `pulumi:"slug"`
	Thresholds           []ConsumptionBudgetThreshold        `pulumi:"thresholds"`
}

type ConsumptionBudgetState struct {
	AlertActionConfig    ConsumptionBudgetAlertActionConfigPtrInput
	ConsumptionConfigId  pulumi.StringPtrInput
	DefaultPriority      pulumi.IntPtrInput
	Name                 pulumi.StringPtrInput
	NotificationPolicyId pulumi.StringPtrInput
	PartitionSlugPath    pulumi.StringPtrInput
	Priorities           ConsumptionBudgetPriorityArrayInput
	Resource             pulumi.StringPtrInput
	Slug                 pulumi.StringPtrInput
	Thresholds           ConsumptionBudgetThresholdArrayInput
}

func (ConsumptionBudgetState) ElementType() reflect.Type {
	return reflect.TypeOf((*consumptionBudgetState)(nil)).Elem()
}

type consumptionBudgetArgs struct {
	AlertActionConfig    *ConsumptionBudgetAlertActionConfig `pulumi:"alertActionConfig"`
	ConsumptionConfigId  string                              `pulumi:"consumptionConfigId"`
	DefaultPriority      *int                                `pulumi:"defaultPriority"`
	Name                 string                              `pulumi:"name"`
	NotificationPolicyId *string                             `pulumi:"notificationPolicyId"`
	PartitionSlugPath    *string                             `pulumi:"partitionSlugPath"`
	Priorities           []ConsumptionBudgetPriority         `pulumi:"priorities"`
	Resource             *string                             `pulumi:"resource"`
	Slug                 *string                             `pulumi:"slug"`
	Thresholds           []ConsumptionBudgetThreshold        `pulumi:"thresholds"`
}

// The set of arguments for constructing a ConsumptionBudget resource.
type ConsumptionBudgetArgs struct {
	AlertActionConfig    ConsumptionBudgetAlertActionConfigPtrInput
	ConsumptionConfigId  pulumi.StringInput
	DefaultPriority      pulumi.IntPtrInput
	Name                 pulumi.StringInput
	NotificationPolicyId pulumi.StringPtrInput
	PartitionSlugPath    pulumi.StringPtrInput
	Priorities           ConsumptionBudgetPriorityArrayInput
	Resource             pulumi.StringPtrInput
	Slug                 pulumi.StringPtrInput
	Thresholds           ConsumptionBudgetThresholdArrayInput
}

func (ConsumptionBudgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consumptionBudgetArgs)(nil)).Elem()
}

type ConsumptionBudgetInput interface {
	pulumi.Input

	ToConsumptionBudgetOutput() ConsumptionBudgetOutput
	ToConsumptionBudgetOutputWithContext(ctx context.Context) ConsumptionBudgetOutput
}

func (*ConsumptionBudget) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumptionBudget)(nil)).Elem()
}

func (i *ConsumptionBudget) ToConsumptionBudgetOutput() ConsumptionBudgetOutput {
	return i.ToConsumptionBudgetOutputWithContext(context.Background())
}

func (i *ConsumptionBudget) ToConsumptionBudgetOutputWithContext(ctx context.Context) ConsumptionBudgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionBudgetOutput)
}

// ConsumptionBudgetArrayInput is an input type that accepts ConsumptionBudgetArray and ConsumptionBudgetArrayOutput values.
// You can construct a concrete instance of `ConsumptionBudgetArrayInput` via:
//
//	ConsumptionBudgetArray{ ConsumptionBudgetArgs{...} }
type ConsumptionBudgetArrayInput interface {
	pulumi.Input

	ToConsumptionBudgetArrayOutput() ConsumptionBudgetArrayOutput
	ToConsumptionBudgetArrayOutputWithContext(context.Context) ConsumptionBudgetArrayOutput
}

type ConsumptionBudgetArray []ConsumptionBudgetInput

func (ConsumptionBudgetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumptionBudget)(nil)).Elem()
}

func (i ConsumptionBudgetArray) ToConsumptionBudgetArrayOutput() ConsumptionBudgetArrayOutput {
	return i.ToConsumptionBudgetArrayOutputWithContext(context.Background())
}

func (i ConsumptionBudgetArray) ToConsumptionBudgetArrayOutputWithContext(ctx context.Context) ConsumptionBudgetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionBudgetArrayOutput)
}

// ConsumptionBudgetMapInput is an input type that accepts ConsumptionBudgetMap and ConsumptionBudgetMapOutput values.
// You can construct a concrete instance of `ConsumptionBudgetMapInput` via:
//
//	ConsumptionBudgetMap{ "key": ConsumptionBudgetArgs{...} }
type ConsumptionBudgetMapInput interface {
	pulumi.Input

	ToConsumptionBudgetMapOutput() ConsumptionBudgetMapOutput
	ToConsumptionBudgetMapOutputWithContext(context.Context) ConsumptionBudgetMapOutput
}

type ConsumptionBudgetMap map[string]ConsumptionBudgetInput

func (ConsumptionBudgetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumptionBudget)(nil)).Elem()
}

func (i ConsumptionBudgetMap) ToConsumptionBudgetMapOutput() ConsumptionBudgetMapOutput {
	return i.ToConsumptionBudgetMapOutputWithContext(context.Background())
}

func (i ConsumptionBudgetMap) ToConsumptionBudgetMapOutputWithContext(ctx context.Context) ConsumptionBudgetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionBudgetMapOutput)
}

type ConsumptionBudgetOutput struct{ *pulumi.OutputState }

func (ConsumptionBudgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumptionBudget)(nil)).Elem()
}

func (o ConsumptionBudgetOutput) ToConsumptionBudgetOutput() ConsumptionBudgetOutput {
	return o
}

func (o ConsumptionBudgetOutput) ToConsumptionBudgetOutputWithContext(ctx context.Context) ConsumptionBudgetOutput {
	return o
}

func (o ConsumptionBudgetOutput) AlertActionConfig() ConsumptionBudgetAlertActionConfigPtrOutput {
	return o.ApplyT(func(v *ConsumptionBudget) ConsumptionBudgetAlertActionConfigPtrOutput { return v.AlertActionConfig }).(ConsumptionBudgetAlertActionConfigPtrOutput)
}

func (o ConsumptionBudgetOutput) ConsumptionConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumptionBudget) pulumi.StringOutput { return v.ConsumptionConfigId }).(pulumi.StringOutput)
}

func (o ConsumptionBudgetOutput) DefaultPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConsumptionBudget) pulumi.IntPtrOutput { return v.DefaultPriority }).(pulumi.IntPtrOutput)
}

func (o ConsumptionBudgetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumptionBudget) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ConsumptionBudgetOutput) NotificationPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsumptionBudget) pulumi.StringPtrOutput { return v.NotificationPolicyId }).(pulumi.StringPtrOutput)
}

func (o ConsumptionBudgetOutput) PartitionSlugPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsumptionBudget) pulumi.StringPtrOutput { return v.PartitionSlugPath }).(pulumi.StringPtrOutput)
}

func (o ConsumptionBudgetOutput) Priorities() ConsumptionBudgetPriorityArrayOutput {
	return o.ApplyT(func(v *ConsumptionBudget) ConsumptionBudgetPriorityArrayOutput { return v.Priorities }).(ConsumptionBudgetPriorityArrayOutput)
}

func (o ConsumptionBudgetOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsumptionBudget) pulumi.StringPtrOutput { return v.Resource }).(pulumi.StringPtrOutput)
}

func (o ConsumptionBudgetOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumptionBudget) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o ConsumptionBudgetOutput) Thresholds() ConsumptionBudgetThresholdArrayOutput {
	return o.ApplyT(func(v *ConsumptionBudget) ConsumptionBudgetThresholdArrayOutput { return v.Thresholds }).(ConsumptionBudgetThresholdArrayOutput)
}

type ConsumptionBudgetArrayOutput struct{ *pulumi.OutputState }

func (ConsumptionBudgetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumptionBudget)(nil)).Elem()
}

func (o ConsumptionBudgetArrayOutput) ToConsumptionBudgetArrayOutput() ConsumptionBudgetArrayOutput {
	return o
}

func (o ConsumptionBudgetArrayOutput) ToConsumptionBudgetArrayOutputWithContext(ctx context.Context) ConsumptionBudgetArrayOutput {
	return o
}

func (o ConsumptionBudgetArrayOutput) Index(i pulumi.IntInput) ConsumptionBudgetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConsumptionBudget {
		return vs[0].([]*ConsumptionBudget)[vs[1].(int)]
	}).(ConsumptionBudgetOutput)
}

type ConsumptionBudgetMapOutput struct{ *pulumi.OutputState }

func (ConsumptionBudgetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumptionBudget)(nil)).Elem()
}

func (o ConsumptionBudgetMapOutput) ToConsumptionBudgetMapOutput() ConsumptionBudgetMapOutput {
	return o
}

func (o ConsumptionBudgetMapOutput) ToConsumptionBudgetMapOutputWithContext(ctx context.Context) ConsumptionBudgetMapOutput {
	return o
}

func (o ConsumptionBudgetMapOutput) MapIndex(k pulumi.StringInput) ConsumptionBudgetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConsumptionBudget {
		return vs[0].(map[string]*ConsumptionBudget)[vs[1].(string)]
	}).(ConsumptionBudgetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumptionBudgetInput)(nil)).Elem(), &ConsumptionBudget{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumptionBudgetArrayInput)(nil)).Elem(), ConsumptionBudgetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumptionBudgetMapInput)(nil)).Elem(), ConsumptionBudgetMap{})
	pulumi.RegisterOutputType(ConsumptionBudgetOutput{})
	pulumi.RegisterOutputType(ConsumptionBudgetArrayOutput{})
	pulumi.RegisterOutputType(ConsumptionBudgetMapOutput{})
}
