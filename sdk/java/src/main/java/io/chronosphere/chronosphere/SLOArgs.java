// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.chronosphere.chronosphere.inputs.SLODefinitionArgs;
import io.chronosphere.chronosphere.inputs.SLOSliArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SLOArgs extends com.pulumi.resources.ResourceArgs {

    public static final SLOArgs Empty = new SLOArgs();

    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    @Import(name="collectionId", required=true)
    private Output<String> collectionId;

    public Output<String> collectionId() {
        return this.collectionId;
    }

    @Import(name="definition", required=true)
    private Output<SLODefinitionArgs> definition;

    public Output<SLODefinitionArgs> definition() {
        return this.definition;
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="notificationPolicyId")
    private @Nullable Output<String> notificationPolicyId;

    public Optional<Output<String>> notificationPolicyId() {
        return Optional.ofNullable(this.notificationPolicyId);
    }

    @Import(name="signalGrouping")
    private @Nullable Output<String> signalGrouping;

    public Optional<Output<String>> signalGrouping() {
        return Optional.ofNullable(this.signalGrouping);
    }

    @Import(name="sli", required=true)
    private Output<SLOSliArgs> sli;

    public Output<SLOSliArgs> sli() {
        return this.sli;
    }

    @Import(name="slug")
    private @Nullable Output<String> slug;

    public Optional<Output<String>> slug() {
        return Optional.ofNullable(this.slug);
    }

    private SLOArgs() {}

    private SLOArgs(SLOArgs $) {
        this.annotations = $.annotations;
        this.collectionId = $.collectionId;
        this.definition = $.definition;
        this.description = $.description;
        this.labels = $.labels;
        this.name = $.name;
        this.notificationPolicyId = $.notificationPolicyId;
        this.signalGrouping = $.signalGrouping;
        this.sli = $.sli;
        this.slug = $.slug;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SLOArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SLOArgs $;

        public Builder() {
            $ = new SLOArgs();
        }

        public Builder(SLOArgs defaults) {
            $ = new SLOArgs(Objects.requireNonNull(defaults));
        }

        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        public Builder collectionId(Output<String> collectionId) {
            $.collectionId = collectionId;
            return this;
        }

        public Builder collectionId(String collectionId) {
            return collectionId(Output.of(collectionId));
        }

        public Builder definition(Output<SLODefinitionArgs> definition) {
            $.definition = definition;
            return this;
        }

        public Builder definition(SLODefinitionArgs definition) {
            return definition(Output.of(definition));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder notificationPolicyId(@Nullable Output<String> notificationPolicyId) {
            $.notificationPolicyId = notificationPolicyId;
            return this;
        }

        public Builder notificationPolicyId(String notificationPolicyId) {
            return notificationPolicyId(Output.of(notificationPolicyId));
        }

        public Builder signalGrouping(@Nullable Output<String> signalGrouping) {
            $.signalGrouping = signalGrouping;
            return this;
        }

        public Builder signalGrouping(String signalGrouping) {
            return signalGrouping(Output.of(signalGrouping));
        }

        public Builder sli(Output<SLOSliArgs> sli) {
            $.sli = sli;
            return this;
        }

        public Builder sli(SLOSliArgs sli) {
            return sli(Output.of(sli));
        }

        public Builder slug(@Nullable Output<String> slug) {
            $.slug = slug;
            return this;
        }

        public Builder slug(String slug) {
            return slug(Output.of(slug));
        }

        public SLOArgs build() {
            $.collectionId = Objects.requireNonNull($.collectionId, "expected parameter 'collectionId' to be non-null");
            $.definition = Objects.requireNonNull($.definition, "expected parameter 'definition' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.sli = Objects.requireNonNull($.sli, "expected parameter 'sli' to be non-null");
            return $;
        }
    }

}
