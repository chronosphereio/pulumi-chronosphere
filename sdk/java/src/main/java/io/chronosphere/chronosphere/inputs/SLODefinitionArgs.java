// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.chronosphere.chronosphere.inputs.SLODefinitionBurnRateAlertingConfigArgs;
import io.chronosphere.chronosphere.inputs.SLODefinitionTimeWindowArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SLODefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SLODefinitionArgs Empty = new SLODefinitionArgs();

    @Import(name="burnRateAlertingConfigs")
    private @Nullable Output<List<SLODefinitionBurnRateAlertingConfigArgs>> burnRateAlertingConfigs;

    public Optional<Output<List<SLODefinitionBurnRateAlertingConfigArgs>>> burnRateAlertingConfigs() {
        return Optional.ofNullable(this.burnRateAlertingConfigs);
    }

    @Import(name="enableBurnRateAlerting")
    private @Nullable Output<Boolean> enableBurnRateAlerting;

    public Optional<Output<Boolean>> enableBurnRateAlerting() {
        return Optional.ofNullable(this.enableBurnRateAlerting);
    }

    @Import(name="objective", required=true)
    private Output<Double> objective;

    public Output<Double> objective() {
        return this.objective;
    }

    @Import(name="timeWindow")
    private @Nullable Output<SLODefinitionTimeWindowArgs> timeWindow;

    public Optional<Output<SLODefinitionTimeWindowArgs>> timeWindow() {
        return Optional.ofNullable(this.timeWindow);
    }

    private SLODefinitionArgs() {}

    private SLODefinitionArgs(SLODefinitionArgs $) {
        this.burnRateAlertingConfigs = $.burnRateAlertingConfigs;
        this.enableBurnRateAlerting = $.enableBurnRateAlerting;
        this.objective = $.objective;
        this.timeWindow = $.timeWindow;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SLODefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SLODefinitionArgs $;

        public Builder() {
            $ = new SLODefinitionArgs();
        }

        public Builder(SLODefinitionArgs defaults) {
            $ = new SLODefinitionArgs(Objects.requireNonNull(defaults));
        }

        public Builder burnRateAlertingConfigs(@Nullable Output<List<SLODefinitionBurnRateAlertingConfigArgs>> burnRateAlertingConfigs) {
            $.burnRateAlertingConfigs = burnRateAlertingConfigs;
            return this;
        }

        public Builder burnRateAlertingConfigs(List<SLODefinitionBurnRateAlertingConfigArgs> burnRateAlertingConfigs) {
            return burnRateAlertingConfigs(Output.of(burnRateAlertingConfigs));
        }

        public Builder burnRateAlertingConfigs(SLODefinitionBurnRateAlertingConfigArgs... burnRateAlertingConfigs) {
            return burnRateAlertingConfigs(List.of(burnRateAlertingConfigs));
        }

        public Builder enableBurnRateAlerting(@Nullable Output<Boolean> enableBurnRateAlerting) {
            $.enableBurnRateAlerting = enableBurnRateAlerting;
            return this;
        }

        public Builder enableBurnRateAlerting(Boolean enableBurnRateAlerting) {
            return enableBurnRateAlerting(Output.of(enableBurnRateAlerting));
        }

        public Builder objective(Output<Double> objective) {
            $.objective = objective;
            return this;
        }

        public Builder objective(Double objective) {
            return objective(Output.of(objective));
        }

        public Builder timeWindow(@Nullable Output<SLODefinitionTimeWindowArgs> timeWindow) {
            $.timeWindow = timeWindow;
            return this;
        }

        public Builder timeWindow(SLODefinitionTimeWindowArgs timeWindow) {
            return timeWindow(Output.of(timeWindow));
        }

        public SLODefinitionArgs build() {
            $.objective = Objects.requireNonNull($.objective, "expected parameter 'objective' to be non-null");
            return $;
        }
    }

}
