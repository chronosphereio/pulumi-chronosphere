// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;


public final class TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs extends com.pulumi.resources.ResourceArgs {

    public static final TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs Empty = new TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs();

    @Import(name="samplingRate", required=true)
    private Output<Double> samplingRate;

    public Output<Double> samplingRate() {
        return this.samplingRate;
    }

    private TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs() {}

    private TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs(TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs $) {
        this.samplingRate = $.samplingRate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs $;

        public Builder() {
            $ = new TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs();
        }

        public Builder(TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs defaults) {
            $ = new TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs(Objects.requireNonNull(defaults));
        }

        public Builder samplingRate(Output<Double> samplingRate) {
            $.samplingRate = samplingRate;
            return this;
        }

        public Builder samplingRate(Double samplingRate) {
            return samplingRate(Output.of(samplingRate));
        }

        public TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs build() {
            $.samplingRate = Objects.requireNonNull($.samplingRate, "expected parameter 'samplingRate' to be non-null");
            return $;
        }
    }

}
