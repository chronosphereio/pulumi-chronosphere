// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.chronosphere.chronosphere.inputs.ResourcePoolsConfigDefaultPoolArgs;
import io.chronosphere.chronosphere.inputs.ResourcePoolsConfigPoolArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourcePoolsConfigState extends com.pulumi.resources.ResourceArgs {

    public static final ResourcePoolsConfigState Empty = new ResourcePoolsConfigState();

    @Import(name="defaultPool")
    private @Nullable Output<ResourcePoolsConfigDefaultPoolArgs> defaultPool;

    public Optional<Output<ResourcePoolsConfigDefaultPoolArgs>> defaultPool() {
        return Optional.ofNullable(this.defaultPool);
    }

    @Import(name="pool")
    private @Nullable Output<List<ResourcePoolsConfigPoolArgs>> pool;

    public Optional<Output<List<ResourcePoolsConfigPoolArgs>>> pool() {
        return Optional.ofNullable(this.pool);
    }

    /**
     * @deprecated
     * Use pool instead of pools
     * 
     */
    @Deprecated /* Use pool instead of pools */
    @Import(name="pools")
    private @Nullable Output<List<ResourcePoolsConfigPoolArgs>> pools;

    /**
     * @deprecated
     * Use pool instead of pools
     * 
     */
    @Deprecated /* Use pool instead of pools */
    public Optional<Output<List<ResourcePoolsConfigPoolArgs>>> pools() {
        return Optional.ofNullable(this.pools);
    }

    private ResourcePoolsConfigState() {}

    private ResourcePoolsConfigState(ResourcePoolsConfigState $) {
        this.defaultPool = $.defaultPool;
        this.pool = $.pool;
        this.pools = $.pools;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourcePoolsConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourcePoolsConfigState $;

        public Builder() {
            $ = new ResourcePoolsConfigState();
        }

        public Builder(ResourcePoolsConfigState defaults) {
            $ = new ResourcePoolsConfigState(Objects.requireNonNull(defaults));
        }

        public Builder defaultPool(@Nullable Output<ResourcePoolsConfigDefaultPoolArgs> defaultPool) {
            $.defaultPool = defaultPool;
            return this;
        }

        public Builder defaultPool(ResourcePoolsConfigDefaultPoolArgs defaultPool) {
            return defaultPool(Output.of(defaultPool));
        }

        public Builder pool(@Nullable Output<List<ResourcePoolsConfigPoolArgs>> pool) {
            $.pool = pool;
            return this;
        }

        public Builder pool(List<ResourcePoolsConfigPoolArgs> pool) {
            return pool(Output.of(pool));
        }

        public Builder pool(ResourcePoolsConfigPoolArgs... pool) {
            return pool(List.of(pool));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use pool instead of pools
         * 
         */
        @Deprecated /* Use pool instead of pools */
        public Builder pools(@Nullable Output<List<ResourcePoolsConfigPoolArgs>> pools) {
            $.pools = pools;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use pool instead of pools
         * 
         */
        @Deprecated /* Use pool instead of pools */
        public Builder pools(List<ResourcePoolsConfigPoolArgs> pools) {
            return pools(Output.of(pools));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use pool instead of pools
         * 
         */
        @Deprecated /* Use pool instead of pools */
        public Builder pools(ResourcePoolsConfigPoolArgs... pools) {
            return pools(List.of(pools));
        }

        public ResourcePoolsConfigState build() {
            return $;
        }
    }

}
