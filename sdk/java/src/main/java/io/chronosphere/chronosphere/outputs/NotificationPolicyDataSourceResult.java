// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.outputs;

import com.pulumi.core.annotations.CustomType;
import io.chronosphere.chronosphere.outputs.NotificationPolicyDataSourceOverride;
import io.chronosphere.chronosphere.outputs.NotificationPolicyDataSourceRoute;
import io.chronosphere.chronosphere.outputs.NotificationPolicyDataSourceRule;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NotificationPolicyDataSourceResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Boolean isIndependent;
    private @Nullable String name;
    private String notificationPolicyData;
    private @Nullable List<NotificationPolicyDataSourceOverride> overrides;
    private @Nullable List<NotificationPolicyDataSourceRoute> routes;
    /**
     * @deprecated
     * `rule` is deprecated, use `route` instead.
     * 
     */
    @Deprecated /* `rule` is deprecated, use `route` instead. */
    private @Nullable List<NotificationPolicyDataSourceRule> rules;
    private String slug;
    private @Nullable String teamId;

    private NotificationPolicyDataSourceResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean isIndependent() {
        return this.isIndependent;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public String notificationPolicyData() {
        return this.notificationPolicyData;
    }
    public List<NotificationPolicyDataSourceOverride> overrides() {
        return this.overrides == null ? List.of() : this.overrides;
    }
    public List<NotificationPolicyDataSourceRoute> routes() {
        return this.routes == null ? List.of() : this.routes;
    }
    /**
     * @deprecated
     * `rule` is deprecated, use `route` instead.
     * 
     */
    @Deprecated /* `rule` is deprecated, use `route` instead. */
    public List<NotificationPolicyDataSourceRule> rules() {
        return this.rules == null ? List.of() : this.rules;
    }
    public String slug() {
        return this.slug;
    }
    public Optional<String> teamId() {
        return Optional.ofNullable(this.teamId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationPolicyDataSourceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private Boolean isIndependent;
        private @Nullable String name;
        private String notificationPolicyData;
        private @Nullable List<NotificationPolicyDataSourceOverride> overrides;
        private @Nullable List<NotificationPolicyDataSourceRoute> routes;
        private @Nullable List<NotificationPolicyDataSourceRule> rules;
        private String slug;
        private @Nullable String teamId;
        public Builder() {}
        public Builder(NotificationPolicyDataSourceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.isIndependent = defaults.isIndependent;
    	      this.name = defaults.name;
    	      this.notificationPolicyData = defaults.notificationPolicyData;
    	      this.overrides = defaults.overrides;
    	      this.routes = defaults.routes;
    	      this.rules = defaults.rules;
    	      this.slug = defaults.slug;
    	      this.teamId = defaults.teamId;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isIndependent(Boolean isIndependent) {
            this.isIndependent = Objects.requireNonNull(isIndependent);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notificationPolicyData(String notificationPolicyData) {
            this.notificationPolicyData = Objects.requireNonNull(notificationPolicyData);
            return this;
        }
        @CustomType.Setter
        public Builder overrides(@Nullable List<NotificationPolicyDataSourceOverride> overrides) {
            this.overrides = overrides;
            return this;
        }
        public Builder overrides(NotificationPolicyDataSourceOverride... overrides) {
            return overrides(List.of(overrides));
        }
        @CustomType.Setter
        public Builder routes(@Nullable List<NotificationPolicyDataSourceRoute> routes) {
            this.routes = routes;
            return this;
        }
        public Builder routes(NotificationPolicyDataSourceRoute... routes) {
            return routes(List.of(routes));
        }
        @CustomType.Setter
        public Builder rules(@Nullable List<NotificationPolicyDataSourceRule> rules) {
            this.rules = rules;
            return this;
        }
        public Builder rules(NotificationPolicyDataSourceRule... rules) {
            return rules(List.of(rules));
        }
        @CustomType.Setter
        public Builder slug(String slug) {
            this.slug = Objects.requireNonNull(slug);
            return this;
        }
        @CustomType.Setter
        public Builder teamId(@Nullable String teamId) {
            this.teamId = teamId;
            return this;
        }
        public NotificationPolicyDataSourceResult build() {
            final var o = new NotificationPolicyDataSourceResult();
            o.id = id;
            o.isIndependent = isIndependent;
            o.name = name;
            o.notificationPolicyData = notificationPolicyData;
            o.overrides = overrides;
            o.routes = routes;
            o.rules = rules;
            o.slug = slug;
            o.teamId = teamId;
            return o;
        }
    }
}
