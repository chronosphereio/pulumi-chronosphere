// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.chronosphere.chronosphere.inputs.MonitorQueryArgs;
import io.chronosphere.chronosphere.inputs.MonitorScheduleArgs;
import io.chronosphere.chronosphere.inputs.MonitorSeriesConditionsArgs;
import io.chronosphere.chronosphere.inputs.MonitorSignalGroupingArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitorState extends com.pulumi.resources.ResourceArgs {

    public static final MonitorState Empty = new MonitorState();

    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    @Import(name="bucketId")
    private @Nullable Output<String> bucketId;

    public Optional<Output<String>> bucketId() {
        return Optional.ofNullable(this.bucketId);
    }

    @Import(name="collectionId")
    private @Nullable Output<String> collectionId;

    public Optional<Output<String>> collectionId() {
        return Optional.ofNullable(this.collectionId);
    }

    @Import(name="interval")
    private @Nullable Output<String> interval;

    public Optional<Output<String>> interval() {
        return Optional.ofNullable(this.interval);
    }

    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="notificationPolicyId")
    private @Nullable Output<String> notificationPolicyId;

    public Optional<Output<String>> notificationPolicyId() {
        return Optional.ofNullable(this.notificationPolicyId);
    }

    @Import(name="query")
    private @Nullable Output<MonitorQueryArgs> query;

    public Optional<Output<MonitorQueryArgs>> query() {
        return Optional.ofNullable(this.query);
    }

    @Import(name="schedule")
    private @Nullable Output<MonitorScheduleArgs> schedule;

    public Optional<Output<MonitorScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    @Import(name="seriesConditions")
    private @Nullable Output<MonitorSeriesConditionsArgs> seriesConditions;

    public Optional<Output<MonitorSeriesConditionsArgs>> seriesConditions() {
        return Optional.ofNullable(this.seriesConditions);
    }

    @Import(name="signalGrouping")
    private @Nullable Output<MonitorSignalGroupingArgs> signalGrouping;

    public Optional<Output<MonitorSignalGroupingArgs>> signalGrouping() {
        return Optional.ofNullable(this.signalGrouping);
    }

    @Import(name="slug")
    private @Nullable Output<String> slug;

    public Optional<Output<String>> slug() {
        return Optional.ofNullable(this.slug);
    }

    private MonitorState() {}

    private MonitorState(MonitorState $) {
        this.annotations = $.annotations;
        this.bucketId = $.bucketId;
        this.collectionId = $.collectionId;
        this.interval = $.interval;
        this.labels = $.labels;
        this.name = $.name;
        this.notificationPolicyId = $.notificationPolicyId;
        this.query = $.query;
        this.schedule = $.schedule;
        this.seriesConditions = $.seriesConditions;
        this.signalGrouping = $.signalGrouping;
        this.slug = $.slug;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorState $;

        public Builder() {
            $ = new MonitorState();
        }

        public Builder(MonitorState defaults) {
            $ = new MonitorState(Objects.requireNonNull(defaults));
        }

        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        public Builder bucketId(@Nullable Output<String> bucketId) {
            $.bucketId = bucketId;
            return this;
        }

        public Builder bucketId(String bucketId) {
            return bucketId(Output.of(bucketId));
        }

        public Builder collectionId(@Nullable Output<String> collectionId) {
            $.collectionId = collectionId;
            return this;
        }

        public Builder collectionId(String collectionId) {
            return collectionId(Output.of(collectionId));
        }

        public Builder interval(@Nullable Output<String> interval) {
            $.interval = interval;
            return this;
        }

        public Builder interval(String interval) {
            return interval(Output.of(interval));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder notificationPolicyId(@Nullable Output<String> notificationPolicyId) {
            $.notificationPolicyId = notificationPolicyId;
            return this;
        }

        public Builder notificationPolicyId(String notificationPolicyId) {
            return notificationPolicyId(Output.of(notificationPolicyId));
        }

        public Builder query(@Nullable Output<MonitorQueryArgs> query) {
            $.query = query;
            return this;
        }

        public Builder query(MonitorQueryArgs query) {
            return query(Output.of(query));
        }

        public Builder schedule(@Nullable Output<MonitorScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        public Builder schedule(MonitorScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        public Builder seriesConditions(@Nullable Output<MonitorSeriesConditionsArgs> seriesConditions) {
            $.seriesConditions = seriesConditions;
            return this;
        }

        public Builder seriesConditions(MonitorSeriesConditionsArgs seriesConditions) {
            return seriesConditions(Output.of(seriesConditions));
        }

        public Builder signalGrouping(@Nullable Output<MonitorSignalGroupingArgs> signalGrouping) {
            $.signalGrouping = signalGrouping;
            return this;
        }

        public Builder signalGrouping(MonitorSignalGroupingArgs signalGrouping) {
            return signalGrouping(Output.of(signalGrouping));
        }

        public Builder slug(@Nullable Output<String> slug) {
            $.slug = slug;
            return this;
        }

        public Builder slug(String slug) {
            return slug(Output.of(slug));
        }

        public MonitorState build() {
            return $;
        }
    }

}
