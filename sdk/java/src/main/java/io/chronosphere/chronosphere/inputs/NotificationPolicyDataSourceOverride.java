// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.annotations.Import;
import io.chronosphere.chronosphere.inputs.NotificationPolicyDataSourceOverrideAlertLabelMatcher;
import io.chronosphere.chronosphere.inputs.NotificationPolicyDataSourceOverrideRoute;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationPolicyDataSourceOverride extends com.pulumi.resources.InvokeArgs {

    public static final NotificationPolicyDataSourceOverride Empty = new NotificationPolicyDataSourceOverride();

    @Import(name="alertLabelMatchers", required=true)
    private List<NotificationPolicyDataSourceOverrideAlertLabelMatcher> alertLabelMatchers;

    public List<NotificationPolicyDataSourceOverrideAlertLabelMatcher> alertLabelMatchers() {
        return this.alertLabelMatchers;
    }

    @Import(name="routes")
    private @Nullable List<NotificationPolicyDataSourceOverrideRoute> routes;

    public Optional<List<NotificationPolicyDataSourceOverrideRoute>> routes() {
        return Optional.ofNullable(this.routes);
    }

    private NotificationPolicyDataSourceOverride() {}

    private NotificationPolicyDataSourceOverride(NotificationPolicyDataSourceOverride $) {
        this.alertLabelMatchers = $.alertLabelMatchers;
        this.routes = $.routes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationPolicyDataSourceOverride defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationPolicyDataSourceOverride $;

        public Builder() {
            $ = new NotificationPolicyDataSourceOverride();
        }

        public Builder(NotificationPolicyDataSourceOverride defaults) {
            $ = new NotificationPolicyDataSourceOverride(Objects.requireNonNull(defaults));
        }

        public Builder alertLabelMatchers(List<NotificationPolicyDataSourceOverrideAlertLabelMatcher> alertLabelMatchers) {
            $.alertLabelMatchers = alertLabelMatchers;
            return this;
        }

        public Builder alertLabelMatchers(NotificationPolicyDataSourceOverrideAlertLabelMatcher... alertLabelMatchers) {
            return alertLabelMatchers(List.of(alertLabelMatchers));
        }

        public Builder routes(@Nullable List<NotificationPolicyDataSourceOverrideRoute> routes) {
            $.routes = routes;
            return this;
        }

        public Builder routes(NotificationPolicyDataSourceOverrideRoute... routes) {
            return routes(List.of(routes));
        }

        public NotificationPolicyDataSourceOverride build() {
            $.alertLabelMatchers = Objects.requireNonNull($.alertLabelMatchers, "expected parameter 'alertLabelMatchers' to be non-null");
            return $;
        }
    }

}
