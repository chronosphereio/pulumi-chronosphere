// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.chronosphere.chronosphere.inputs.LogControlConfigRuleEmitMetricsCounterArgs;
import io.chronosphere.chronosphere.inputs.LogControlConfigRuleEmitMetricsGaugeArgs;
import io.chronosphere.chronosphere.inputs.LogControlConfigRuleEmitMetricsHistogramArgs;
import io.chronosphere.chronosphere.inputs.LogControlConfigRuleEmitMetricsLabelArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogControlConfigRuleEmitMetricsArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogControlConfigRuleEmitMetricsArgs Empty = new LogControlConfigRuleEmitMetricsArgs();

    @Import(name="counter")
    private @Nullable Output<LogControlConfigRuleEmitMetricsCounterArgs> counter;

    public Optional<Output<LogControlConfigRuleEmitMetricsCounterArgs>> counter() {
        return Optional.ofNullable(this.counter);
    }

    @Import(name="dropLog")
    private @Nullable Output<Boolean> dropLog;

    public Optional<Output<Boolean>> dropLog() {
        return Optional.ofNullable(this.dropLog);
    }

    @Import(name="gauge")
    private @Nullable Output<LogControlConfigRuleEmitMetricsGaugeArgs> gauge;

    public Optional<Output<LogControlConfigRuleEmitMetricsGaugeArgs>> gauge() {
        return Optional.ofNullable(this.gauge);
    }

    @Import(name="histogram")
    private @Nullable Output<LogControlConfigRuleEmitMetricsHistogramArgs> histogram;

    public Optional<Output<LogControlConfigRuleEmitMetricsHistogramArgs>> histogram() {
        return Optional.ofNullable(this.histogram);
    }

    @Import(name="labels")
    private @Nullable Output<List<LogControlConfigRuleEmitMetricsLabelArgs>> labels;

    public Optional<Output<List<LogControlConfigRuleEmitMetricsLabelArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="mode")
    private @Nullable Output<String> mode;

    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private LogControlConfigRuleEmitMetricsArgs() {}

    private LogControlConfigRuleEmitMetricsArgs(LogControlConfigRuleEmitMetricsArgs $) {
        this.counter = $.counter;
        this.dropLog = $.dropLog;
        this.gauge = $.gauge;
        this.histogram = $.histogram;
        this.labels = $.labels;
        this.mode = $.mode;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogControlConfigRuleEmitMetricsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogControlConfigRuleEmitMetricsArgs $;

        public Builder() {
            $ = new LogControlConfigRuleEmitMetricsArgs();
        }

        public Builder(LogControlConfigRuleEmitMetricsArgs defaults) {
            $ = new LogControlConfigRuleEmitMetricsArgs(Objects.requireNonNull(defaults));
        }

        public Builder counter(@Nullable Output<LogControlConfigRuleEmitMetricsCounterArgs> counter) {
            $.counter = counter;
            return this;
        }

        public Builder counter(LogControlConfigRuleEmitMetricsCounterArgs counter) {
            return counter(Output.of(counter));
        }

        public Builder dropLog(@Nullable Output<Boolean> dropLog) {
            $.dropLog = dropLog;
            return this;
        }

        public Builder dropLog(Boolean dropLog) {
            return dropLog(Output.of(dropLog));
        }

        public Builder gauge(@Nullable Output<LogControlConfigRuleEmitMetricsGaugeArgs> gauge) {
            $.gauge = gauge;
            return this;
        }

        public Builder gauge(LogControlConfigRuleEmitMetricsGaugeArgs gauge) {
            return gauge(Output.of(gauge));
        }

        public Builder histogram(@Nullable Output<LogControlConfigRuleEmitMetricsHistogramArgs> histogram) {
            $.histogram = histogram;
            return this;
        }

        public Builder histogram(LogControlConfigRuleEmitMetricsHistogramArgs histogram) {
            return histogram(Output.of(histogram));
        }

        public Builder labels(@Nullable Output<List<LogControlConfigRuleEmitMetricsLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(List<LogControlConfigRuleEmitMetricsLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        public Builder labels(LogControlConfigRuleEmitMetricsLabelArgs... labels) {
            return labels(List.of(labels));
        }

        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public LogControlConfigRuleEmitMetricsArgs build() {
            return $;
        }
    }

}
