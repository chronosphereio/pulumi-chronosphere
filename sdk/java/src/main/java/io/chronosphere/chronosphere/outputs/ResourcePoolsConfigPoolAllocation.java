// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.outputs;

import com.pulumi.core.annotations.CustomType;
import io.chronosphere.chronosphere.outputs.ResourcePoolsConfigPoolAllocationFixedValue;
import io.chronosphere.chronosphere.outputs.ResourcePoolsConfigPoolAllocationPriorityThreshold;
import java.lang.Double;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ResourcePoolsConfigPoolAllocation {
    private @Nullable List<ResourcePoolsConfigPoolAllocationFixedValue> fixedValues;
    private @Nullable Double percentOfLicense;
    private @Nullable List<ResourcePoolsConfigPoolAllocationPriorityThreshold> priorityThresholds;

    private ResourcePoolsConfigPoolAllocation() {}
    public List<ResourcePoolsConfigPoolAllocationFixedValue> fixedValues() {
        return this.fixedValues == null ? List.of() : this.fixedValues;
    }
    public Optional<Double> percentOfLicense() {
        return Optional.ofNullable(this.percentOfLicense);
    }
    public List<ResourcePoolsConfigPoolAllocationPriorityThreshold> priorityThresholds() {
        return this.priorityThresholds == null ? List.of() : this.priorityThresholds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResourcePoolsConfigPoolAllocation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ResourcePoolsConfigPoolAllocationFixedValue> fixedValues;
        private @Nullable Double percentOfLicense;
        private @Nullable List<ResourcePoolsConfigPoolAllocationPriorityThreshold> priorityThresholds;
        public Builder() {}
        public Builder(ResourcePoolsConfigPoolAllocation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fixedValues = defaults.fixedValues;
    	      this.percentOfLicense = defaults.percentOfLicense;
    	      this.priorityThresholds = defaults.priorityThresholds;
        }

        @CustomType.Setter
        public Builder fixedValues(@Nullable List<ResourcePoolsConfigPoolAllocationFixedValue> fixedValues) {
            this.fixedValues = fixedValues;
            return this;
        }
        public Builder fixedValues(ResourcePoolsConfigPoolAllocationFixedValue... fixedValues) {
            return fixedValues(List.of(fixedValues));
        }
        @CustomType.Setter
        public Builder percentOfLicense(@Nullable Double percentOfLicense) {
            this.percentOfLicense = percentOfLicense;
            return this;
        }
        @CustomType.Setter
        public Builder priorityThresholds(@Nullable List<ResourcePoolsConfigPoolAllocationPriorityThreshold> priorityThresholds) {
            this.priorityThresholds = priorityThresholds;
            return this;
        }
        public Builder priorityThresholds(ResourcePoolsConfigPoolAllocationPriorityThreshold... priorityThresholds) {
            return priorityThresholds(List.of(priorityThresholds));
        }
        public ResourcePoolsConfigPoolAllocation build() {
            final var o = new ResourcePoolsConfigPoolAllocation();
            o.fixedValues = fixedValues;
            o.percentOfLicense = percentOfLicense;
            o.priorityThresholds = priorityThresholds;
            return o;
        }
    }
}
