// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.chronosphere.chronosphere.inputs.TraceTailSamplingRulesRuleFilterArgs;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TraceTailSamplingRulesRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final TraceTailSamplingRulesRuleArgs Empty = new TraceTailSamplingRulesRuleArgs();

    @Import(name="filter", required=true)
    private Output<TraceTailSamplingRulesRuleFilterArgs> filter;

    public Output<TraceTailSamplingRulesRuleFilterArgs> filter() {
        return this.filter;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="sampleRate", required=true)
    private Output<Double> sampleRate;

    public Output<Double> sampleRate() {
        return this.sampleRate;
    }

    @Import(name="systemName")
    private @Nullable Output<String> systemName;

    public Optional<Output<String>> systemName() {
        return Optional.ofNullable(this.systemName);
    }

    private TraceTailSamplingRulesRuleArgs() {}

    private TraceTailSamplingRulesRuleArgs(TraceTailSamplingRulesRuleArgs $) {
        this.filter = $.filter;
        this.name = $.name;
        this.sampleRate = $.sampleRate;
        this.systemName = $.systemName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TraceTailSamplingRulesRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TraceTailSamplingRulesRuleArgs $;

        public Builder() {
            $ = new TraceTailSamplingRulesRuleArgs();
        }

        public Builder(TraceTailSamplingRulesRuleArgs defaults) {
            $ = new TraceTailSamplingRulesRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder filter(Output<TraceTailSamplingRulesRuleFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(TraceTailSamplingRulesRuleFilterArgs filter) {
            return filter(Output.of(filter));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder sampleRate(Output<Double> sampleRate) {
            $.sampleRate = sampleRate;
            return this;
        }

        public Builder sampleRate(Double sampleRate) {
            return sampleRate(Output.of(sampleRate));
        }

        public Builder systemName(@Nullable Output<String> systemName) {
            $.systemName = systemName;
            return this;
        }

        public Builder systemName(String systemName) {
            return systemName(Output.of(systemName));
        }

        public TraceTailSamplingRulesRuleArgs build() {
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            $.sampleRate = Objects.requireNonNull($.sampleRate, "expected parameter 'sampleRate' to be non-null");
            return $;
        }
    }

}
