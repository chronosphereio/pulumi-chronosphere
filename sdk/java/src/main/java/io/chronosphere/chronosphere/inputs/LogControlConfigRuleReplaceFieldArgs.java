// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.chronosphere.chronosphere.inputs.LogControlConfigRuleReplaceFieldFieldArgs;
import io.chronosphere.chronosphere.inputs.LogControlConfigRuleReplaceFieldMappedValueArgs;
import io.chronosphere.chronosphere.inputs.LogControlConfigRuleReplaceFieldStaticValueArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogControlConfigRuleReplaceFieldArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogControlConfigRuleReplaceFieldArgs Empty = new LogControlConfigRuleReplaceFieldArgs();

    @Import(name="field")
    private @Nullable Output<LogControlConfigRuleReplaceFieldFieldArgs> field;

    public Optional<Output<LogControlConfigRuleReplaceFieldFieldArgs>> field() {
        return Optional.ofNullable(this.field);
    }

    @Import(name="mappedValue")
    private @Nullable Output<LogControlConfigRuleReplaceFieldMappedValueArgs> mappedValue;

    public Optional<Output<LogControlConfigRuleReplaceFieldMappedValueArgs>> mappedValue() {
        return Optional.ofNullable(this.mappedValue);
    }

    @Import(name="replaceAll")
    private @Nullable Output<Boolean> replaceAll;

    public Optional<Output<Boolean>> replaceAll() {
        return Optional.ofNullable(this.replaceAll);
    }

    @Import(name="replaceMode")
    private @Nullable Output<String> replaceMode;

    public Optional<Output<String>> replaceMode() {
        return Optional.ofNullable(this.replaceMode);
    }

    @Import(name="replaceRegex")
    private @Nullable Output<String> replaceRegex;

    public Optional<Output<String>> replaceRegex() {
        return Optional.ofNullable(this.replaceRegex);
    }

    @Import(name="staticValue")
    private @Nullable Output<LogControlConfigRuleReplaceFieldStaticValueArgs> staticValue;

    public Optional<Output<LogControlConfigRuleReplaceFieldStaticValueArgs>> staticValue() {
        return Optional.ofNullable(this.staticValue);
    }

    private LogControlConfigRuleReplaceFieldArgs() {}

    private LogControlConfigRuleReplaceFieldArgs(LogControlConfigRuleReplaceFieldArgs $) {
        this.field = $.field;
        this.mappedValue = $.mappedValue;
        this.replaceAll = $.replaceAll;
        this.replaceMode = $.replaceMode;
        this.replaceRegex = $.replaceRegex;
        this.staticValue = $.staticValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogControlConfigRuleReplaceFieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogControlConfigRuleReplaceFieldArgs $;

        public Builder() {
            $ = new LogControlConfigRuleReplaceFieldArgs();
        }

        public Builder(LogControlConfigRuleReplaceFieldArgs defaults) {
            $ = new LogControlConfigRuleReplaceFieldArgs(Objects.requireNonNull(defaults));
        }

        public Builder field(@Nullable Output<LogControlConfigRuleReplaceFieldFieldArgs> field) {
            $.field = field;
            return this;
        }

        public Builder field(LogControlConfigRuleReplaceFieldFieldArgs field) {
            return field(Output.of(field));
        }

        public Builder mappedValue(@Nullable Output<LogControlConfigRuleReplaceFieldMappedValueArgs> mappedValue) {
            $.mappedValue = mappedValue;
            return this;
        }

        public Builder mappedValue(LogControlConfigRuleReplaceFieldMappedValueArgs mappedValue) {
            return mappedValue(Output.of(mappedValue));
        }

        public Builder replaceAll(@Nullable Output<Boolean> replaceAll) {
            $.replaceAll = replaceAll;
            return this;
        }

        public Builder replaceAll(Boolean replaceAll) {
            return replaceAll(Output.of(replaceAll));
        }

        public Builder replaceMode(@Nullable Output<String> replaceMode) {
            $.replaceMode = replaceMode;
            return this;
        }

        public Builder replaceMode(String replaceMode) {
            return replaceMode(Output.of(replaceMode));
        }

        public Builder replaceRegex(@Nullable Output<String> replaceRegex) {
            $.replaceRegex = replaceRegex;
            return this;
        }

        public Builder replaceRegex(String replaceRegex) {
            return replaceRegex(Output.of(replaceRegex));
        }

        public Builder staticValue(@Nullable Output<LogControlConfigRuleReplaceFieldStaticValueArgs> staticValue) {
            $.staticValue = staticValue;
            return this;
        }

        public Builder staticValue(LogControlConfigRuleReplaceFieldStaticValueArgs staticValue) {
            return staticValue(Output.of(staticValue));
        }

        public LogControlConfigRuleReplaceFieldArgs build() {
            return $;
        }
    }

}
