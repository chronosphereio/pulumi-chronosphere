// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TraceTailSamplingRulesRuleFilterSpanDurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final TraceTailSamplingRulesRuleFilterSpanDurationArgs Empty = new TraceTailSamplingRulesRuleFilterSpanDurationArgs();

    /**
     * @deprecated
     * use max_secs instead
     * 
     */
    @Deprecated /* use max_secs instead */
    @Import(name="maxSeconds")
    private @Nullable Output<Double> maxSeconds;

    /**
     * @deprecated
     * use max_secs instead
     * 
     */
    @Deprecated /* use max_secs instead */
    public Optional<Output<Double>> maxSeconds() {
        return Optional.ofNullable(this.maxSeconds);
    }

    @Import(name="maxSecs")
    private @Nullable Output<Double> maxSecs;

    public Optional<Output<Double>> maxSecs() {
        return Optional.ofNullable(this.maxSecs);
    }

    /**
     * @deprecated
     * use min_secs instead
     * 
     */
    @Deprecated /* use min_secs instead */
    @Import(name="minSeconds")
    private @Nullable Output<Double> minSeconds;

    /**
     * @deprecated
     * use min_secs instead
     * 
     */
    @Deprecated /* use min_secs instead */
    public Optional<Output<Double>> minSeconds() {
        return Optional.ofNullable(this.minSeconds);
    }

    @Import(name="minSecs")
    private @Nullable Output<Double> minSecs;

    public Optional<Output<Double>> minSecs() {
        return Optional.ofNullable(this.minSecs);
    }

    private TraceTailSamplingRulesRuleFilterSpanDurationArgs() {}

    private TraceTailSamplingRulesRuleFilterSpanDurationArgs(TraceTailSamplingRulesRuleFilterSpanDurationArgs $) {
        this.maxSeconds = $.maxSeconds;
        this.maxSecs = $.maxSecs;
        this.minSeconds = $.minSeconds;
        this.minSecs = $.minSecs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TraceTailSamplingRulesRuleFilterSpanDurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TraceTailSamplingRulesRuleFilterSpanDurationArgs $;

        public Builder() {
            $ = new TraceTailSamplingRulesRuleFilterSpanDurationArgs();
        }

        public Builder(TraceTailSamplingRulesRuleFilterSpanDurationArgs defaults) {
            $ = new TraceTailSamplingRulesRuleFilterSpanDurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * use max_secs instead
         * 
         */
        @Deprecated /* use max_secs instead */
        public Builder maxSeconds(@Nullable Output<Double> maxSeconds) {
            $.maxSeconds = maxSeconds;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * use max_secs instead
         * 
         */
        @Deprecated /* use max_secs instead */
        public Builder maxSeconds(Double maxSeconds) {
            return maxSeconds(Output.of(maxSeconds));
        }

        public Builder maxSecs(@Nullable Output<Double> maxSecs) {
            $.maxSecs = maxSecs;
            return this;
        }

        public Builder maxSecs(Double maxSecs) {
            return maxSecs(Output.of(maxSecs));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * use min_secs instead
         * 
         */
        @Deprecated /* use min_secs instead */
        public Builder minSeconds(@Nullable Output<Double> minSeconds) {
            $.minSeconds = minSeconds;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * use min_secs instead
         * 
         */
        @Deprecated /* use min_secs instead */
        public Builder minSeconds(Double minSeconds) {
            return minSeconds(Output.of(minSeconds));
        }

        public Builder minSecs(@Nullable Output<Double> minSecs) {
            $.minSecs = minSecs;
            return this;
        }

        public Builder minSecs(Double minSecs) {
            return minSecs(Output.of(minSecs));
        }

        public TraceTailSamplingRulesRuleFilterSpanDurationArgs build() {
            return $;
        }
    }

}
