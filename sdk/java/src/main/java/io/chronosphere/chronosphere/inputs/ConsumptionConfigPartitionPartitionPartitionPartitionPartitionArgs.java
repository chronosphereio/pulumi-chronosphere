// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.chronosphere.chronosphere.inputs.ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterArgs;
import io.chronosphere.chronosphere.inputs.ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs Empty = new ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs();

    @Import(name="filters")
    private @Nullable Output<List<ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterArgs>> filters;

    public Optional<Output<List<ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="partitions")
    private @Nullable Output<List<ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionArgs>> partitions;

    public Optional<Output<List<ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionArgs>>> partitions() {
        return Optional.ofNullable(this.partitions);
    }

    @Import(name="slug")
    private @Nullable Output<String> slug;

    public Optional<Output<String>> slug() {
        return Optional.ofNullable(this.slug);
    }

    private ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs() {}

    private ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs(ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs $) {
        this.filters = $.filters;
        this.name = $.name;
        this.partitions = $.partitions;
        this.slug = $.slug;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs $;

        public Builder() {
            $ = new ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs();
        }

        public Builder(ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs defaults) {
            $ = new ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable Output<List<ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterArgs... filters) {
            return filters(List.of(filters));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder partitions(@Nullable Output<List<ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionArgs>> partitions) {
            $.partitions = partitions;
            return this;
        }

        public Builder partitions(List<ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionArgs> partitions) {
            return partitions(Output.of(partitions));
        }

        public Builder partitions(ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionArgs... partitions) {
            return partitions(List.of(partitions));
        }

        public Builder slug(@Nullable Output<String> slug) {
            $.slug = slug;
            return this;
        }

        public Builder slug(String slug) {
            return slug(Output.of(slug));
        }

        public ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs build() {
            return $;
        }
    }

}
