// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;


public final class TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs extends com.pulumi.resources.ResourceArgs {

    public static final TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs Empty = new TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs();

    @Import(name="maxTracesPerSecond", required=true)
    private Output<Integer> maxTracesPerSecond;

    public Output<Integer> maxTracesPerSecond() {
        return this.maxTracesPerSecond;
    }

    private TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs() {}

    private TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs(TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs $) {
        this.maxTracesPerSecond = $.maxTracesPerSecond;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs $;

        public Builder() {
            $ = new TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs();
        }

        public Builder(TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs defaults) {
            $ = new TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs(Objects.requireNonNull(defaults));
        }

        public Builder maxTracesPerSecond(Output<Integer> maxTracesPerSecond) {
            $.maxTracesPerSecond = maxTracesPerSecond;
            return this;
        }

        public Builder maxTracesPerSecond(Integer maxTracesPerSecond) {
            return maxTracesPerSecond(Output.of(maxTracesPerSecond));
        }

        public TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs build() {
            $.maxTracesPerSecond = Objects.requireNonNull($.maxTracesPerSecond, "expected parameter 'maxTracesPerSecond' to be non-null");
            return $;
        }
    }

}
