// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.chronosphere.chronosphere.inputs.TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyArgs;
import java.lang.Double;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs Empty = new TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs();

    @Import(name="defaultLowerBoundTracesPerSecond")
    private @Nullable Output<Double> defaultLowerBoundTracesPerSecond;

    public Optional<Output<Double>> defaultLowerBoundTracesPerSecond() {
        return Optional.ofNullable(this.defaultLowerBoundTracesPerSecond);
    }

    @Import(name="defaultSamplingRate", required=true)
    private Output<Double> defaultSamplingRate;

    public Output<Double> defaultSamplingRate() {
        return this.defaultSamplingRate;
    }

    @Import(name="defaultUpperBoundTracesPerSecond")
    private @Nullable Output<Double> defaultUpperBoundTracesPerSecond;

    public Optional<Output<Double>> defaultUpperBoundTracesPerSecond() {
        return Optional.ofNullable(this.defaultUpperBoundTracesPerSecond);
    }

    @Import(name="perOperationStrategies")
    private @Nullable Output<List<TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyArgs>> perOperationStrategies;

    public Optional<Output<List<TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyArgs>>> perOperationStrategies() {
        return Optional.ofNullable(this.perOperationStrategies);
    }

    private TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs() {}

    private TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs(TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs $) {
        this.defaultLowerBoundTracesPerSecond = $.defaultLowerBoundTracesPerSecond;
        this.defaultSamplingRate = $.defaultSamplingRate;
        this.defaultUpperBoundTracesPerSecond = $.defaultUpperBoundTracesPerSecond;
        this.perOperationStrategies = $.perOperationStrategies;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs $;

        public Builder() {
            $ = new TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs();
        }

        public Builder(TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs defaults) {
            $ = new TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder defaultLowerBoundTracesPerSecond(@Nullable Output<Double> defaultLowerBoundTracesPerSecond) {
            $.defaultLowerBoundTracesPerSecond = defaultLowerBoundTracesPerSecond;
            return this;
        }

        public Builder defaultLowerBoundTracesPerSecond(Double defaultLowerBoundTracesPerSecond) {
            return defaultLowerBoundTracesPerSecond(Output.of(defaultLowerBoundTracesPerSecond));
        }

        public Builder defaultSamplingRate(Output<Double> defaultSamplingRate) {
            $.defaultSamplingRate = defaultSamplingRate;
            return this;
        }

        public Builder defaultSamplingRate(Double defaultSamplingRate) {
            return defaultSamplingRate(Output.of(defaultSamplingRate));
        }

        public Builder defaultUpperBoundTracesPerSecond(@Nullable Output<Double> defaultUpperBoundTracesPerSecond) {
            $.defaultUpperBoundTracesPerSecond = defaultUpperBoundTracesPerSecond;
            return this;
        }

        public Builder defaultUpperBoundTracesPerSecond(Double defaultUpperBoundTracesPerSecond) {
            return defaultUpperBoundTracesPerSecond(Output.of(defaultUpperBoundTracesPerSecond));
        }

        public Builder perOperationStrategies(@Nullable Output<List<TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyArgs>> perOperationStrategies) {
            $.perOperationStrategies = perOperationStrategies;
            return this;
        }

        public Builder perOperationStrategies(List<TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyArgs> perOperationStrategies) {
            return perOperationStrategies(Output.of(perOperationStrategies));
        }

        public Builder perOperationStrategies(TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyArgs... perOperationStrategies) {
            return perOperationStrategies(List.of(perOperationStrategies));
        }

        public TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs build() {
            $.defaultSamplingRate = Objects.requireNonNull($.defaultSamplingRate, "expected parameter 'defaultSamplingRate' to be non-null");
            return $;
        }
    }

}
