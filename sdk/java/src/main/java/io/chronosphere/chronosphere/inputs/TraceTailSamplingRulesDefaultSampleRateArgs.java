// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TraceTailSamplingRulesDefaultSampleRateArgs extends com.pulumi.resources.ResourceArgs {

    public static final TraceTailSamplingRulesDefaultSampleRateArgs Empty = new TraceTailSamplingRulesDefaultSampleRateArgs();

    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="sampleRate", required=true)
    private Output<Double> sampleRate;

    public Output<Double> sampleRate() {
        return this.sampleRate;
    }

    private TraceTailSamplingRulesDefaultSampleRateArgs() {}

    private TraceTailSamplingRulesDefaultSampleRateArgs(TraceTailSamplingRulesDefaultSampleRateArgs $) {
        this.enabled = $.enabled;
        this.sampleRate = $.sampleRate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TraceTailSamplingRulesDefaultSampleRateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TraceTailSamplingRulesDefaultSampleRateArgs $;

        public Builder() {
            $ = new TraceTailSamplingRulesDefaultSampleRateArgs();
        }

        public Builder(TraceTailSamplingRulesDefaultSampleRateArgs defaults) {
            $ = new TraceTailSamplingRulesDefaultSampleRateArgs(Objects.requireNonNull(defaults));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder sampleRate(Output<Double> sampleRate) {
            $.sampleRate = sampleRate;
            return this;
        }

        public Builder sampleRate(Double sampleRate) {
            return sampleRate(Output.of(sampleRate));
        }

        public TraceTailSamplingRulesDefaultSampleRateArgs build() {
            $.sampleRate = Objects.requireNonNull($.sampleRate, "expected parameter 'sampleRate' to be non-null");
            return $;
        }
    }

}
