// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.chronosphere.chronosphere.MonitorArgs;
import io.chronosphere.chronosphere.Utilities;
import io.chronosphere.chronosphere.inputs.MonitorState;
import io.chronosphere.chronosphere.outputs.MonitorQuery;
import io.chronosphere.chronosphere.outputs.MonitorSchedule;
import io.chronosphere.chronosphere.outputs.MonitorSeriesConditions;
import io.chronosphere.chronosphere.outputs.MonitorSignalGrouping;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="chronosphere:index/monitor:Monitor")
public class Monitor extends com.pulumi.resources.CustomResource {
    @Export(name="annotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> annotations;

    public Output<Optional<Map<String,String>>> annotations() {
        return Codegen.optional(this.annotations);
    }
    @Export(name="bucketId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> bucketId;

    public Output<Optional<String>> bucketId() {
        return Codegen.optional(this.bucketId);
    }
    @Export(name="collectionId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> collectionId;

    public Output<Optional<String>> collectionId() {
        return Codegen.optional(this.collectionId);
    }
    @Export(name="interval", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interval;

    public Output<Optional<String>> interval() {
        return Codegen.optional(this.interval);
    }
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }
    @Export(name="notificationPolicyId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> notificationPolicyId;

    public Output<Optional<String>> notificationPolicyId() {
        return Codegen.optional(this.notificationPolicyId);
    }
    @Export(name="query", refs={MonitorQuery.class}, tree="[0]")
    private Output<MonitorQuery> query;

    public Output<MonitorQuery> query() {
        return this.query;
    }
    @Export(name="schedule", refs={MonitorSchedule.class}, tree="[0]")
    private Output</* @Nullable */ MonitorSchedule> schedule;

    public Output<Optional<MonitorSchedule>> schedule() {
        return Codegen.optional(this.schedule);
    }
    @Export(name="seriesConditions", refs={MonitorSeriesConditions.class}, tree="[0]")
    private Output<MonitorSeriesConditions> seriesConditions;

    public Output<MonitorSeriesConditions> seriesConditions() {
        return this.seriesConditions;
    }
    @Export(name="signalGrouping", refs={MonitorSignalGrouping.class}, tree="[0]")
    private Output</* @Nullable */ MonitorSignalGrouping> signalGrouping;

    public Output<Optional<MonitorSignalGrouping>> signalGrouping() {
        return Codegen.optional(this.signalGrouping);
    }
    @Export(name="slug", refs={String.class}, tree="[0]")
    private Output<String> slug;

    public Output<String> slug() {
        return this.slug;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Monitor(String name) {
        this(name, MonitorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Monitor(String name, MonitorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Monitor(String name, MonitorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("chronosphere:index/monitor:Monitor", name, args == null ? MonitorArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Monitor(String name, Output<String> id, @Nullable MonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("chronosphere:index/monitor:Monitor", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Monitor get(String name, Output<String> id, @Nullable MonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Monitor(name, id, state, options);
    }
}
