// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.outputs;

import com.pulumi.core.annotations.CustomType;
import io.chronosphere.chronosphere.outputs.LogAllocationConfigDatasetAllocationAllocation;
import io.chronosphere.chronosphere.outputs.LogAllocationConfigDatasetAllocationPriorities;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LogAllocationConfigDatasetAllocation {
    private LogAllocationConfigDatasetAllocationAllocation allocation;
    private String datasetId;
    private @Nullable LogAllocationConfigDatasetAllocationPriorities priorities;

    private LogAllocationConfigDatasetAllocation() {}
    public LogAllocationConfigDatasetAllocationAllocation allocation() {
        return this.allocation;
    }
    public String datasetId() {
        return this.datasetId;
    }
    public Optional<LogAllocationConfigDatasetAllocationPriorities> priorities() {
        return Optional.ofNullable(this.priorities);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogAllocationConfigDatasetAllocation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private LogAllocationConfigDatasetAllocationAllocation allocation;
        private String datasetId;
        private @Nullable LogAllocationConfigDatasetAllocationPriorities priorities;
        public Builder() {}
        public Builder(LogAllocationConfigDatasetAllocation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocation = defaults.allocation;
    	      this.datasetId = defaults.datasetId;
    	      this.priorities = defaults.priorities;
        }

        @CustomType.Setter
        public Builder allocation(LogAllocationConfigDatasetAllocationAllocation allocation) {
            this.allocation = Objects.requireNonNull(allocation);
            return this;
        }
        @CustomType.Setter
        public Builder datasetId(String datasetId) {
            this.datasetId = Objects.requireNonNull(datasetId);
            return this;
        }
        @CustomType.Setter
        public Builder priorities(@Nullable LogAllocationConfigDatasetAllocationPriorities priorities) {
            this.priorities = priorities;
            return this;
        }
        public LogAllocationConfigDatasetAllocation build() {
            final var o = new LogAllocationConfigDatasetAllocation();
            o.allocation = allocation;
            o.datasetId = datasetId;
            o.priorities = priorities;
            return o;
        }
    }
}
