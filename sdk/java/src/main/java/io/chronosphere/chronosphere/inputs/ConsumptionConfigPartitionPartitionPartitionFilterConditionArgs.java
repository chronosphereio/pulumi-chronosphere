// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.chronosphere.chronosphere.inputs.ConsumptionConfigPartitionPartitionPartitionFilterConditionLogFilterArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs Empty = new ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs();

    @Import(name="datasetId")
    private @Nullable Output<String> datasetId;

    public Optional<Output<String>> datasetId() {
        return Optional.ofNullable(this.datasetId);
    }

    @Import(name="logFilter")
    private @Nullable Output<ConsumptionConfigPartitionPartitionPartitionFilterConditionLogFilterArgs> logFilter;

    public Optional<Output<ConsumptionConfigPartitionPartitionPartitionFilterConditionLogFilterArgs>> logFilter() {
        return Optional.ofNullable(this.logFilter);
    }

    private ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs() {}

    private ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs(ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs $) {
        this.datasetId = $.datasetId;
        this.logFilter = $.logFilter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs $;

        public Builder() {
            $ = new ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs();
        }

        public Builder(ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs defaults) {
            $ = new ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs(Objects.requireNonNull(defaults));
        }

        public Builder datasetId(@Nullable Output<String> datasetId) {
            $.datasetId = datasetId;
            return this;
        }

        public Builder datasetId(String datasetId) {
            return datasetId(Output.of(datasetId));
        }

        public Builder logFilter(@Nullable Output<ConsumptionConfigPartitionPartitionPartitionFilterConditionLogFilterArgs> logFilter) {
            $.logFilter = logFilter;
            return this;
        }

        public Builder logFilter(ConsumptionConfigPartitionPartitionPartitionFilterConditionLogFilterArgs logFilter) {
            return logFilter(Output.of(logFilter));
        }

        public ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs build() {
            return $;
        }
    }

}
