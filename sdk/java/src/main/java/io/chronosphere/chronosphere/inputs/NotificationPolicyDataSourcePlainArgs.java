// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.annotations.Import;
import io.chronosphere.chronosphere.inputs.NotificationPolicyDataSourceOverride;
import io.chronosphere.chronosphere.inputs.NotificationPolicyDataSourceRoute;
import io.chronosphere.chronosphere.inputs.NotificationPolicyDataSourceRule;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationPolicyDataSourcePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final NotificationPolicyDataSourcePlainArgs Empty = new NotificationPolicyDataSourcePlainArgs();

    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="notificationPolicyData")
    private @Nullable String notificationPolicyData;

    public Optional<String> notificationPolicyData() {
        return Optional.ofNullable(this.notificationPolicyData);
    }

    @Import(name="overrides")
    private @Nullable List<NotificationPolicyDataSourceOverride> overrides;

    public Optional<List<NotificationPolicyDataSourceOverride>> overrides() {
        return Optional.ofNullable(this.overrides);
    }

    @Import(name="routes")
    private @Nullable List<NotificationPolicyDataSourceRoute> routes;

    public Optional<List<NotificationPolicyDataSourceRoute>> routes() {
        return Optional.ofNullable(this.routes);
    }

    /**
     * @deprecated
     * `rule` is deprecated, use `route` instead.
     * 
     */
    @Deprecated /* `rule` is deprecated, use `route` instead. */
    @Import(name="rules")
    private @Nullable List<NotificationPolicyDataSourceRule> rules;

    /**
     * @deprecated
     * `rule` is deprecated, use `route` instead.
     * 
     */
    @Deprecated /* `rule` is deprecated, use `route` instead. */
    public Optional<List<NotificationPolicyDataSourceRule>> rules() {
        return Optional.ofNullable(this.rules);
    }

    @Import(name="slug")
    private @Nullable String slug;

    public Optional<String> slug() {
        return Optional.ofNullable(this.slug);
    }

    @Import(name="teamId")
    private @Nullable String teamId;

    public Optional<String> teamId() {
        return Optional.ofNullable(this.teamId);
    }

    private NotificationPolicyDataSourcePlainArgs() {}

    private NotificationPolicyDataSourcePlainArgs(NotificationPolicyDataSourcePlainArgs $) {
        this.name = $.name;
        this.notificationPolicyData = $.notificationPolicyData;
        this.overrides = $.overrides;
        this.routes = $.routes;
        this.rules = $.rules;
        this.slug = $.slug;
        this.teamId = $.teamId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationPolicyDataSourcePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationPolicyDataSourcePlainArgs $;

        public Builder() {
            $ = new NotificationPolicyDataSourcePlainArgs();
        }

        public Builder(NotificationPolicyDataSourcePlainArgs defaults) {
            $ = new NotificationPolicyDataSourcePlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder notificationPolicyData(@Nullable String notificationPolicyData) {
            $.notificationPolicyData = notificationPolicyData;
            return this;
        }

        public Builder overrides(@Nullable List<NotificationPolicyDataSourceOverride> overrides) {
            $.overrides = overrides;
            return this;
        }

        public Builder overrides(NotificationPolicyDataSourceOverride... overrides) {
            return overrides(List.of(overrides));
        }

        public Builder routes(@Nullable List<NotificationPolicyDataSourceRoute> routes) {
            $.routes = routes;
            return this;
        }

        public Builder routes(NotificationPolicyDataSourceRoute... routes) {
            return routes(List.of(routes));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * `rule` is deprecated, use `route` instead.
         * 
         */
        @Deprecated /* `rule` is deprecated, use `route` instead. */
        public Builder rules(@Nullable List<NotificationPolicyDataSourceRule> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * `rule` is deprecated, use `route` instead.
         * 
         */
        @Deprecated /* `rule` is deprecated, use `route` instead. */
        public Builder rules(NotificationPolicyDataSourceRule... rules) {
            return rules(List.of(rules));
        }

        public Builder slug(@Nullable String slug) {
            $.slug = slug;
            return this;
        }

        public Builder teamId(@Nullable String teamId) {
            $.teamId = teamId;
            return this;
        }

        public NotificationPolicyDataSourcePlainArgs build() {
            return $;
        }
    }

}
