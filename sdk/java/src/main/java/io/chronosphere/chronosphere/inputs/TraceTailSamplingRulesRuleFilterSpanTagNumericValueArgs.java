// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


public final class TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs extends com.pulumi.resources.ResourceArgs {

    public static final TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs Empty = new TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs();

    @Import(name="comparison", required=true)
    private Output<String> comparison;

    public Output<String> comparison() {
        return this.comparison;
    }

    @Import(name="value", required=true)
    private Output<Double> value;

    public Output<Double> value() {
        return this.value;
    }

    private TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs() {}

    private TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs(TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs $) {
        this.comparison = $.comparison;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs $;

        public Builder() {
            $ = new TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs();
        }

        public Builder(TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs defaults) {
            $ = new TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs(Objects.requireNonNull(defaults));
        }

        public Builder comparison(Output<String> comparison) {
            $.comparison = comparison;
            return this;
        }

        public Builder comparison(String comparison) {
            return comparison(Output.of(comparison));
        }

        public Builder value(Output<Double> value) {
            $.value = value;
            return this;
        }

        public Builder value(Double value) {
            return value(Output.of(value));
        }

        public TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs build() {
            $.comparison = Objects.requireNonNull($.comparison, "expected parameter 'comparison' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
