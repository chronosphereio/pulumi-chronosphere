// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import io.chronosphere.chronosphere.Utilities;
import io.chronosphere.chronosphere.inputs.BucketDataSourceArgs;
import io.chronosphere.chronosphere.inputs.BucketDataSourcePlainArgs;
import io.chronosphere.chronosphere.inputs.CollectionDataSourceArgs;
import io.chronosphere.chronosphere.inputs.CollectionDataSourcePlainArgs;
import io.chronosphere.chronosphere.inputs.ServiceDataSourceArgs;
import io.chronosphere.chronosphere.inputs.ServiceDataSourcePlainArgs;
import io.chronosphere.chronosphere.outputs.BucketDataSourceResult;
import io.chronosphere.chronosphere.outputs.CollectionDataSourceResult;
import io.chronosphere.chronosphere.outputs.ServiceDataSourceResult;
import java.util.concurrent.CompletableFuture;

public final class ChronosphereFunctions {
    public static Output<BucketDataSourceResult> bucketDataSource() {
        return bucketDataSource(BucketDataSourceArgs.Empty, InvokeOptions.Empty);
    }
    public static CompletableFuture<BucketDataSourceResult> bucketDataSourcePlain() {
        return bucketDataSourcePlain(BucketDataSourcePlainArgs.Empty, InvokeOptions.Empty);
    }
    public static Output<BucketDataSourceResult> bucketDataSource(BucketDataSourceArgs args) {
        return bucketDataSource(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<BucketDataSourceResult> bucketDataSourcePlain(BucketDataSourcePlainArgs args) {
        return bucketDataSourcePlain(args, InvokeOptions.Empty);
    }
    public static Output<BucketDataSourceResult> bucketDataSource(BucketDataSourceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("chronosphere:index/bucketDataSource:BucketDataSource", TypeShape.of(BucketDataSourceResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<BucketDataSourceResult> bucketDataSourcePlain(BucketDataSourcePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("chronosphere:index/bucketDataSource:BucketDataSource", TypeShape.of(BucketDataSourceResult.class), args, Utilities.withVersion(options));
    }
    public static Output<CollectionDataSourceResult> collectionDataSource() {
        return collectionDataSource(CollectionDataSourceArgs.Empty, InvokeOptions.Empty);
    }
    public static CompletableFuture<CollectionDataSourceResult> collectionDataSourcePlain() {
        return collectionDataSourcePlain(CollectionDataSourcePlainArgs.Empty, InvokeOptions.Empty);
    }
    public static Output<CollectionDataSourceResult> collectionDataSource(CollectionDataSourceArgs args) {
        return collectionDataSource(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<CollectionDataSourceResult> collectionDataSourcePlain(CollectionDataSourcePlainArgs args) {
        return collectionDataSourcePlain(args, InvokeOptions.Empty);
    }
    public static Output<CollectionDataSourceResult> collectionDataSource(CollectionDataSourceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("chronosphere:index/collectionDataSource:CollectionDataSource", TypeShape.of(CollectionDataSourceResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<CollectionDataSourceResult> collectionDataSourcePlain(CollectionDataSourcePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("chronosphere:index/collectionDataSource:CollectionDataSource", TypeShape.of(CollectionDataSourceResult.class), args, Utilities.withVersion(options));
    }
    public static Output<ServiceDataSourceResult> serviceDataSource(ServiceDataSourceArgs args) {
        return serviceDataSource(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<ServiceDataSourceResult> serviceDataSourcePlain(ServiceDataSourcePlainArgs args) {
        return serviceDataSourcePlain(args, InvokeOptions.Empty);
    }
    public static Output<ServiceDataSourceResult> serviceDataSource(ServiceDataSourceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("chronosphere:index/serviceDataSource:ServiceDataSource", TypeShape.of(ServiceDataSourceResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<ServiceDataSourceResult> serviceDataSourcePlain(ServiceDataSourcePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("chronosphere:index/serviceDataSource:ServiceDataSource", TypeShape.of(ServiceDataSourceResult.class), args, Utilities.withVersion(options));
    }
}
