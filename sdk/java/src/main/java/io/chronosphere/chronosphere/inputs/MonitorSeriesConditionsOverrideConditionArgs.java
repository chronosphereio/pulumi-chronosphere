// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.chronosphere.chronosphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitorSeriesConditionsOverrideConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitorSeriesConditionsOverrideConditionArgs Empty = new MonitorSeriesConditionsOverrideConditionArgs();

    @Import(name="op", required=true)
    private Output<String> op;

    public Output<String> op() {
        return this.op;
    }

    @Import(name="resolveSustain")
    private @Nullable Output<String> resolveSustain;

    public Optional<Output<String>> resolveSustain() {
        return Optional.ofNullable(this.resolveSustain);
    }

    @Import(name="severity", required=true)
    private Output<String> severity;

    public Output<String> severity() {
        return this.severity;
    }

    @Import(name="sustain")
    private @Nullable Output<String> sustain;

    public Optional<Output<String>> sustain() {
        return Optional.ofNullable(this.sustain);
    }

    @Import(name="value")
    private @Nullable Output<Double> value;

    public Optional<Output<Double>> value() {
        return Optional.ofNullable(this.value);
    }

    private MonitorSeriesConditionsOverrideConditionArgs() {}

    private MonitorSeriesConditionsOverrideConditionArgs(MonitorSeriesConditionsOverrideConditionArgs $) {
        this.op = $.op;
        this.resolveSustain = $.resolveSustain;
        this.severity = $.severity;
        this.sustain = $.sustain;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorSeriesConditionsOverrideConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorSeriesConditionsOverrideConditionArgs $;

        public Builder() {
            $ = new MonitorSeriesConditionsOverrideConditionArgs();
        }

        public Builder(MonitorSeriesConditionsOverrideConditionArgs defaults) {
            $ = new MonitorSeriesConditionsOverrideConditionArgs(Objects.requireNonNull(defaults));
        }

        public Builder op(Output<String> op) {
            $.op = op;
            return this;
        }

        public Builder op(String op) {
            return op(Output.of(op));
        }

        public Builder resolveSustain(@Nullable Output<String> resolveSustain) {
            $.resolveSustain = resolveSustain;
            return this;
        }

        public Builder resolveSustain(String resolveSustain) {
            return resolveSustain(Output.of(resolveSustain));
        }

        public Builder severity(Output<String> severity) {
            $.severity = severity;
            return this;
        }

        public Builder severity(String severity) {
            return severity(Output.of(severity));
        }

        public Builder sustain(@Nullable Output<String> sustain) {
            $.sustain = sustain;
            return this;
        }

        public Builder sustain(String sustain) {
            return sustain(Output.of(sustain));
        }

        public Builder value(@Nullable Output<Double> value) {
            $.value = value;
            return this;
        }

        public Builder value(Double value) {
            return value(Output.of(value));
        }

        public MonitorSeriesConditionsOverrideConditionArgs build() {
            $.op = Objects.requireNonNull($.op, "expected parameter 'op' to be non-null");
            $.severity = Objects.requireNonNull($.severity, "expected parameter 'severity' to be non-null");
            return $;
        }
    }

}
